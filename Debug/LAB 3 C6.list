
LAB 3 C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003cd8  08003cd8  00004cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cfc  08003cfc  00005070  2**0
                  CONTENTS
  4 .ARM          00000000  08003cfc  08003cfc  00005070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cfc  08003cfc  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cfc  08003cfc  00004cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d00  08003d00  00004d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003d04  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003d74  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003d74  00005134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089c4  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c42  00000000  00000000  0000da5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0000f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ff  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017752  00000000  00000000  0001092f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0b1  00000000  00000000  00028081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861a3  00000000  00000000  00035132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb2d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba8  00000000  00000000  000bb318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000bdec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc0 	.word	0x08003cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003cc0 	.word	0x08003cc0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <display7SEG>:
    HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
}

  void display7SEG(int num) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f2c0 819c 	blt.w	8000d94 <display7SEG+0x348>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b09      	cmp	r3, #9
 8000a60:	f300 8198 	bgt.w	8000d94 <display7SEG+0x348>
    switch (num) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b09      	cmp	r3, #9
 8000a68:	f200 8196 	bhi.w	8000d98 <display7SEG+0x34c>
 8000a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a74 <display7SEG+0x28>)
 8000a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a72:	bf00      	nop
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	08000ae9 	.word	0x08000ae9
 8000a7c:	08000b35 	.word	0x08000b35
 8000a80:	08000b81 	.word	0x08000b81
 8000a84:	08000bcd 	.word	0x08000bcd
 8000a88:	08000c19 	.word	0x08000c19
 8000a8c:	08000c65 	.word	0x08000c65
 8000a90:	08000cb1 	.word	0x08000cb1
 8000a94:	08000cfd 	.word	0x08000cfd
 8000a98:	08000d49 	.word	0x08000d49
        case 0:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	48bf      	ldr	r0, [pc, #764]	@ (8000da0 <display7SEG+0x354>)
 8000aa2:	f002 f878 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	48bd      	ldr	r0, [pc, #756]	@ (8000da0 <display7SEG+0x354>)
 8000aac:	f002 f873 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	48ba      	ldr	r0, [pc, #744]	@ (8000da0 <display7SEG+0x354>)
 8000ab6:	f002 f86e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	48b8      	ldr	r0, [pc, #736]	@ (8000da0 <display7SEG+0x354>)
 8000ac0:	f002 f869 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	48b5      	ldr	r0, [pc, #724]	@ (8000da0 <display7SEG+0x354>)
 8000aca:	f002 f864 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ad4:	48b2      	ldr	r0, [pc, #712]	@ (8000da0 <display7SEG+0x354>)
 8000ad6:	f002 f85e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae0:	48af      	ldr	r0, [pc, #700]	@ (8000da0 <display7SEG+0x354>)
 8000ae2:	f002 f858 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000ae6:	e158      	b.n	8000d9a <display7SEG+0x34e>
        case 1:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2101      	movs	r1, #1
 8000aec:	48ac      	ldr	r0, [pc, #688]	@ (8000da0 <display7SEG+0x354>)
 8000aee:	f002 f852 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	48aa      	ldr	r0, [pc, #680]	@ (8000da0 <display7SEG+0x354>)
 8000af8:	f002 f84d 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	48a7      	ldr	r0, [pc, #668]	@ (8000da0 <display7SEG+0x354>)
 8000b02:	f002 f848 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2108      	movs	r1, #8
 8000b0a:	48a5      	ldr	r0, [pc, #660]	@ (8000da0 <display7SEG+0x354>)
 8000b0c:	f002 f843 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	48a2      	ldr	r0, [pc, #648]	@ (8000da0 <display7SEG+0x354>)
 8000b16:	f002 f83e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b20:	489f      	ldr	r0, [pc, #636]	@ (8000da0 <display7SEG+0x354>)
 8000b22:	f002 f838 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b2c:	489c      	ldr	r0, [pc, #624]	@ (8000da0 <display7SEG+0x354>)
 8000b2e:	f002 f832 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000b32:	e132      	b.n	8000d9a <display7SEG+0x34e>
        case 2:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	4899      	ldr	r0, [pc, #612]	@ (8000da0 <display7SEG+0x354>)
 8000b3a:	f002 f82c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	4897      	ldr	r0, [pc, #604]	@ (8000da0 <display7SEG+0x354>)
 8000b44:	f002 f827 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4894      	ldr	r0, [pc, #592]	@ (8000da0 <display7SEG+0x354>)
 8000b4e:	f002 f822 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2108      	movs	r1, #8
 8000b56:	4892      	ldr	r0, [pc, #584]	@ (8000da0 <display7SEG+0x354>)
 8000b58:	f002 f81d 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	488f      	ldr	r0, [pc, #572]	@ (8000da0 <display7SEG+0x354>)
 8000b62:	f002 f818 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6c:	488c      	ldr	r0, [pc, #560]	@ (8000da0 <display7SEG+0x354>)
 8000b6e:	f002 f812 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b78:	4889      	ldr	r0, [pc, #548]	@ (8000da0 <display7SEG+0x354>)
 8000b7a:	f002 f80c 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000b7e:	e10c      	b.n	8000d9a <display7SEG+0x34e>
        case 3:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4886      	ldr	r0, [pc, #536]	@ (8000da0 <display7SEG+0x354>)
 8000b86:	f002 f806 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4884      	ldr	r0, [pc, #528]	@ (8000da0 <display7SEG+0x354>)
 8000b90:	f002 f801 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2104      	movs	r1, #4
 8000b98:	4881      	ldr	r0, [pc, #516]	@ (8000da0 <display7SEG+0x354>)
 8000b9a:	f001 fffc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	487f      	ldr	r0, [pc, #508]	@ (8000da0 <display7SEG+0x354>)
 8000ba4:	f001 fff7 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	487c      	ldr	r0, [pc, #496]	@ (8000da0 <display7SEG+0x354>)
 8000bae:	f001 fff2 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb8:	4879      	ldr	r0, [pc, #484]	@ (8000da0 <display7SEG+0x354>)
 8000bba:	f001 ffec 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc4:	4876      	ldr	r0, [pc, #472]	@ (8000da0 <display7SEG+0x354>)
 8000bc6:	f001 ffe6 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000bca:	e0e6      	b.n	8000d9a <display7SEG+0x34e>
        case 4:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4873      	ldr	r0, [pc, #460]	@ (8000da0 <display7SEG+0x354>)
 8000bd2:	f001 ffe0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4871      	ldr	r0, [pc, #452]	@ (8000da0 <display7SEG+0x354>)
 8000bdc:	f001 ffdb 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2104      	movs	r1, #4
 8000be4:	486e      	ldr	r0, [pc, #440]	@ (8000da0 <display7SEG+0x354>)
 8000be6:	f001 ffd6 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2108      	movs	r1, #8
 8000bee:	486c      	ldr	r0, [pc, #432]	@ (8000da0 <display7SEG+0x354>)
 8000bf0:	f001 ffd1 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	4869      	ldr	r0, [pc, #420]	@ (8000da0 <display7SEG+0x354>)
 8000bfa:	f001 ffcc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c04:	4866      	ldr	r0, [pc, #408]	@ (8000da0 <display7SEG+0x354>)
 8000c06:	f001 ffc6 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c10:	4863      	ldr	r0, [pc, #396]	@ (8000da0 <display7SEG+0x354>)
 8000c12:	f001 ffc0 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000c16:	e0c0      	b.n	8000d9a <display7SEG+0x34e>
        case 5:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4860      	ldr	r0, [pc, #384]	@ (8000da0 <display7SEG+0x354>)
 8000c1e:	f001 ffba 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2102      	movs	r1, #2
 8000c26:	485e      	ldr	r0, [pc, #376]	@ (8000da0 <display7SEG+0x354>)
 8000c28:	f001 ffb5 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	485b      	ldr	r0, [pc, #364]	@ (8000da0 <display7SEG+0x354>)
 8000c32:	f001 ffb0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2108      	movs	r1, #8
 8000c3a:	4859      	ldr	r0, [pc, #356]	@ (8000da0 <display7SEG+0x354>)
 8000c3c:	f001 ffab 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4856      	ldr	r0, [pc, #344]	@ (8000da0 <display7SEG+0x354>)
 8000c46:	f001 ffa6 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c50:	4853      	ldr	r0, [pc, #332]	@ (8000da0 <display7SEG+0x354>)
 8000c52:	f001 ffa0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5c:	4850      	ldr	r0, [pc, #320]	@ (8000da0 <display7SEG+0x354>)
 8000c5e:	f001 ff9a 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000c62:	e09a      	b.n	8000d9a <display7SEG+0x34e>
        case 6:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	484d      	ldr	r0, [pc, #308]	@ (8000da0 <display7SEG+0x354>)
 8000c6a:	f001 ff94 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2102      	movs	r1, #2
 8000c72:	484b      	ldr	r0, [pc, #300]	@ (8000da0 <display7SEG+0x354>)
 8000c74:	f001 ff8f 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4848      	ldr	r0, [pc, #288]	@ (8000da0 <display7SEG+0x354>)
 8000c7e:	f001 ff8a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2108      	movs	r1, #8
 8000c86:	4846      	ldr	r0, [pc, #280]	@ (8000da0 <display7SEG+0x354>)
 8000c88:	f001 ff85 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4843      	ldr	r0, [pc, #268]	@ (8000da0 <display7SEG+0x354>)
 8000c92:	f001 ff80 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4840      	ldr	r0, [pc, #256]	@ (8000da0 <display7SEG+0x354>)
 8000c9e:	f001 ff7a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca8:	483d      	ldr	r0, [pc, #244]	@ (8000da0 <display7SEG+0x354>)
 8000caa:	f001 ff74 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000cae:	e074      	b.n	8000d9a <display7SEG+0x34e>
        case 7:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	483a      	ldr	r0, [pc, #232]	@ (8000da0 <display7SEG+0x354>)
 8000cb6:	f001 ff6e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4838      	ldr	r0, [pc, #224]	@ (8000da0 <display7SEG+0x354>)
 8000cc0:	f001 ff69 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4835      	ldr	r0, [pc, #212]	@ (8000da0 <display7SEG+0x354>)
 8000cca:	f001 ff64 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4833      	ldr	r0, [pc, #204]	@ (8000da0 <display7SEG+0x354>)
 8000cd4:	f001 ff5f 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4830      	ldr	r0, [pc, #192]	@ (8000da0 <display7SEG+0x354>)
 8000cde:	f001 ff5a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce8:	482d      	ldr	r0, [pc, #180]	@ (8000da0 <display7SEG+0x354>)
 8000cea:	f001 ff54 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf4:	482a      	ldr	r0, [pc, #168]	@ (8000da0 <display7SEG+0x354>)
 8000cf6:	f001 ff4e 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000cfa:	e04e      	b.n	8000d9a <display7SEG+0x34e>
        case 8:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4827      	ldr	r0, [pc, #156]	@ (8000da0 <display7SEG+0x354>)
 8000d02:	f001 ff48 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4825      	ldr	r0, [pc, #148]	@ (8000da0 <display7SEG+0x354>)
 8000d0c:	f001 ff43 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	4822      	ldr	r0, [pc, #136]	@ (8000da0 <display7SEG+0x354>)
 8000d16:	f001 ff3e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4820      	ldr	r0, [pc, #128]	@ (8000da0 <display7SEG+0x354>)
 8000d20:	f001 ff39 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	481d      	ldr	r0, [pc, #116]	@ (8000da0 <display7SEG+0x354>)
 8000d2a:	f001 ff34 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <display7SEG+0x354>)
 8000d36:	f001 ff2e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d40:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <display7SEG+0x354>)
 8000d42:	f001 ff28 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000d46:	e028      	b.n	8000d9a <display7SEG+0x34e>
        case 9:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4814      	ldr	r0, [pc, #80]	@ (8000da0 <display7SEG+0x354>)
 8000d4e:	f001 ff22 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2102      	movs	r1, #2
 8000d56:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <display7SEG+0x354>)
 8000d58:	f001 ff1d 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2104      	movs	r1, #4
 8000d60:	480f      	ldr	r0, [pc, #60]	@ (8000da0 <display7SEG+0x354>)
 8000d62:	f001 ff18 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2108      	movs	r1, #8
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <display7SEG+0x354>)
 8000d6c:	f001 ff13 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <display7SEG+0x354>)
 8000d76:	f001 ff0e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d80:	4807      	ldr	r0, [pc, #28]	@ (8000da0 <display7SEG+0x354>)
 8000d82:	f001 ff08 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <display7SEG+0x354>)
 8000d8e:	f001 ff02 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000d92:	e002      	b.n	8000d9a <display7SEG+0x34e>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000d94:	bf00      	nop
 8000d96:	e000      	b.n	8000d9a <display7SEG+0x34e>
        default:
            // Handle invalid input
            break;
 8000d98:	bf00      	nop
    }
  }
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40010800 	.word	0x40010800

08000da4 <display7SEG2>:

  void display7SEG2(int num) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f2c0 81b0 	blt.w	8001114 <display7SEG2+0x370>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b09      	cmp	r3, #9
 8000db8:	f300 81ac 	bgt.w	8001114 <display7SEG2+0x370>
    switch (num) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b09      	cmp	r3, #9
 8000dc0:	f200 81aa 	bhi.w	8001118 <display7SEG2+0x374>
 8000dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dcc <display7SEG2+0x28>)
 8000dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dca:	bf00      	nop
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	08000e45 	.word	0x08000e45
 8000dd4:	08000e95 	.word	0x08000e95
 8000dd8:	08000ee5 	.word	0x08000ee5
 8000ddc:	08000f35 	.word	0x08000f35
 8000de0:	08000f85 	.word	0x08000f85
 8000de4:	08000fd5 	.word	0x08000fd5
 8000de8:	08001025 	.word	0x08001025
 8000dec:	08001075 	.word	0x08001075
 8000df0:	080010c5 	.word	0x080010c5
        case 0:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2120      	movs	r1, #32
 8000df8:	48c9      	ldr	r0, [pc, #804]	@ (8001120 <display7SEG2+0x37c>)
 8000dfa:	f001 fecc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2140      	movs	r1, #64	@ 0x40
 8000e02:	48c7      	ldr	r0, [pc, #796]	@ (8001120 <display7SEG2+0x37c>)
 8000e04:	f001 fec7 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	@ 0x80
 8000e0c:	48c4      	ldr	r0, [pc, #784]	@ (8001120 <display7SEG2+0x37c>)
 8000e0e:	f001 fec2 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e18:	48c1      	ldr	r0, [pc, #772]	@ (8001120 <display7SEG2+0x37c>)
 8000e1a:	f001 febc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e24:	48be      	ldr	r0, [pc, #760]	@ (8001120 <display7SEG2+0x37c>)
 8000e26:	f001 feb6 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e30:	48bb      	ldr	r0, [pc, #748]	@ (8001120 <display7SEG2+0x37c>)
 8000e32:	f001 feb0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	48b8      	ldr	r0, [pc, #736]	@ (8001120 <display7SEG2+0x37c>)
 8000e3e:	f001 feaa 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000e42:	e16a      	b.n	800111a <display7SEG2+0x376>
        case 1:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2120      	movs	r1, #32
 8000e48:	48b5      	ldr	r0, [pc, #724]	@ (8001120 <display7SEG2+0x37c>)
 8000e4a:	f001 fea4 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2140      	movs	r1, #64	@ 0x40
 8000e52:	48b3      	ldr	r0, [pc, #716]	@ (8001120 <display7SEG2+0x37c>)
 8000e54:	f001 fe9f 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2180      	movs	r1, #128	@ 0x80
 8000e5c:	48b0      	ldr	r0, [pc, #704]	@ (8001120 <display7SEG2+0x37c>)
 8000e5e:	f001 fe9a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e68:	48ad      	ldr	r0, [pc, #692]	@ (8001120 <display7SEG2+0x37c>)
 8000e6a:	f001 fe94 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e74:	48aa      	ldr	r0, [pc, #680]	@ (8001120 <display7SEG2+0x37c>)
 8000e76:	f001 fe8e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e80:	48a7      	ldr	r0, [pc, #668]	@ (8001120 <display7SEG2+0x37c>)
 8000e82:	f001 fe88 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e8c:	48a4      	ldr	r0, [pc, #656]	@ (8001120 <display7SEG2+0x37c>)
 8000e8e:	f001 fe82 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000e92:	e142      	b.n	800111a <display7SEG2+0x376>
        case 2:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2120      	movs	r1, #32
 8000e98:	48a1      	ldr	r0, [pc, #644]	@ (8001120 <display7SEG2+0x37c>)
 8000e9a:	f001 fe7c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2140      	movs	r1, #64	@ 0x40
 8000ea2:	489f      	ldr	r0, [pc, #636]	@ (8001120 <display7SEG2+0x37c>)
 8000ea4:	f001 fe77 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	489c      	ldr	r0, [pc, #624]	@ (8001120 <display7SEG2+0x37c>)
 8000eae:	f001 fe72 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eb8:	4899      	ldr	r0, [pc, #612]	@ (8001120 <display7SEG2+0x37c>)
 8000eba:	f001 fe6c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec4:	4896      	ldr	r0, [pc, #600]	@ (8001120 <display7SEG2+0x37c>)
 8000ec6:	f001 fe66 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed0:	4893      	ldr	r0, [pc, #588]	@ (8001120 <display7SEG2+0x37c>)
 8000ed2:	f001 fe60 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000edc:	4890      	ldr	r0, [pc, #576]	@ (8001120 <display7SEG2+0x37c>)
 8000ede:	f001 fe5a 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000ee2:	e11a      	b.n	800111a <display7SEG2+0x376>
        case 3:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	488d      	ldr	r0, [pc, #564]	@ (8001120 <display7SEG2+0x37c>)
 8000eea:	f001 fe54 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	@ 0x40
 8000ef2:	488b      	ldr	r0, [pc, #556]	@ (8001120 <display7SEG2+0x37c>)
 8000ef4:	f001 fe4f 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	4888      	ldr	r0, [pc, #544]	@ (8001120 <display7SEG2+0x37c>)
 8000efe:	f001 fe4a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f08:	4885      	ldr	r0, [pc, #532]	@ (8001120 <display7SEG2+0x37c>)
 8000f0a:	f001 fe44 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f14:	4882      	ldr	r0, [pc, #520]	@ (8001120 <display7SEG2+0x37c>)
 8000f16:	f001 fe3e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f20:	487f      	ldr	r0, [pc, #508]	@ (8001120 <display7SEG2+0x37c>)
 8000f22:	f001 fe38 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f2c:	487c      	ldr	r0, [pc, #496]	@ (8001120 <display7SEG2+0x37c>)
 8000f2e:	f001 fe32 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000f32:	e0f2      	b.n	800111a <display7SEG2+0x376>
        case 4:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2120      	movs	r1, #32
 8000f38:	4879      	ldr	r0, [pc, #484]	@ (8001120 <display7SEG2+0x37c>)
 8000f3a:	f001 fe2c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2140      	movs	r1, #64	@ 0x40
 8000f42:	4877      	ldr	r0, [pc, #476]	@ (8001120 <display7SEG2+0x37c>)
 8000f44:	f001 fe27 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	4874      	ldr	r0, [pc, #464]	@ (8001120 <display7SEG2+0x37c>)
 8000f4e:	f001 fe22 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f58:	4871      	ldr	r0, [pc, #452]	@ (8001120 <display7SEG2+0x37c>)
 8000f5a:	f001 fe1c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f64:	486e      	ldr	r0, [pc, #440]	@ (8001120 <display7SEG2+0x37c>)
 8000f66:	f001 fe16 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f70:	486b      	ldr	r0, [pc, #428]	@ (8001120 <display7SEG2+0x37c>)
 8000f72:	f001 fe10 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7c:	4868      	ldr	r0, [pc, #416]	@ (8001120 <display7SEG2+0x37c>)
 8000f7e:	f001 fe0a 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000f82:	e0ca      	b.n	800111a <display7SEG2+0x376>
        case 5:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2120      	movs	r1, #32
 8000f88:	4865      	ldr	r0, [pc, #404]	@ (8001120 <display7SEG2+0x37c>)
 8000f8a:	f001 fe04 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2140      	movs	r1, #64	@ 0x40
 8000f92:	4863      	ldr	r0, [pc, #396]	@ (8001120 <display7SEG2+0x37c>)
 8000f94:	f001 fdff 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	4860      	ldr	r0, [pc, #384]	@ (8001120 <display7SEG2+0x37c>)
 8000f9e:	f001 fdfa 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa8:	485d      	ldr	r0, [pc, #372]	@ (8001120 <display7SEG2+0x37c>)
 8000faa:	f001 fdf4 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb4:	485a      	ldr	r0, [pc, #360]	@ (8001120 <display7SEG2+0x37c>)
 8000fb6:	f001 fdee 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	4857      	ldr	r0, [pc, #348]	@ (8001120 <display7SEG2+0x37c>)
 8000fc2:	f001 fde8 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fcc:	4854      	ldr	r0, [pc, #336]	@ (8001120 <display7SEG2+0x37c>)
 8000fce:	f001 fde2 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8000fd2:	e0a2      	b.n	800111a <display7SEG2+0x376>
        case 6:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4851      	ldr	r0, [pc, #324]	@ (8001120 <display7SEG2+0x37c>)
 8000fda:	f001 fddc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2140      	movs	r1, #64	@ 0x40
 8000fe2:	484f      	ldr	r0, [pc, #316]	@ (8001120 <display7SEG2+0x37c>)
 8000fe4:	f001 fdd7 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2180      	movs	r1, #128	@ 0x80
 8000fec:	484c      	ldr	r0, [pc, #304]	@ (8001120 <display7SEG2+0x37c>)
 8000fee:	f001 fdd2 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff8:	4849      	ldr	r0, [pc, #292]	@ (8001120 <display7SEG2+0x37c>)
 8000ffa:	f001 fdcc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001004:	4846      	ldr	r0, [pc, #280]	@ (8001120 <display7SEG2+0x37c>)
 8001006:	f001 fdc6 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001010:	4843      	ldr	r0, [pc, #268]	@ (8001120 <display7SEG2+0x37c>)
 8001012:	f001 fdc0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800101c:	4840      	ldr	r0, [pc, #256]	@ (8001120 <display7SEG2+0x37c>)
 800101e:	f001 fdba 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8001022:	e07a      	b.n	800111a <display7SEG2+0x376>
        case 7:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2120      	movs	r1, #32
 8001028:	483d      	ldr	r0, [pc, #244]	@ (8001120 <display7SEG2+0x37c>)
 800102a:	f001 fdb4 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	@ 0x40
 8001032:	483b      	ldr	r0, [pc, #236]	@ (8001120 <display7SEG2+0x37c>)
 8001034:	f001 fdaf 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	@ 0x80
 800103c:	4838      	ldr	r0, [pc, #224]	@ (8001120 <display7SEG2+0x37c>)
 800103e:	f001 fdaa 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001048:	4835      	ldr	r0, [pc, #212]	@ (8001120 <display7SEG2+0x37c>)
 800104a:	f001 fda4 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001054:	4832      	ldr	r0, [pc, #200]	@ (8001120 <display7SEG2+0x37c>)
 8001056:	f001 fd9e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001060:	482f      	ldr	r0, [pc, #188]	@ (8001120 <display7SEG2+0x37c>)
 8001062:	f001 fd98 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106c:	482c      	ldr	r0, [pc, #176]	@ (8001120 <display7SEG2+0x37c>)
 800106e:	f001 fd92 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8001072:	e052      	b.n	800111a <display7SEG2+0x376>
        case 8:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2120      	movs	r1, #32
 8001078:	4829      	ldr	r0, [pc, #164]	@ (8001120 <display7SEG2+0x37c>)
 800107a:	f001 fd8c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	@ 0x40
 8001082:	4827      	ldr	r0, [pc, #156]	@ (8001120 <display7SEG2+0x37c>)
 8001084:	f001 fd87 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2180      	movs	r1, #128	@ 0x80
 800108c:	4824      	ldr	r0, [pc, #144]	@ (8001120 <display7SEG2+0x37c>)
 800108e:	f001 fd82 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001098:	4821      	ldr	r0, [pc, #132]	@ (8001120 <display7SEG2+0x37c>)
 800109a:	f001 fd7c 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a4:	481e      	ldr	r0, [pc, #120]	@ (8001120 <display7SEG2+0x37c>)
 80010a6:	f001 fd76 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b0:	481b      	ldr	r0, [pc, #108]	@ (8001120 <display7SEG2+0x37c>)
 80010b2:	f001 fd70 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010bc:	4818      	ldr	r0, [pc, #96]	@ (8001120 <display7SEG2+0x37c>)
 80010be:	f001 fd6a 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 80010c2:	e02a      	b.n	800111a <display7SEG2+0x376>
        case 9:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2120      	movs	r1, #32
 80010c8:	4815      	ldr	r0, [pc, #84]	@ (8001120 <display7SEG2+0x37c>)
 80010ca:	f001 fd64 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	@ 0x40
 80010d2:	4813      	ldr	r0, [pc, #76]	@ (8001120 <display7SEG2+0x37c>)
 80010d4:	f001 fd5f 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	4810      	ldr	r0, [pc, #64]	@ (8001120 <display7SEG2+0x37c>)
 80010de:	f001 fd5a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <display7SEG2+0x37c>)
 80010ea:	f001 fd54 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f4:	480a      	ldr	r0, [pc, #40]	@ (8001120 <display7SEG2+0x37c>)
 80010f6:	f001 fd4e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001100:	4807      	ldr	r0, [pc, #28]	@ (8001120 <display7SEG2+0x37c>)
 8001102:	f001 fd48 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <display7SEG2+0x37c>)
 800110e:	f001 fd42 	bl	8002b96 <HAL_GPIO_WritePin>
            break;
 8001112:	e002      	b.n	800111a <display7SEG2+0x376>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8001114:	bf00      	nop
 8001116:	e000      	b.n	800111a <display7SEG2+0x376>
        default:
            // Handle invalid input
            break;
 8001118:	bf00      	nop
    }
  }
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010c00 	.word	0x40010c00

08001124 <display2DigitNumberWay1>:


void display2DigitNumberWay1(int number) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    static int digit = 0; // 0 for tens, 1 for units
    static int firstCall = 1; // Track if it's the first call
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db62      	blt.n	80011f8 <display2DigitNumberWay1+0xd4>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b63      	cmp	r3, #99	@ 0x63
 8001136:	dc5f      	bgt.n	80011f8 <display2DigitNumberWay1+0xd4>

    if (firstCall || timer5_flag == 1) {
 8001138:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <display2DigitNumberWay1+0xdc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <display2DigitNumberWay1+0x24>
 8001140:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <display2DigitNumberWay1+0xe0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d158      	bne.n	80011fa <display2DigitNumberWay1+0xd6>
        firstCall = 0; // Set to false after the first call
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <display2DigitNumberWay1+0xdc>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
        setTimer5(101); // Reset the timer for multiplexing
 800114e:	2065      	movs	r0, #101	@ 0x65
 8001150:	f001 f8ce 	bl	80022f0 <setTimer5>

        if (number <= 9) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b09      	cmp	r3, #9
 8001158:	dc0f      	bgt.n	800117a <display2DigitNumberWay1+0x56>
            // For numbers less than or equal to 9, display the same number on both segments
            HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); // Enable first segment
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001160:	4829      	ldr	r0, [pc, #164]	@ (8001208 <display2DigitNumberWay1+0xe4>)
 8001162:	f001 fd18 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET); // Enable second segment (same digit)
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800116c:	4826      	ldr	r0, [pc, #152]	@ (8001208 <display2DigitNumberWay1+0xe4>)
 800116e:	f001 fd12 	bl	8002b96 <HAL_GPIO_WritePin>
            display7SEG(number); // Display the same number on both segments
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fc6a 	bl	8000a4c <display7SEG>
 8001178:	e03f      	b.n	80011fa <display2DigitNumberWay1+0xd6>
        } else {
            if (digit == 0) {
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <display2DigitNumberWay1+0xe8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d11a      	bne.n	80011b8 <display2DigitNumberWay1+0x94>
                // Display tens digit
                int tens = number / 10; // Get the tens digit
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a22      	ldr	r2, [pc, #136]	@ (8001210 <display2DigitNumberWay1+0xec>)
 8001186:	fb82 1203 	smull	r1, r2, r2, r3
 800118a:	1092      	asrs	r2, r2, #2
 800118c:	17db      	asrs	r3, r3, #31
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	60bb      	str	r3, [r7, #8]
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); // Enable tens
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001198:	481b      	ldr	r0, [pc, #108]	@ (8001208 <display2DigitNumberWay1+0xe4>)
 800119a:	f001 fcfc 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_SET);   // Disable units
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011a4:	4818      	ldr	r0, [pc, #96]	@ (8001208 <display2DigitNumberWay1+0xe4>)
 80011a6:	f001 fcf6 	bl	8002b96 <HAL_GPIO_WritePin>
                display7SEG(tens); // Display the tens digit on the 7-segment
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f7ff fc4e 	bl	8000a4c <display7SEG>
                digit = 1; // Switch to units digit next
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <display2DigitNumberWay1+0xe8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e020      	b.n	80011fa <display2DigitNumberWay1+0xd6>
            } else {
                // Display units digit
                int units = number % 10; // Get the units digit
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <display2DigitNumberWay1+0xec>)
 80011bc:	fb83 1302 	smull	r1, r3, r3, r2
 80011c0:	1099      	asrs	r1, r3, #2
 80011c2:	17d3      	asrs	r3, r2, #31
 80011c4:	1ac9      	subs	r1, r1, r3
 80011c6:	460b      	mov	r3, r1
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	60fb      	str	r3, [r7, #12]
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET); // Enable units
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <display2DigitNumberWay1+0xe4>)
 80011da:	f001 fcdc 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_SET);   // Disable tens
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <display2DigitNumberWay1+0xe4>)
 80011e6:	f001 fcd6 	bl	8002b96 <HAL_GPIO_WritePin>
                display7SEG(units); // Display the units digit on the 7-segment
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fc2e 	bl	8000a4c <display7SEG>
                digit = 0; // Switch to tens digit next
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <display2DigitNumberWay1+0xe8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e000      	b.n	80011fa <display2DigitNumberWay1+0xd6>
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 80011f8:	bf00      	nop
            }
        }
    }
}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	2000012c 	.word	0x2000012c
 8001208:	40010800 	.word	0x40010800
 800120c:	2000008c 	.word	0x2000008c
 8001210:	66666667 	.word	0x66666667

08001214 <display2DigitNumberWay2>:


void display2DigitNumberWay2(int number) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    static int digit = 0; // 0 for tens, 1 for units
    static int firstCall = 1; // Track if it's the first call
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db62      	blt.n	80012e8 <display2DigitNumberWay2+0xd4>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b63      	cmp	r3, #99	@ 0x63
 8001226:	dc5f      	bgt.n	80012e8 <display2DigitNumberWay2+0xd4>

    if (firstCall || timer4_flag == 1) {
 8001228:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <display2DigitNumberWay2+0xdc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d103      	bne.n	8001238 <display2DigitNumberWay2+0x24>
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <display2DigitNumberWay2+0xe0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d158      	bne.n	80012ea <display2DigitNumberWay2+0xd6>
        firstCall = 0; // Set to false after the first call
 8001238:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <display2DigitNumberWay2+0xdc>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
        setTimer4(101); // Reset the timer for multiplexing
 800123e:	2065      	movs	r0, #101	@ 0x65
 8001240:	f001 f83c 	bl	80022bc <setTimer4>
        
        if (number <= 9) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b09      	cmp	r3, #9
 8001248:	dc0f      	bgt.n	800126a <display2DigitNumberWay2+0x56>
            // For numbers less than or equal to 9, display the same number on both segments
            
            HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); // Enable first segment
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001250:	4829      	ldr	r0, [pc, #164]	@ (80012f8 <display2DigitNumberWay2+0xe4>)
 8001252:	f001 fca0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET); // Enable second segment (same digit)
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800125c:	4826      	ldr	r0, [pc, #152]	@ (80012f8 <display2DigitNumberWay2+0xe4>)
 800125e:	f001 fc9a 	bl	8002b96 <HAL_GPIO_WritePin>
            display7SEG2(number); // Display the same number for both segments
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fd9e 	bl	8000da4 <display7SEG2>
 8001268:	e03f      	b.n	80012ea <display2DigitNumberWay2+0xd6>
        } else {
            if (digit == 0) {
 800126a:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <display2DigitNumberWay2+0xe8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d11a      	bne.n	80012a8 <display2DigitNumberWay2+0x94>
                // Display tens digit
                int tens = number / 10; // Get the tens digit
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a22      	ldr	r2, [pc, #136]	@ (8001300 <display2DigitNumberWay2+0xec>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	1092      	asrs	r2, r2, #2
 800127c:	17db      	asrs	r3, r3, #31
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	60bb      	str	r3, [r7, #8]
                
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); // Enable tens
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001288:	481b      	ldr	r0, [pc, #108]	@ (80012f8 <display2DigitNumberWay2+0xe4>)
 800128a:	f001 fc84 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_SET);   // Disable units
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001294:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <display2DigitNumberWay2+0xe4>)
 8001296:	f001 fc7e 	bl	8002b96 <HAL_GPIO_WritePin>
                display7SEG2(tens); // Display the tens digit on the 7-segment
 800129a:	68b8      	ldr	r0, [r7, #8]
 800129c:	f7ff fd82 	bl	8000da4 <display7SEG2>
                digit = 1; // Switch to units digit next
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <display2DigitNumberWay2+0xe8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e020      	b.n	80012ea <display2DigitNumberWay2+0xd6>
            } else {
                // Display units digit
                int units = number % 10; // Get the units digit
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <display2DigitNumberWay2+0xec>)
 80012ac:	fb83 1302 	smull	r1, r3, r3, r2
 80012b0:	1099      	asrs	r1, r3, #2
 80012b2:	17d3      	asrs	r3, r2, #31
 80012b4:	1ac9      	subs	r1, r1, r3
 80012b6:	460b      	mov	r3, r1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	60fb      	str	r3, [r7, #12]

                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET); // Enable units
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c8:	480b      	ldr	r0, [pc, #44]	@ (80012f8 <display2DigitNumberWay2+0xe4>)
 80012ca:	f001 fc64 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_SET);   // Disable tens
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012d4:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <display2DigitNumberWay2+0xe4>)
 80012d6:	f001 fc5e 	bl	8002b96 <HAL_GPIO_WritePin>
                display7SEG2(units); // Display the units digit on the 7-segment
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff fd62 	bl	8000da4 <display7SEG2>
                digit = 0; // Switch to tens digit next
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <display2DigitNumberWay2+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e000      	b.n	80012ea <display2DigitNumberWay2+0xd6>
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 80012e8:	bf00      	nop
            }
        }
    }
}
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000004 	.word	0x20000004
 80012f4:	20000128 	.word	0x20000128
 80012f8:	40010800 	.word	0x40010800
 80012fc:	20000090 	.word	0x20000090
 8001300:	66666667 	.word	0x66666667

08001304 <isButton1Pressed>:
int button3_pressed = 0;
int button3_long_pressed_flag = 0;
int button3_flag = 0;

// Button 1 functions
int isButton1Pressed() {
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
    if (button1_flag == 1) {
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <isButton1Pressed+0x20>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d104      	bne.n	800131a <isButton1Pressed+0x16>
        button1_flag = 0;
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <isButton1Pressed+0x20>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
        return 1;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <isButton1Pressed+0x18>
    }
    return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000098 	.word	0x20000098

08001328 <isButton2Pressed>:
    }
    return 0;
}

// Button 2 functions
int isButton2Pressed() {
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    if (button2_flag == 1) {
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <isButton2Pressed+0x20>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d104      	bne.n	800133e <isButton2Pressed+0x16>
        button2_flag = 0;
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <isButton2Pressed+0x20>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
        return 1;
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <isButton2Pressed+0x18>
    }
    return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200000a0 	.word	0x200000a0

0800134c <isButton3Pressed>:
    }
    return 0;
}

// Button 3 functions
int isButton3Pressed() {
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
    if (button3_flag == 1) {
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <isButton3Pressed+0x20>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d104      	bne.n	8001362 <isButton3Pressed+0x16>
        button3_flag = 0;
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <isButton3Pressed+0x20>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
        return 1;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <isButton3Pressed+0x18>
    }
    return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	200000a8 	.word	0x200000a8

08001370 <getKeyInput>:
void subKeyProcess() {
    // TODO
    // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}

void getKeyInput() {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    // Button 1
    KeyReg0_1 = KeyReg1_1;
 8001374:	4b69      	ldr	r3, [pc, #420]	@ (800151c <getKeyInput+0x1ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a69      	ldr	r2, [pc, #420]	@ (8001520 <getKeyInput+0x1b0>)
 800137a:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg2_1;
 800137c:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <getKeyInput+0x1b4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a66      	ldr	r2, [pc, #408]	@ (800151c <getKeyInput+0x1ac>)
 8001382:	6013      	str	r3, [r2, #0]
    KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8001384:	2120      	movs	r1, #32
 8001386:	4868      	ldr	r0, [pc, #416]	@ (8001528 <getKeyInput+0x1b8>)
 8001388:	f001 fbee 	bl	8002b68 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b64      	ldr	r3, [pc, #400]	@ (8001524 <getKeyInput+0x1b4>)
 8001392:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)) {
 8001394:	4b61      	ldr	r3, [pc, #388]	@ (800151c <getKeyInput+0x1ac>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <getKeyInput+0x1b0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d12f      	bne.n	8001400 <getKeyInput+0x90>
 80013a0:	4b5e      	ldr	r3, [pc, #376]	@ (800151c <getKeyInput+0x1ac>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <getKeyInput+0x1b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d129      	bne.n	8001400 <getKeyInput+0x90>
        if (KeyReg2_1 != KeyReg3_1) {  // Button press detected
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <getKeyInput+0x1b4>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b5e      	ldr	r3, [pc, #376]	@ (800152c <getKeyInput+0x1bc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d00f      	beq.n	80013d8 <getKeyInput+0x68>
            KeyReg3_1 = KeyReg2_1;
 80013b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001524 <getKeyInput+0x1b4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a5b      	ldr	r2, [pc, #364]	@ (800152c <getKeyInput+0x1bc>)
 80013be:	6013      	str	r3, [r2, #0]

            if (KeyReg3_1 == PRESSED_STATE) {
 80013c0:	4b5a      	ldr	r3, [pc, #360]	@ (800152c <getKeyInput+0x1bc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d11b      	bne.n	8001400 <getKeyInput+0x90>
                TimeOutForKeyPress_1 = 500;
 80013c8:	4b59      	ldr	r3, [pc, #356]	@ (8001530 <getKeyInput+0x1c0>)
 80013ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013ce:	601a      	str	r2, [r3, #0]
                button1_flag = 1;
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <getKeyInput+0x1c4>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e013      	b.n	8001400 <getKeyInput+0x90>
            }
        } else {
            TimeOutForKeyPress_1--;  // Long press detection
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <getKeyInput+0x1c0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a54      	ldr	r2, [pc, #336]	@ (8001530 <getKeyInput+0x1c0>)
 80013e0:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_1 == 0) {
 80013e2:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <getKeyInput+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <getKeyInput+0x90>
                TimeOutForKeyPress_1 = 500;
 80013ea:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <getKeyInput+0x1c0>)
 80013ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013f0:	601a      	str	r2, [r3, #0]
                if (KeyReg3_1 == PRESSED_STATE) {
 80013f2:	4b4e      	ldr	r3, [pc, #312]	@ (800152c <getKeyInput+0x1bc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <getKeyInput+0x90>
                    button1_long_pressed_flag = 1;
 80013fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001538 <getKeyInput+0x1c8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Button 2
    KeyReg0_2 = KeyReg1_2;
 8001400:	4b4e      	ldr	r3, [pc, #312]	@ (800153c <getKeyInput+0x1cc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a4e      	ldr	r2, [pc, #312]	@ (8001540 <getKeyInput+0x1d0>)
 8001406:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg2_2;
 8001408:	4b4e      	ldr	r3, [pc, #312]	@ (8001544 <getKeyInput+0x1d4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <getKeyInput+0x1cc>)
 800140e:	6013      	str	r3, [r2, #0]
    KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8001410:	2140      	movs	r1, #64	@ 0x40
 8001412:	4845      	ldr	r0, [pc, #276]	@ (8001528 <getKeyInput+0x1b8>)
 8001414:	f001 fba8 	bl	8002b68 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b49      	ldr	r3, [pc, #292]	@ (8001544 <getKeyInput+0x1d4>)
 800141e:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)) {
 8001420:	4b46      	ldr	r3, [pc, #280]	@ (800153c <getKeyInput+0x1cc>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b46      	ldr	r3, [pc, #280]	@ (8001540 <getKeyInput+0x1d0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d12f      	bne.n	800148c <getKeyInput+0x11c>
 800142c:	4b43      	ldr	r3, [pc, #268]	@ (800153c <getKeyInput+0x1cc>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b44      	ldr	r3, [pc, #272]	@ (8001544 <getKeyInput+0x1d4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d129      	bne.n	800148c <getKeyInput+0x11c>
        if (KeyReg2_2 != KeyReg3_2) {  // Button press detected
 8001438:	4b42      	ldr	r3, [pc, #264]	@ (8001544 <getKeyInput+0x1d4>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b42      	ldr	r3, [pc, #264]	@ (8001548 <getKeyInput+0x1d8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d00f      	beq.n	8001464 <getKeyInput+0xf4>
            KeyReg3_2 = KeyReg2_2;
 8001444:	4b3f      	ldr	r3, [pc, #252]	@ (8001544 <getKeyInput+0x1d4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3f      	ldr	r2, [pc, #252]	@ (8001548 <getKeyInput+0x1d8>)
 800144a:	6013      	str	r3, [r2, #0]

            if (KeyReg3_2 == PRESSED_STATE) {
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <getKeyInput+0x1d8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11b      	bne.n	800148c <getKeyInput+0x11c>
                TimeOutForKeyPress_2 = 500;
 8001454:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <getKeyInput+0x1dc>)
 8001456:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800145a:	601a      	str	r2, [r3, #0]
                button2_flag = 1;
 800145c:	4b3c      	ldr	r3, [pc, #240]	@ (8001550 <getKeyInput+0x1e0>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e013      	b.n	800148c <getKeyInput+0x11c>
            }
        } else {
            TimeOutForKeyPress_2--;  // Long press detection
 8001464:	4b39      	ldr	r3, [pc, #228]	@ (800154c <getKeyInput+0x1dc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	4a38      	ldr	r2, [pc, #224]	@ (800154c <getKeyInput+0x1dc>)
 800146c:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_2 == 0) {
 800146e:	4b37      	ldr	r3, [pc, #220]	@ (800154c <getKeyInput+0x1dc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <getKeyInput+0x11c>
                TimeOutForKeyPress_2 = 500;
 8001476:	4b35      	ldr	r3, [pc, #212]	@ (800154c <getKeyInput+0x1dc>)
 8001478:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800147c:	601a      	str	r2, [r3, #0]
                if (KeyReg3_2 == PRESSED_STATE) {
 800147e:	4b32      	ldr	r3, [pc, #200]	@ (8001548 <getKeyInput+0x1d8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <getKeyInput+0x11c>
                    button2_long_pressed_flag = 1;
 8001486:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <getKeyInput+0x1e4>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Button 3
    KeyReg0_3 = KeyReg1_3;
 800148c:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <getKeyInput+0x1e8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a32      	ldr	r2, [pc, #200]	@ (800155c <getKeyInput+0x1ec>)
 8001492:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg2_3;
 8001494:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <getKeyInput+0x1f0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2f      	ldr	r2, [pc, #188]	@ (8001558 <getKeyInput+0x1e8>)
 800149a:	6013      	str	r3, [r2, #0]
    KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	4822      	ldr	r0, [pc, #136]	@ (8001528 <getKeyInput+0x1b8>)
 80014a0:	f001 fb62 	bl	8002b68 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <getKeyInput+0x1f0>)
 80014aa:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)) {
 80014ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <getKeyInput+0x1e8>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <getKeyInput+0x1ec>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d12f      	bne.n	8001518 <getKeyInput+0x1a8>
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <getKeyInput+0x1e8>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <getKeyInput+0x1f0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d129      	bne.n	8001518 <getKeyInput+0x1a8>
        if (KeyReg2_3 != KeyReg3_3) {  // Button press detected
 80014c4:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <getKeyInput+0x1f0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <getKeyInput+0x1f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d00f      	beq.n	80014f0 <getKeyInput+0x180>
            KeyReg3_3 = KeyReg2_3;
 80014d0:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <getKeyInput+0x1f0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <getKeyInput+0x1f4>)
 80014d6:	6013      	str	r3, [r2, #0]

            if (KeyReg3_3 == PRESSED_STATE) {
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <getKeyInput+0x1f4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11b      	bne.n	8001518 <getKeyInput+0x1a8>
                TimeOutForKeyPress_3 = 500;
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <getKeyInput+0x1f8>)
 80014e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014e6:	601a      	str	r2, [r3, #0]
                button3_flag = 1;
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <getKeyInput+0x1fc>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
                    button3_long_pressed_flag = 1;
                }
            }
        }
    }
 80014ee:	e013      	b.n	8001518 <getKeyInput+0x1a8>
            TimeOutForKeyPress_3--;  // Long press detection
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <getKeyInput+0x1f8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <getKeyInput+0x1f8>)
 80014f8:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_3 == 0) {
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <getKeyInput+0x1f8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10a      	bne.n	8001518 <getKeyInput+0x1a8>
                TimeOutForKeyPress_3 = 500;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <getKeyInput+0x1f8>)
 8001504:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001508:	601a      	str	r2, [r3, #0]
                if (KeyReg3_3 == PRESSED_STATE) {
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <getKeyInput+0x1f4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <getKeyInput+0x1a8>
                    button3_long_pressed_flag = 1;
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <getKeyInput+0x200>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000000c 	.word	0x2000000c
 8001520:	20000008 	.word	0x20000008
 8001524:	20000010 	.word	0x20000010
 8001528:	40010800 	.word	0x40010800
 800152c:	20000014 	.word	0x20000014
 8001530:	20000018 	.word	0x20000018
 8001534:	20000098 	.word	0x20000098
 8001538:	20000094 	.word	0x20000094
 800153c:	20000020 	.word	0x20000020
 8001540:	2000001c 	.word	0x2000001c
 8001544:	20000024 	.word	0x20000024
 8001548:	20000028 	.word	0x20000028
 800154c:	2000002c 	.word	0x2000002c
 8001550:	200000a0 	.word	0x200000a0
 8001554:	2000009c 	.word	0x2000009c
 8001558:	20000034 	.word	0x20000034
 800155c:	20000030 	.word	0x20000030
 8001560:	20000038 	.word	0x20000038
 8001564:	2000003c 	.word	0x2000003c
 8001568:	20000040 	.word	0x20000040
 800156c:	200000a8 	.word	0x200000a8
 8001570:	200000a4 	.word	0x200000a4

08001574 <fsm_automatic_run_way1>:
 *      Author: admin
 */

#include "fsm_automatic.h"

void fsm_automatic_run_way1() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	    static int countdown_way1;
switch (status_way1) {
 8001578:	4ba0      	ldr	r3, [pc, #640]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b03      	cmp	r3, #3
 800157e:	f200 8133 	bhi.w	80017e8 <fsm_automatic_run_way1+0x274>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <fsm_automatic_run_way1+0x14>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001599 	.word	0x08001599
 800158c:	0800161f 	.word	0x0800161f
 8001590:	080016b9 	.word	0x080016b9
 8001594:	08001751 	.word	0x08001751
        case INIT_1:
            // Initialize all LEDs to off
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2101      	movs	r1, #1
 800159c:	4898      	ldr	r0, [pc, #608]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 800159e:	f001 fafa 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a8:	4895      	ldr	r0, [pc, #596]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 80015aa:	f001 faf4 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b4:	4892      	ldr	r0, [pc, #584]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 80015b6:	f001 faee 	bl	8002b96 <HAL_GPIO_WritePin>
            
            HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); 
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c0:	4890      	ldr	r0, [pc, #576]	@ (8001804 <fsm_automatic_run_way1+0x290>)
 80015c2:	f001 fae8 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015cc:	488d      	ldr	r0, [pc, #564]	@ (8001804 <fsm_automatic_run_way1+0x290>)
 80015ce:	f001 fae2 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); 
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015d8:	488a      	ldr	r0, [pc, #552]	@ (8001804 <fsm_automatic_run_way1+0x290>)
 80015da:	f001 fadc 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET);  
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015e4:	4887      	ldr	r0, [pc, #540]	@ (8001804 <fsm_automatic_run_way1+0x290>)
 80015e6:	f001 fad6 	bl	8002b96 <HAL_GPIO_WritePin>
            
            status_way1 = AUTO_RED_WAY1;
 80015ea:	4b84      	ldr	r3, [pc, #528]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]


            countdown_way1 = red_led_duration ;
 80015f0:	4b85      	ldr	r3, [pc, #532]	@ (8001808 <fsm_automatic_run_way1+0x294>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a85      	ldr	r2, [pc, #532]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80015f6:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay1(countdown_way1);
 80015f8:	4b84      	ldr	r3, [pc, #528]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd91 	bl	8001124 <display2DigitNumberWay1>

            setTimer0(red_led_duration*1000);
 8001602:	4b81      	ldr	r3, [pc, #516]	@ (8001808 <fsm_automatic_run_way1+0x294>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fdec 	bl	80021ec <setTimer0>
            setTimer1(1000); // Start the countdown timer
 8001614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001618:	f000 fe02 	bl	8002220 <setTimer1>

            break;
 800161c:	e0eb      	b.n	80017f6 <fsm_automatic_run_way1+0x282>
        case AUTO_RED_WAY1:
            // Way 1 Red, Way 2 Green
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2101      	movs	r1, #1
 8001622:	4877      	ldr	r0, [pc, #476]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 8001624:	f001 fab7 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800162e:	4874      	ldr	r0, [pc, #464]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 8001630:	f001 fab1 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800163a:	4871      	ldr	r0, [pc, #452]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 800163c:	f001 faab 	bl	8002b96 <HAL_GPIO_WritePin>

            display2DigitNumberWay1(countdown_way1);
 8001640:	4b72      	ldr	r3, [pc, #456]	@ (800180c <fsm_automatic_run_way1+0x298>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd6d 	bl	8001124 <display2DigitNumberWay1>
            if (timer1_flag == 1) {
 800164a:	4b71      	ldr	r3, [pc, #452]	@ (8001810 <fsm_automatic_run_way1+0x29c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <fsm_automatic_run_way1+0xf0>
                setTimer1(1000); // Reset the countdown timer
 8001652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001656:	f000 fde3 	bl	8002220 <setTimer1>

                countdown_way1--;
 800165a:	4b6c      	ldr	r3, [pc, #432]	@ (800180c <fsm_automatic_run_way1+0x298>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3b01      	subs	r3, #1
 8001660:	4a6a      	ldr	r2, [pc, #424]	@ (800180c <fsm_automatic_run_way1+0x298>)
 8001662:	6013      	str	r3, [r2, #0]


            }


            if (isButton1Pressed() == 1) {
 8001664:	f7ff fe4e 	bl	8001304 <isButton1Pressed>
 8001668:	4603      	mov	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <fsm_automatic_run_way1+0x106>
                status_way1 = INIT_mode;
 800166e:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 8001670:	220a      	movs	r2, #10
 8001672:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8001674:	4b67      	ldr	r3, [pc, #412]	@ (8001814 <fsm_automatic_run_way1+0x2a0>)
 8001676:	220a      	movs	r2, #10
 8001678:	601a      	str	r2, [r3, #0]

            }

            if (timer0_flag == 1) {
 800167a:	4b67      	ldr	r3, [pc, #412]	@ (8001818 <fsm_automatic_run_way1+0x2a4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	f040 80b4 	bne.w	80017ec <fsm_automatic_run_way1+0x278>
                status_way1 = AUTO_GREEN_WAY1;
 8001684:	4b5d      	ldr	r3, [pc, #372]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
                setTimer0(green_led_duration*1000);
 800168a:	4b64      	ldr	r3, [pc, #400]	@ (800181c <fsm_automatic_run_way1+0x2a8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fda8 	bl	80021ec <setTimer0>
				countdown_way1 = green_led_duration; // Reset countdown for next cycle
 800169c:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <fsm_automatic_run_way1+0x2a8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a5a      	ldr	r2, [pc, #360]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80016a2:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay1(countdown_way1);
 80016a4:	4b59      	ldr	r3, [pc, #356]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd3b 	bl	8001124 <display2DigitNumberWay1>
				setTimer1(1000); // Start the countdown timer for the next state
 80016ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b2:	f000 fdb5 	bl	8002220 <setTimer1>

            }
            break;
 80016b6:	e099      	b.n	80017ec <fsm_automatic_run_way1+0x278>
        case AUTO_GREEN_WAY1:
            // Way 1 Red, Way 2 Yellow
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2101      	movs	r1, #1
 80016bc:	4850      	ldr	r0, [pc, #320]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 80016be:	f001 fa6a 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016c8:	484d      	ldr	r0, [pc, #308]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 80016ca:	f001 fa64 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d4:	484a      	ldr	r0, [pc, #296]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 80016d6:	f001 fa5e 	bl	8002b96 <HAL_GPIO_WritePin>

            display2DigitNumberWay1(countdown_way1);
 80016da:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fd20 	bl	8001124 <display2DigitNumberWay1>
            if (timer1_flag == 1) {
 80016e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <fsm_automatic_run_way1+0x29c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <fsm_automatic_run_way1+0x18a>
                setTimer1(1000); // Reset the countdown timer
 80016ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016f0:	f000 fd96 	bl	8002220 <setTimer1>
                countdown_way1--;
 80016f4:	4b45      	ldr	r3, [pc, #276]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a44      	ldr	r2, [pc, #272]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80016fc:	6013      	str	r3, [r2, #0]

            }



            if (isButton1Pressed() == 1) {
 80016fe:	f7ff fe01 	bl	8001304 <isButton1Pressed>
 8001702:	4603      	mov	r3, r0
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <fsm_automatic_run_way1+0x1a0>
                status_way1 = INIT_mode;
 8001708:	4b3c      	ldr	r3, [pc, #240]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 800170a:	220a      	movs	r2, #10
 800170c:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <fsm_automatic_run_way1+0x2a0>)
 8001710:	220a      	movs	r2, #10
 8001712:	601a      	str	r2, [r3, #0]
  
            }

            if (timer0_flag == 1) {
 8001714:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <fsm_automatic_run_way1+0x2a4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d169      	bne.n	80017f0 <fsm_automatic_run_way1+0x27c>
                status_way1 = AUTO_YELLOW_WAY1;
 800171c:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 800171e:	2203      	movs	r2, #3
 8001720:	601a      	str	r2, [r3, #0]
                setTimer0(yellow_led_duration*1000);
 8001722:	4b3f      	ldr	r3, [pc, #252]	@ (8001820 <fsm_automatic_run_way1+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fd5c 	bl	80021ec <setTimer0>
				countdown_way1 = yellow_led_duration; // Reset countdown for next cycle
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <fsm_automatic_run_way1+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a34      	ldr	r2, [pc, #208]	@ (800180c <fsm_automatic_run_way1+0x298>)
 800173a:	6013      	str	r3, [r2, #0]
            display2DigitNumberWay1(countdown_way1);
 800173c:	4b33      	ldr	r3, [pc, #204]	@ (800180c <fsm_automatic_run_way1+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fcef 	bl	8001124 <display2DigitNumberWay1>
			    setTimer1(1000); // Start the countdown timer for the next state
 8001746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800174a:	f000 fd69 	bl	8002220 <setTimer1>

            }
            break;
 800174e:	e04f      	b.n	80017f0 <fsm_automatic_run_way1+0x27c>
        case AUTO_YELLOW_WAY1:
            // Way 1 Green, Way 2 Red
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2101      	movs	r1, #1
 8001754:	482a      	ldr	r0, [pc, #168]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 8001756:	f001 fa1e 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001760:	4827      	ldr	r0, [pc, #156]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 8001762:	f001 fa18 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800176c:	4824      	ldr	r0, [pc, #144]	@ (8001800 <fsm_automatic_run_way1+0x28c>)
 800176e:	f001 fa12 	bl	8002b96 <HAL_GPIO_WritePin>



            display2DigitNumberWay1(countdown_way1);
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <fsm_automatic_run_way1+0x298>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fcd4 	bl	8001124 <display2DigitNumberWay1>
            if (timer1_flag == 1) {
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <fsm_automatic_run_way1+0x29c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <fsm_automatic_run_way1+0x222>
                setTimer1(1000); // Reset the countdown timer
 8001784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001788:	f000 fd4a 	bl	8002220 <setTimer1>
                countdown_way1--;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <fsm_automatic_run_way1+0x298>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	4a1e      	ldr	r2, [pc, #120]	@ (800180c <fsm_automatic_run_way1+0x298>)
 8001794:	6013      	str	r3, [r2, #0]
  
                
            }

            if (isButton1Pressed() == 1) {
 8001796:	f7ff fdb5 	bl	8001304 <isButton1Pressed>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <fsm_automatic_run_way1+0x238>
                status_way1 = INIT_mode;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 80017a2:	220a      	movs	r2, #10
 80017a4:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <fsm_automatic_run_way1+0x2a0>)
 80017a8:	220a      	movs	r2, #10
 80017aa:	601a      	str	r2, [r3, #0]

            }

            if (timer0_flag == 1) {
 80017ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <fsm_automatic_run_way1+0x2a4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d11f      	bne.n	80017f4 <fsm_automatic_run_way1+0x280>
                status_way1 = AUTO_RED_WAY1;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <fsm_automatic_run_way1+0x288>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
                setTimer0(red_led_duration*1000);
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <fsm_automatic_run_way1+0x294>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fd10 	bl	80021ec <setTimer0>
				countdown_way1 = red_led_duration; // Reset countdown for next cycle
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <fsm_automatic_run_way1+0x294>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80017d2:	6013      	str	r3, [r2, #0]
                
            display2DigitNumberWay1(countdown_way1);
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <fsm_automatic_run_way1+0x298>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fca3 	bl	8001124 <display2DigitNumberWay1>
				setTimer1(1000); // Start the countdown timer for the next state
 80017de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017e2:	f000 fd1d 	bl	8002220 <setTimer1>

            }
            break;
 80017e6:	e005      	b.n	80017f4 <fsm_automatic_run_way1+0x280>
       

		
		default:
            break;
 80017e8:	bf00      	nop
 80017ea:	e004      	b.n	80017f6 <fsm_automatic_run_way1+0x282>
            break;
 80017ec:	bf00      	nop
 80017ee:	e002      	b.n	80017f6 <fsm_automatic_run_way1+0x282>
            break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <fsm_automatic_run_way1+0x282>
            break;
 80017f4:	bf00      	nop
    }
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000b4 	.word	0x200000b4
 8001800:	40010c00 	.word	0x40010c00
 8001804:	40010800 	.word	0x40010800
 8001808:	20000054 	.word	0x20000054
 800180c:	200000ac 	.word	0x200000ac
 8001810:	2000011c 	.word	0x2000011c
 8001814:	20000050 	.word	0x20000050
 8001818:	20000118 	.word	0x20000118
 800181c:	20000058 	.word	0x20000058
 8001820:	2000005c 	.word	0x2000005c

08001824 <fsm_automatic_run_way2>:

void fsm_automatic_run_way2() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    static int countdown_way2;
    switch (status_way2) {
 8001828:	4b80      	ldr	r3, [pc, #512]	@ (8001a2c <fsm_automatic_run_way2+0x208>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3b04      	subs	r3, #4
 800182e:	2b03      	cmp	r3, #3
 8001830:	f200 80f3 	bhi.w	8001a1a <fsm_automatic_run_way2+0x1f6>
 8001834:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <fsm_automatic_run_way2+0x18>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800199d 	.word	0x0800199d
 8001844:	0800189f 	.word	0x0800189f
 8001848:	0800191f 	.word	0x0800191f
        case INIT_2:
            // Initialize all LEDs to off
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2102      	movs	r1, #2
 8001850:	4877      	ldr	r0, [pc, #476]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 8001852:	f001 f9a0 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2108      	movs	r1, #8
 800185a:	4875      	ldr	r0, [pc, #468]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 800185c:	f001 f99b 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2110      	movs	r1, #16
 8001864:	4872      	ldr	r0, [pc, #456]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 8001866:	f001 f996 	bl	8002b96 <HAL_GPIO_WritePin>
            status_way2 = AUTO_GREEN_WAY2;
 800186a:	4b70      	ldr	r3, [pc, #448]	@ (8001a2c <fsm_automatic_run_way2+0x208>)
 800186c:	2206      	movs	r2, #6
 800186e:	601a      	str	r2, [r3, #0]
            countdown_way2 = green_led_duration;
 8001870:	4b70      	ldr	r3, [pc, #448]	@ (8001a34 <fsm_automatic_run_way2+0x210>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a70      	ldr	r2, [pc, #448]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001876:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay2(countdown_way2);
 8001878:	4b6f      	ldr	r3, [pc, #444]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fcc9 	bl	8001214 <display2DigitNumberWay2>

            setTimer2(green_led_duration * 1000);
 8001882:	4b6c      	ldr	r3, [pc, #432]	@ (8001a34 <fsm_automatic_run_way2+0x210>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fce0 	bl	8002254 <setTimer2>
            setTimer3(1000); // Start the countdown timer
 8001894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001898:	f000 fcf6 	bl	8002288 <setTimer3>

            break;
 800189c:	e0c4      	b.n	8001a28 <fsm_automatic_run_way2+0x204>
        case AUTO_GREEN_WAY2:
           
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2102      	movs	r1, #2
 80018a2:	4863      	ldr	r0, [pc, #396]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 80018a4:	f001 f977 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2108      	movs	r1, #8
 80018ac:	4860      	ldr	r0, [pc, #384]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 80018ae:	f001 f972 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2110      	movs	r1, #16
 80018b6:	485e      	ldr	r0, [pc, #376]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 80018b8:	f001 f96d 	bl	8002b96 <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 80018bc:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <fsm_automatic_run_way2+0x218>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <fsm_automatic_run_way2+0xb2>
                setTimer3(1000); // Reset the countdown timer
 80018c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c8:	f000 fcde 	bl	8002288 <setTimer3>

                countdown_way2--;
 80018cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4a59      	ldr	r2, [pc, #356]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 80018d4:	6013      	str	r3, [r2, #0]


            }
            display2DigitNumberWay2(countdown_way2);
 80018d6:	4b58      	ldr	r3, [pc, #352]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fc9a 	bl	8001214 <display2DigitNumberWay2>
            //     status_way2 = INIT_mode;
            //     status_way2 = INIT_mode;

            // }

            if (timer2_flag == 1) {
 80018e0:	4b57      	ldr	r3, [pc, #348]	@ (8001a40 <fsm_automatic_run_way2+0x21c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	f040 809a 	bne.w	8001a1e <fsm_automatic_run_way2+0x1fa>
                status_way2 = AUTO_YELLOW_WAY2;
 80018ea:	4b50      	ldr	r3, [pc, #320]	@ (8001a2c <fsm_automatic_run_way2+0x208>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                setTimer2(yellow_led_duration * 1000);
 80018f0:	4b54      	ldr	r3, [pc, #336]	@ (8001a44 <fsm_automatic_run_way2+0x220>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fca9 	bl	8002254 <setTimer2>
                countdown_way2 = yellow_led_duration; // Reset countdown for next cycle
 8001902:	4b50      	ldr	r3, [pc, #320]	@ (8001a44 <fsm_automatic_run_way2+0x220>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a4c      	ldr	r2, [pc, #304]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001908:	6013      	str	r3, [r2, #0]
            
            display2DigitNumberWay2(countdown_way2);
 800190a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fc80 	bl	8001214 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 8001914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001918:	f000 fcb6 	bl	8002288 <setTimer3>
            

            }
            break;
 800191c:	e07f      	b.n	8001a1e <fsm_automatic_run_way2+0x1fa>
        case AUTO_YELLOW_WAY2:
            // Way 2 Green, Way 1 Yellow
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2102      	movs	r1, #2
 8001922:	4843      	ldr	r0, [pc, #268]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 8001924:	f001 f937 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2108      	movs	r1, #8
 800192c:	4840      	ldr	r0, [pc, #256]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 800192e:	f001 f932 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2110      	movs	r1, #16
 8001936:	483e      	ldr	r0, [pc, #248]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 8001938:	f001 f92d 	bl	8002b96 <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 800193c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <fsm_automatic_run_way2+0x218>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <fsm_automatic_run_way2+0x132>
                setTimer3(1000); // Reset the countdown timer
 8001944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001948:	f000 fc9e 	bl	8002288 <setTimer3>
                countdown_way2--;
 800194c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	4a39      	ldr	r2, [pc, #228]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001954:	6013      	str	r3, [r2, #0]


            }
            display2DigitNumberWay2(countdown_way2);
 8001956:	4b38      	ldr	r3, [pc, #224]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fc5a 	bl	8001214 <display2DigitNumberWay2>
            // if (isButton1Pressed() == 1) {
            //     status_way2 = INIT_mode;
            //     status_way2 = INIT_mode;
            // }

            if (timer2_flag == 1) {
 8001960:	4b37      	ldr	r3, [pc, #220]	@ (8001a40 <fsm_automatic_run_way2+0x21c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d15c      	bne.n	8001a22 <fsm_automatic_run_way2+0x1fe>
                status_way2 = AUTO_RED_WAY2;
 8001968:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <fsm_automatic_run_way2+0x208>)
 800196a:	2205      	movs	r2, #5
 800196c:	601a      	str	r2, [r3, #0]
                setTimer2(red_led_duration * 1000);
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <fsm_automatic_run_way2+0x224>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fc6a 	bl	8002254 <setTimer2>
                countdown_way2 = red_led_duration; // Reset countdown for next cycle
 8001980:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <fsm_automatic_run_way2+0x224>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a2c      	ldr	r2, [pc, #176]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001986:	6013      	str	r3, [r2, #0]
            display2DigitNumberWay2(countdown_way2);
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fc41 	bl	8001214 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 8001992:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001996:	f000 fc77 	bl	8002288 <setTimer3>
            

            }
            break;
 800199a:	e042      	b.n	8001a22 <fsm_automatic_run_way2+0x1fe>
        case AUTO_RED_WAY2:
            // Way 2 Yellow, Way 1 Red
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2102      	movs	r1, #2
 80019a0:	4823      	ldr	r0, [pc, #140]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 80019a2:	f001 f8f8 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	4821      	ldr	r0, [pc, #132]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 80019ac:	f001 f8f3 	bl	8002b96 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2110      	movs	r1, #16
 80019b4:	481e      	ldr	r0, [pc, #120]	@ (8001a30 <fsm_automatic_run_way2+0x20c>)
 80019b6:	f001 f8ee 	bl	8002b96 <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 80019ba:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <fsm_automatic_run_way2+0x218>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <fsm_automatic_run_way2+0x1b0>
                setTimer3(1000); // Reset the countdown timer
 80019c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c6:	f000 fc5f 	bl	8002288 <setTimer3>
                countdown_way2--;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 80019d2:	6013      	str	r3, [r2, #0]

            }
            display2DigitNumberWay2(countdown_way2);
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fc1b 	bl	8001214 <display2DigitNumberWay2>
            // if (isButton1Pressed() == 1) {
            //     status_way2 = INIT_mode;

            // }

            if (timer2_flag == 1) {
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <fsm_automatic_run_way2+0x21c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d11f      	bne.n	8001a26 <fsm_automatic_run_way2+0x202>
                status_way2 = AUTO_GREEN_WAY2;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <fsm_automatic_run_way2+0x208>)
 80019e8:	2206      	movs	r2, #6
 80019ea:	601a      	str	r2, [r3, #0]
                setTimer2(green_led_duration * 1000);
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <fsm_automatic_run_way2+0x210>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fc2b 	bl	8002254 <setTimer2>
                countdown_way2 = green_led_duration; // Reset countdown for next cycle
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <fsm_automatic_run_way2+0x210>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001a04:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay2(countdown_way2);
 8001a06:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <fsm_automatic_run_way2+0x214>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc02 	bl	8001214 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 8001a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a14:	f000 fc38 	bl	8002288 <setTimer3>
            

            }
            break;
 8001a18:	e005      	b.n	8001a26 <fsm_automatic_run_way2+0x202>
        default:
            break;
 8001a1a:	bf00      	nop
 8001a1c:	e004      	b.n	8001a28 <fsm_automatic_run_way2+0x204>
            break;
 8001a1e:	bf00      	nop
 8001a20:	e002      	b.n	8001a28 <fsm_automatic_run_way2+0x204>
            break;
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <fsm_automatic_run_way2+0x204>
            break;
 8001a26:	bf00      	nop
    }
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000050 	.word	0x20000050
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	20000058 	.word	0x20000058
 8001a38:	200000b0 	.word	0x200000b0
 8001a3c:	20000124 	.word	0x20000124
 8001a40:	20000120 	.word	0x20000120
 8001a44:	2000005c 	.word	0x2000005c
 8001a48:	20000054 	.word	0x20000054

08001a4c <setRedLEDDuration>:
//     }   
//         red_led_duration = duration;
//         // Additional logic can be added here if needed
//     }
// }
void setRedLEDDuration(int duration) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    // If duration is 1, return immediately
    if (duration == 1) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d022      	beq.n	8001aa0 <setRedLEDDuration+0x54>
        return;
    }

    // Assign red LED duration
    red_led_duration = duration;
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <setRedLEDDuration+0x5c>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6013      	str	r3, [r2, #0]

    // Calculate green LED duration as (duration / 2), rounded up
    green_led_duration = (int)ceil(duration / 2.0);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe fcc7 	bl	80003f4 <__aeabi_i2d>
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a6e:	f7fe fe55 	bl	800071c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f002 f8a5 	bl	8003bc8 <ceil>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7fe ffb9 	bl	80009fc <__aeabi_d2iz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <setRedLEDDuration+0x60>)
 8001a8e:	6013      	str	r3, [r2, #0]

    // Calculate yellow LED duration
    yellow_led_duration = red_led_duration - green_led_duration;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <setRedLEDDuration+0x5c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <setRedLEDDuration+0x60>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <setRedLEDDuration+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e000      	b.n	8001aa2 <setRedLEDDuration+0x56>
        return;
 8001aa0:	bf00      	nop
}
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000054 	.word	0x20000054
 8001aac:	20000058 	.word	0x20000058
 8001ab0:	2000005c 	.word	0x2000005c

08001ab4 <setGreenLEDDuration>:
void setGreenLEDDuration(int duration) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    if (duration==99) return;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b63      	cmp	r3, #99	@ 0x63
 8001ac0:	d031      	beq.n	8001b26 <setGreenLEDDuration+0x72>
    
    // Assign green LED duration
    green_led_duration = duration;
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <setGreenLEDDuration+0x7c>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6013      	str	r3, [r2, #0]

    // Calculate red_led_duration with rounding up
    red_led_duration = (int)ceil((5.0 * duration) / 3);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fc93 	bl	80003f4 <__aeabi_i2d>
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <setGreenLEDDuration+0x80>)
 8001ad4:	f7fe fcf8 	bl	80004c8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <setGreenLEDDuration+0x84>)
 8001ae6:	f7fe fe19 	bl	800071c <__aeabi_ddiv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f002 f869 	bl	8003bc8 <ceil>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ff7d 	bl	80009fc <__aeabi_d2iz>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <setGreenLEDDuration+0x88>)
 8001b06:	6013      	str	r3, [r2, #0]

    // Ensure red_led_duration does not exceed 99
    if (red_led_duration > 99) {
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <setGreenLEDDuration+0x88>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b63      	cmp	r3, #99	@ 0x63
 8001b0e:	dd02      	ble.n	8001b16 <setGreenLEDDuration+0x62>
        red_led_duration = 99;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <setGreenLEDDuration+0x88>)
 8001b12:	2263      	movs	r2, #99	@ 0x63
 8001b14:	601a      	str	r2, [r3, #0]
    }

    // Calculate yellow_led_duration
    yellow_led_duration = red_led_duration - green_led_duration;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <setGreenLEDDuration+0x88>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <setGreenLEDDuration+0x7c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <setGreenLEDDuration+0x8c>)
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e000      	b.n	8001b28 <setGreenLEDDuration+0x74>
    if (duration==99) return;
 8001b26:	bf00      	nop
}
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000058 	.word	0x20000058
 8001b34:	40140000 	.word	0x40140000
 8001b38:	40080000 	.word	0x40080000
 8001b3c:	20000054 	.word	0x20000054
 8001b40:	2000005c 	.word	0x2000005c

08001b44 <setYellowLEDDuration>:
void setYellowLEDDuration(int duration) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    if (duration==99) return;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b63      	cmp	r3, #99	@ 0x63
 8001b50:	d032      	beq.n	8001bb8 <setYellowLEDDuration+0x74>
    
    // Assign yellow LED duration 
    yellow_led_duration = duration;
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <setYellowLEDDuration+0x7c>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6013      	str	r3, [r2, #0]

    // Calculate yellow_led_duration with rounding up
    red_led_duration = (int)ceil((5.0 * duration) / 2);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7fe fc4b 	bl	80003f4 <__aeabi_i2d>
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <setYellowLEDDuration+0x80>)
 8001b64:	f7fe fcb0 	bl	80004c8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b78:	f7fe fdd0 	bl	800071c <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f002 f820 	bl	8003bc8 <ceil>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe ff34 	bl	80009fc <__aeabi_d2iz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <setYellowLEDDuration+0x84>)
 8001b98:	6013      	str	r3, [r2, #0]
    
    // Ensure red_led_duration does not exceed 99
    if (red_led_duration > 99) {
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <setYellowLEDDuration+0x84>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b63      	cmp	r3, #99	@ 0x63
 8001ba0:	dd02      	ble.n	8001ba8 <setYellowLEDDuration+0x64>
        red_led_duration = 99;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <setYellowLEDDuration+0x84>)
 8001ba4:	2263      	movs	r2, #99	@ 0x63
 8001ba6:	601a      	str	r2, [r3, #0]
    }

    // Calculate green_led_duration
    green_led_duration = red_led_duration - yellow_led_duration;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <setYellowLEDDuration+0x84>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <setYellowLEDDuration+0x7c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <setYellowLEDDuration+0x88>)
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e000      	b.n	8001bba <setYellowLEDDuration+0x76>
    if (duration==99) return;
 8001bb8:	bf00      	nop
}
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000005c 	.word	0x2000005c
 8001bc4:	40140000 	.word	0x40140000
 8001bc8:	20000054 	.word	0x20000054
 8001bcc:	20000058 	.word	0x20000058

08001bd0 <fsm_select_mode_run>:
//         }
//         yellow_led_duration = duration;
//     }
// }

void fsm_select_mode_run() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
   switch (status_way1) {
 8001bd4:	4bad      	ldr	r3, [pc, #692]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b0a      	subs	r3, #10
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	f200 81cf 	bhi.w	8001f7e <fsm_select_mode_run+0x3ae>
 8001be0:	a201      	add	r2, pc, #4	@ (adr r2, 8001be8 <fsm_select_mode_run+0x18>)
 8001be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be6:	bf00      	nop
 8001be8:	08001bfd 	.word	0x08001bfd
 8001bec:	08001c83 	.word	0x08001c83
 8001bf0:	08001cd7 	.word	0x08001cd7
 8001bf4:	08001db1 	.word	0x08001db1
 8001bf8:	08001ead 	.word	0x08001ead
       case INIT_mode:
           // Initialize the state to SELECT_MODE_1
           // Initialize all LEDs to off
           HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2101      	movs	r1, #1
 8001c00:	48a3      	ldr	r0, [pc, #652]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001c02:	f000 ffc8 	bl	8002b96 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c0c:	48a0      	ldr	r0, [pc, #640]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001c0e:	f000 ffc2 	bl	8002b96 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c18:	489d      	ldr	r0, [pc, #628]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001c1a:	f000 ffbc 	bl	8002b96 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2102      	movs	r1, #2
 8001c22:	489b      	ldr	r0, [pc, #620]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001c24:	f000 ffb7 	bl	8002b96 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4898      	ldr	r0, [pc, #608]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001c2e:	f000 ffb2 	bl	8002b96 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	4896      	ldr	r0, [pc, #600]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001c38:	f000 ffad 	bl	8002b96 <HAL_GPIO_WritePin>

            // off all SEGb
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c42:	4894      	ldr	r0, [pc, #592]	@ (8001e94 <fsm_select_mode_run+0x2c4>)
 8001c44:	f000 ffa7 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c4e:	4891      	ldr	r0, [pc, #580]	@ (8001e94 <fsm_select_mode_run+0x2c4>)
 8001c50:	f000 ffa1 	bl	8002b96 <HAL_GPIO_WritePin>

            // ON all SEG
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c5a:	488e      	ldr	r0, [pc, #568]	@ (8001e94 <fsm_select_mode_run+0x2c4>)
 8001c5c:	f000 ff9b 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c66:	488b      	ldr	r0, [pc, #556]	@ (8001e94 <fsm_select_mode_run+0x2c4>)
 8001c68:	f000 ff95 	bl	8002b96 <HAL_GPIO_WritePin>


           status_way1 = SELECT_MODE_1;
 8001c6c:	4b87      	ldr	r3, [pc, #540]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001c6e:	220b      	movs	r2, #11
 8001c70:	601a      	str	r2, [r3, #0]
           setTimer0(3000);
 8001c72:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001c76:	f000 fab9 	bl	80021ec <setTimer0>
             setTimer1(250); //Blinking
 8001c7a:	20fa      	movs	r0, #250	@ 0xfa
 8001c7c:	f000 fad0 	bl	8002220 <setTimer1>
 
           break;
 8001c80:	e186      	b.n	8001f90 <fsm_select_mode_run+0x3c0>
       case SELECT_MODE_1:

           display7SEG(1); // Display mode
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7fe fee2 	bl	8000a4c <display7SEG>

           if (isButton1Pressed() == 1) {
 8001c88:	f7ff fb3c 	bl	8001304 <isButton1Pressed>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d109      	bne.n	8001ca6 <fsm_select_mode_run+0xd6>
           status_way1 = SELECT_MODE_2;
 8001c92:	4b7e      	ldr	r3, [pc, #504]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001c94:	220c      	movs	r2, #12
 8001c96:	601a      	str	r2, [r3, #0]
           setTimer0(10000);
 8001c98:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c9c:	f000 faa6 	bl	80021ec <setTimer0>
            setTimer1(250); //Blinking
 8001ca0:	20fa      	movs	r0, #250	@ 0xfa
 8001ca2:	f000 fabd 	bl	8002220 <setTimer1>
           //setTimer4(10);
           }



           if (timer0_flag == 1) {
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <fsm_select_mode_run+0x2c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f040 8169 	bne.w	8001f82 <fsm_select_mode_run+0x3b2>
                status_way1 = INIT_1;
 8001cb0:	4b76      	ldr	r3, [pc, #472]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001cb6:	4b79      	ldr	r3, [pc, #484]	@ (8001e9c <fsm_select_mode_run+0x2cc>)
 8001cb8:	2204      	movs	r2, #4
 8001cba:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cc2:	4874      	ldr	r0, [pc, #464]	@ (8001e94 <fsm_select_mode_run+0x2c4>)
 8001cc4:	f000 ff67 	bl	8002b96 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cce:	4871      	ldr	r0, [pc, #452]	@ (8001e94 <fsm_select_mode_run+0x2c4>)
 8001cd0:	f000 ff61 	bl	8002b96 <HAL_GPIO_WritePin>
           }
           break;
 8001cd4:	e155      	b.n	8001f82 <fsm_select_mode_run+0x3b2>
       case SELECT_MODE_2:
           display7SEG(2); // Display mode
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f7fe feb8 	bl	8000a4c <display7SEG>
// Blinking red LEDs at 2 Hz
           if (timer1_flag == 1) {
 8001cdc:	4b70      	ldr	r3, [pc, #448]	@ (8001ea0 <fsm_select_mode_run+0x2d0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d120      	bne.n	8001d26 <fsm_select_mode_run+0x156>
               HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	486a      	ldr	r0, [pc, #424]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001ce8:	f000 ff6d 	bl	8002bc6 <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8001cec:	2110      	movs	r1, #16
 8001cee:	4868      	ldr	r0, [pc, #416]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001cf0:	f000 ff69 	bl	8002bc6 <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4865      	ldr	r0, [pc, #404]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001cfa:	f000 ff4c 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2108      	movs	r1, #8
 8001d02:	4863      	ldr	r0, [pc, #396]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001d04:	f000 ff47 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d0e:	4860      	ldr	r0, [pc, #384]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001d10:	f000 ff41 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d1a:	485d      	ldr	r0, [pc, #372]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001d1c:	f000 ff3b 	bl	8002b96 <HAL_GPIO_WritePin>
               setTimer1(250); // 0.5 seconds for 2 Hz blinking
 8001d20:	20fa      	movs	r0, #250	@ 0xfa
 8001d22:	f000 fa7d 	bl	8002220 <setTimer1>
           }


           if (isButton1Pressed() == 1) {
 8001d26:	f7ff faed 	bl	8001304 <isButton1Pressed>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d109      	bne.n	8001d44 <fsm_select_mode_run+0x174>
               status_way1 = SELECT_MODE_3;
 8001d30:	4b56      	ldr	r3, [pc, #344]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001d32:	220d      	movs	r2, #13
 8001d34:	601a      	str	r2, [r3, #0]
               setTimer0(10000);
 8001d36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001d3a:	f000 fa57 	bl	80021ec <setTimer0>
            setTimer1(250); //Blinking
 8001d3e:	20fa      	movs	r0, #250	@ 0xfa
 8001d40:	f000 fa6e 	bl	8002220 <setTimer1>
           //setTimer4(10);
           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 8001d44:	f7ff faf0 	bl	8001328 <isButton2Pressed>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10f      	bne.n	8001d6e <fsm_select_mode_run+0x19e>
               red_duration++;
 8001d4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ea4 <fsm_select_mode_run+0x2d4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	4a53      	ldr	r2, [pc, #332]	@ (8001ea4 <fsm_select_mode_run+0x2d4>)
 8001d56:	6013      	str	r3, [r2, #0]
               if (red_duration > 99) {
 8001d58:	4b52      	ldr	r3, [pc, #328]	@ (8001ea4 <fsm_select_mode_run+0x2d4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b63      	cmp	r3, #99	@ 0x63
 8001d5e:	dd02      	ble.n	8001d66 <fsm_select_mode_run+0x196>
                   red_duration = 1; // Wrap around to 1 if it exceeds 99
 8001d60:	4b50      	ldr	r3, [pc, #320]	@ (8001ea4 <fsm_select_mode_run+0x2d4>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
               }
               setTimer0(10000);
 8001d66:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001d6a:	f000 fa3f 	bl	80021ec <setTimer0>
           }
            // display7SEG2(red_duration);
            display2DigitNumberWay2(red_duration);
 8001d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <fsm_select_mode_run+0x2d4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa4e 	bl	8001214 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 8001d78:	f7ff fae8 	bl	800134c <isButton3Pressed>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d10a      	bne.n	8001d98 <fsm_select_mode_run+0x1c8>
               // Save the duration value and exit Mode 2
               setRedLEDDuration(red_duration);
 8001d82:	4b48      	ldr	r3, [pc, #288]	@ (8001ea4 <fsm_select_mode_run+0x2d4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe60 	bl	8001a4c <setRedLEDDuration>
                status_way1 = INIT_1;
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001d92:	4b42      	ldr	r3, [pc, #264]	@ (8001e9c <fsm_select_mode_run+0x2cc>)
 8001d94:	2204      	movs	r2, #4
 8001d96:	601a      	str	r2, [r3, #0]
           }

           if (timer0_flag == 1) {
 8001d98:	4b3f      	ldr	r3, [pc, #252]	@ (8001e98 <fsm_select_mode_run+0x2c8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	f040 80f2 	bne.w	8001f86 <fsm_select_mode_run+0x3b6>
                status_way1 = INIT_1;
 8001da2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001da8:	4b3c      	ldr	r3, [pc, #240]	@ (8001e9c <fsm_select_mode_run+0x2cc>)
 8001daa:	2204      	movs	r2, #4
 8001dac:	601a      	str	r2, [r3, #0]
           }
           break;
 8001dae:	e0ea      	b.n	8001f86 <fsm_select_mode_run+0x3b6>
       case SELECT_MODE_3:
           display7SEG(3); // Display mode
 8001db0:	2003      	movs	r0, #3
 8001db2:	f7fe fe4b 	bl	8000a4c <display7SEG>
           // Blinking yellow LEDs at 2 Hz
           if (timer1_flag == 1) {
 8001db6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <fsm_select_mode_run+0x2d0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d120      	bne.n	8001e00 <fsm_select_mode_run+0x230>
               HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4833      	ldr	r0, [pc, #204]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001dc2:	f000 ff00 	bl	8002bc6 <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
 8001dc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dca:	4831      	ldr	r0, [pc, #196]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001dcc:	f000 fefb 	bl	8002bc6 <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	482e      	ldr	r0, [pc, #184]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001dd6:	f000 fede 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2102      	movs	r1, #2
 8001dde:	482c      	ldr	r0, [pc, #176]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001de0:	f000 fed9 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2110      	movs	r1, #16
 8001de8:	4829      	ldr	r0, [pc, #164]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001dea:	f000 fed4 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001df4:	4826      	ldr	r0, [pc, #152]	@ (8001e90 <fsm_select_mode_run+0x2c0>)
 8001df6:	f000 fece 	bl	8002b96 <HAL_GPIO_WritePin>
               setTimer1(250); // 0.5 seconds for 2 Hz blinking
 8001dfa:	20fa      	movs	r0, #250	@ 0xfa
 8001dfc:	f000 fa10 	bl	8002220 <setTimer1>
           }

           if (isButton1Pressed() == 1) {
 8001e00:	f7ff fa80 	bl	8001304 <isButton1Pressed>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d109      	bne.n	8001e1e <fsm_select_mode_run+0x24e>
               status_way1 = SELECT_MODE_4;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001e0c:	220e      	movs	r2, #14
 8001e0e:	601a      	str	r2, [r3, #0]
               setTimer0(10000);
 8001e10:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001e14:	f000 f9ea 	bl	80021ec <setTimer0>
              setTimer1(250); //Blinking
 8001e18:	20fa      	movs	r0, #250	@ 0xfa
 8001e1a:	f000 fa01 	bl	8002220 <setTimer1>
           //setTimer4(10);
           
           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 8001e1e:	f7ff fa83 	bl	8001328 <isButton2Pressed>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10f      	bne.n	8001e48 <fsm_select_mode_run+0x278>
               yellow_duration++;
 8001e28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <fsm_select_mode_run+0x2d8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <fsm_select_mode_run+0x2d8>)
 8001e30:	6013      	str	r3, [r2, #0]
               if (yellow_duration > 99) {
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <fsm_select_mode_run+0x2d8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b63      	cmp	r3, #99	@ 0x63
 8001e38:	dd02      	ble.n	8001e40 <fsm_select_mode_run+0x270>
                   yellow_duration = 1; // Wrap around to 1 if it exceeds 99
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <fsm_select_mode_run+0x2d8>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
               }
           setTimer0(10000);
 8001e40:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001e44:	f000 f9d2 	bl	80021ec <setTimer0>
           }


        //    display7SEG2(yellow_duration);
            display2DigitNumberWay2(yellow_duration);
 8001e48:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <fsm_select_mode_run+0x2d8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f9e1 	bl	8001214 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 8001e52:	f7ff fa7b 	bl	800134c <isButton3Pressed>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10a      	bne.n	8001e72 <fsm_select_mode_run+0x2a2>
               // Save the duration value and exit Mode 2
               setYellowLEDDuration(yellow_duration);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <fsm_select_mode_run+0x2d8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe6f 	bl	8001b44 <setYellowLEDDuration>
                status_way1 = INIT_1;
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <fsm_select_mode_run+0x2cc>)
 8001e6e:	2204      	movs	r2, #4
 8001e70:	601a      	str	r2, [r3, #0]
           }
           if (timer0_flag == 1) {
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <fsm_select_mode_run+0x2c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	f040 8087 	bne.w	8001f8a <fsm_select_mode_run+0x3ba>
                status_way1 = INIT_1;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <fsm_select_mode_run+0x2bc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <fsm_select_mode_run+0x2cc>)
 8001e84:	2204      	movs	r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
           }
           break;
 8001e88:	e07f      	b.n	8001f8a <fsm_select_mode_run+0x3ba>
 8001e8a:	bf00      	nop
 8001e8c:	200000b4 	.word	0x200000b4
 8001e90:	40010c00 	.word	0x40010c00
 8001e94:	40010800 	.word	0x40010800
 8001e98:	20000118 	.word	0x20000118
 8001e9c:	20000050 	.word	0x20000050
 8001ea0:	2000011c 	.word	0x2000011c
 8001ea4:	20000044 	.word	0x20000044
 8001ea8:	2000004c 	.word	0x2000004c
       case SELECT_MODE_4:
           display7SEG(4); // Display mode
 8001eac:	2004      	movs	r0, #4
 8001eae:	f7fe fdcd 	bl	8000a4c <display7SEG>

            // Blinking red LEDs at 2 Hz
           if (timer1_flag == 1) {
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <fsm_select_mode_run+0x3c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d120      	bne.n	8001efc <fsm_select_mode_run+0x32c>
               HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
 8001eba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ebe:	4836      	ldr	r0, [pc, #216]	@ (8001f98 <fsm_select_mode_run+0x3c8>)
 8001ec0:	f000 fe81 	bl	8002bc6 <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4834      	ldr	r0, [pc, #208]	@ (8001f98 <fsm_select_mode_run+0x3c8>)
 8001ec8:	f000 fe7d 	bl	8002bc6 <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4831      	ldr	r0, [pc, #196]	@ (8001f98 <fsm_select_mode_run+0x3c8>)
 8001ed2:	f000 fe60 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2108      	movs	r1, #8
 8001eda:	482f      	ldr	r0, [pc, #188]	@ (8001f98 <fsm_select_mode_run+0x3c8>)
 8001edc:	f000 fe5b 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	482c      	ldr	r0, [pc, #176]	@ (8001f98 <fsm_select_mode_run+0x3c8>)
 8001ee6:	f000 fe56 	bl	8002b96 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef0:	4829      	ldr	r0, [pc, #164]	@ (8001f98 <fsm_select_mode_run+0x3c8>)
 8001ef2:	f000 fe50 	bl	8002b96 <HAL_GPIO_WritePin>

               setTimer1(250); // 0.5 seconds for 2 Hz blinking
 8001ef6:	20fa      	movs	r0, #250	@ 0xfa
 8001ef8:	f000 f992 	bl	8002220 <setTimer1>
           }

           if (isButton1Pressed() == 1) {
 8001efc:	f7ff fa02 	bl	8001304 <isButton1Pressed>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d106      	bne.n	8001f14 <fsm_select_mode_run+0x344>
               status_way1 = INIT_mode;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <fsm_select_mode_run+0x3cc>)
 8001f08:	220a      	movs	r2, #10
 8001f0a:	601a      	str	r2, [r3, #0]
               setTimer0(3000);
 8001f0c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f10:	f000 f96c 	bl	80021ec <setTimer0>

           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 8001f14:	f7ff fa08 	bl	8001328 <isButton2Pressed>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10f      	bne.n	8001f3e <fsm_select_mode_run+0x36e>
               green_duration++;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <fsm_select_mode_run+0x3d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <fsm_select_mode_run+0x3d0>)
 8001f26:	6013      	str	r3, [r2, #0]
               if (green_duration > 99) {
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <fsm_select_mode_run+0x3d0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b63      	cmp	r3, #99	@ 0x63
 8001f2e:	dd02      	ble.n	8001f36 <fsm_select_mode_run+0x366>
                   green_duration = 1; // Wrap around to 1 if it exceeds 99
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <fsm_select_mode_run+0x3d0>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
               }
           setTimer0(10000);
 8001f36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001f3a:	f000 f957 	bl	80021ec <setTimer0>
           }

        //    display7SEG2(green_duration);
            display2DigitNumberWay2(green_duration);
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <fsm_select_mode_run+0x3d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f966 	bl	8001214 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 8001f48:	f7ff fa00 	bl	800134c <isButton3Pressed>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10a      	bne.n	8001f68 <fsm_select_mode_run+0x398>
               // Save the duration value and exit Mode 2
               setGreenLEDDuration(green_duration);
 8001f52:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <fsm_select_mode_run+0x3d0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fdac 	bl	8001ab4 <setGreenLEDDuration>
                status_way1 = INIT_1;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <fsm_select_mode_run+0x3cc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <fsm_select_mode_run+0x3d4>)
 8001f64:	2204      	movs	r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
           }
           if (timer0_flag == 1) {
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <fsm_select_mode_run+0x3d8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10e      	bne.n	8001f8e <fsm_select_mode_run+0x3be>
               status_way1 = INIT_1;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <fsm_select_mode_run+0x3cc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
               status_way2 = INIT_2;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <fsm_select_mode_run+0x3d4>)
 8001f78:	2204      	movs	r2, #4
 8001f7a:	601a      	str	r2, [r3, #0]
           }
           break;
 8001f7c:	e007      	b.n	8001f8e <fsm_select_mode_run+0x3be>
       default:
           // status_way1 = INIT;
           break;
 8001f7e:	bf00      	nop
 8001f80:	e006      	b.n	8001f90 <fsm_select_mode_run+0x3c0>
           break;
 8001f82:	bf00      	nop
 8001f84:	e004      	b.n	8001f90 <fsm_select_mode_run+0x3c0>
           break;
 8001f86:	bf00      	nop
 8001f88:	e002      	b.n	8001f90 <fsm_select_mode_run+0x3c0>
           break;
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <fsm_select_mode_run+0x3c0>
           break;
 8001f8e:	bf00      	nop
   }
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000011c 	.word	0x2000011c
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	200000b4 	.word	0x200000b4
 8001fa0:	20000048 	.word	0x20000048
 8001fa4:	20000050 	.word	0x20000050
 8001fa8:	20000118 	.word	0x20000118

08001fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb0:	f000 faee 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb4:	f000 f812 	bl	8001fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb8:	f000 f898 	bl	80020ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8001fbc:	f000 f84a 	bl	8002054 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <main+0x2c>)
 8001fc2:	f001 fa47 	bl	8003454 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  	fsm_automatic_run_way1();
 8001fc6:	f7ff fad5 	bl	8001574 <fsm_automatic_run_way1>
	  	fsm_automatic_run_way2();
 8001fca:	f7ff fc2b 	bl	8001824 <fsm_automatic_run_way2>
	  	fsm_select_mode_run();
 8001fce:	f7ff fdff 	bl	8001bd0 <fsm_select_mode_run>
	  	fsm_automatic_run_way1();
 8001fd2:	bf00      	nop
 8001fd4:	e7f7      	b.n	8001fc6 <main+0x1a>
 8001fd6:	bf00      	nop
 8001fd8:	200000b8 	.word	0x200000b8

08001fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b090      	sub	sp, #64	@ 0x40
 8001fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe2:	f107 0318 	add.w	r3, r7, #24
 8001fe6:	2228      	movs	r2, #40	@ 0x28
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fdbe 	bl	8003b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002002:	2301      	movs	r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002006:	2310      	movs	r3, #16
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0318 	add.w	r3, r7, #24
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fdf0 	bl	8002bf8 <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800201e:	f000 f8df 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f001 f85e 	bl	80030fc <HAL_RCC_ClockConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002046:	f000 f8cb 	bl	80021e0 <Error_Handler>
  }
}
 800204a:	bf00      	nop
 800204c:	3740      	adds	r7, #64	@ 0x40
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800207a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800207e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002086:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002088:	2209      	movs	r2, #9
 800208a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <MX_TIM2_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002098:	4813      	ldr	r0, [pc, #76]	@ (80020e8 <MX_TIM2_Init+0x94>)
 800209a:	f001 f98b 	bl	80033b4 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020a4:	f000 f89c 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <MX_TIM2_Init+0x94>)
 80020b6:	f001 fb09 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020c0:	f000 f88e 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	@ (80020e8 <MX_TIM2_Init+0x94>)
 80020d2:	f001 fce1 	bl	8003a98 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020dc:	f000 f880 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200000b8 	.word	0x200000b8

080020ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <MX_GPIO_Init+0xd0>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_GPIO_Init+0xd0>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8002148:	2200      	movs	r2, #0
 800214a:	f649 711f 	movw	r1, #40735	@ 0x9f1f
 800214e:	481c      	ldr	r0, [pc, #112]	@ (80021c0 <MX_GPIO_Init+0xd4>)
 8002150:	f000 fd21 	bl	8002b96 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN1_1_Pin
                          |EN1_2_Pin|EN2_1_Pin|EN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_11_Pin|LED_12_Pin
 8002154:	2200      	movs	r2, #0
 8002156:	f647 31fb 	movw	r1, #31739	@ 0x7bfb
 800215a:	481a      	ldr	r0, [pc, #104]	@ (80021c4 <MX_GPIO_Init+0xd8>)
 800215c:	f000 fd1b 	bl	8002b96 <HAL_GPIO_WritePin>
                          |SEG_4b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin EN1_1_Pin
                           EN1_2_Pin EN2_1_Pin EN2_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8002160:	f649 731f 	movw	r3, #40735	@ 0x9f1f
 8002164:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN1_1_Pin
                          |EN1_2_Pin|EN2_1_Pin|EN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2302      	movs	r3, #2
 8002170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4619      	mov	r1, r3
 8002178:	4811      	ldr	r0, [pc, #68]	@ (80021c0 <MX_GPIO_Init+0xd4>)
 800217a:	f000 fb79 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800217e:	23e0      	movs	r3, #224	@ 0xe0
 8002180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4619      	mov	r1, r3
 8002190:	480b      	ldr	r0, [pc, #44]	@ (80021c0 <MX_GPIO_Init+0xd4>)
 8002192:	f000 fb6d 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_11_Pin LED_12_Pin
                           SEG_5b_Pin SEG_6b_Pin LED_3_Pin LED_4_Pin
                           SEG_0b_Pin SEG_1b_Pin SEG_2b_Pin SEG_3b_Pin
                           SEG_4b_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_11_Pin|LED_12_Pin
 8002196:	f647 33fb 	movw	r3, #31739	@ 0x7bfb
 800219a:	613b      	str	r3, [r7, #16]
                          |SEG_5b_Pin|SEG_6b_Pin|LED_3_Pin|LED_4_Pin
                          |SEG_0b_Pin|SEG_1b_Pin|SEG_2b_Pin|SEG_3b_Pin
                          |SEG_4b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	4805      	ldr	r0, [pc, #20]	@ (80021c4 <MX_GPIO_Init+0xd8>)
 80021b0:	f000 fb5e 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010800 	.word	0x40010800
 80021c4:	40010c00 	.word	0x40010c00

080021c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80021d0:	f7ff f8ce 	bl	8001370 <getKeyInput>
    timer_run();
 80021d4:	f000 f8a6 	bl	8002324 <timer_run>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <Error_Handler+0x8>

080021ec <setTimer0>:
int timer3_flag = 0;
int timer4_flag = 0;
int timer5_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0(int duration) {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  timer0_counter = duration / TIMER_CYCLE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <setTimer0+0x28>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80021fe:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <setTimer0+0x2c>)
 8002200:	6013      	str	r3, [r2, #0]
  timer0_flag = 0;
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <setTimer0+0x30>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000060 	.word	0x20000060
 8002218:	20000100 	.word	0x20000100
 800221c:	20000118 	.word	0x20000118

08002220 <setTimer1>:

void setTimer1(int duration) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  timer1_counter = duration / TIMER_CYCLE;
 8002228:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <setTimer1+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002232:	4a06      	ldr	r2, [pc, #24]	@ (800224c <setTimer1+0x2c>)
 8002234:	6013      	str	r3, [r2, #0]
  timer1_flag = 0;
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <setTimer1+0x30>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000060 	.word	0x20000060
 800224c:	20000104 	.word	0x20000104
 8002250:	2000011c 	.word	0x2000011c

08002254 <setTimer2>:

void setTimer2(int duration) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  timer2_counter = duration / TIMER_CYCLE;
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <setTimer2+0x28>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	fb92 f3f3 	sdiv	r3, r2, r3
 8002266:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <setTimer2+0x2c>)
 8002268:	6013      	str	r3, [r2, #0]
  timer2_flag = 0;
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <setTimer2+0x30>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000060 	.word	0x20000060
 8002280:	20000108 	.word	0x20000108
 8002284:	20000120 	.word	0x20000120

08002288 <setTimer3>:

void setTimer3(int duration) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 8002290:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <setTimer3+0x28>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	fb92 f3f3 	sdiv	r3, r2, r3
 800229a:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <setTimer3+0x2c>)
 800229c:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <setTimer3+0x30>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000060 	.word	0x20000060
 80022b4:	2000010c 	.word	0x2000010c
 80022b8:	20000124 	.word	0x20000124

080022bc <setTimer4>:

void setTimer4(int duration) {
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    timer4_counter = duration / TIMER_CYCLE;
 80022c4:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <setTimer4+0x28>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80022ce:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <setTimer4+0x2c>)
 80022d0:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <setTimer4+0x30>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000060 	.word	0x20000060
 80022e8:	20000110 	.word	0x20000110
 80022ec:	20000128 	.word	0x20000128

080022f0 <setTimer5>:

void setTimer5(int duration) {
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    timer5_counter = duration / TIMER_CYCLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <setTimer5+0x28>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002302:	4a06      	ldr	r2, [pc, #24]	@ (800231c <setTimer5+0x2c>)
 8002304:	6013      	str	r3, [r2, #0]
    timer5_flag = 0;
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <setTimer5+0x30>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000060 	.word	0x20000060
 800231c:	20000114 	.word	0x20000114
 8002320:	2000012c 	.word	0x2000012c

08002324 <timer_run>:

void timer_run() {
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  if (timer0_counter > 0) {
 8002328:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <timer_run+0xcc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	dd0b      	ble.n	8002348 <timer_run+0x24>
    timer0_counter--;
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <timer_run+0xcc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3b01      	subs	r3, #1
 8002336:	4a2e      	ldr	r2, [pc, #184]	@ (80023f0 <timer_run+0xcc>)
 8002338:	6013      	str	r3, [r2, #0]
    if (timer0_counter == 0) {
 800233a:	4b2d      	ldr	r3, [pc, #180]	@ (80023f0 <timer_run+0xcc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <timer_run+0x24>
      timer0_flag = 1;
 8002342:	4b2c      	ldr	r3, [pc, #176]	@ (80023f4 <timer_run+0xd0>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    }
  }

  if (timer1_counter > 0) {
 8002348:	4b2b      	ldr	r3, [pc, #172]	@ (80023f8 <timer_run+0xd4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	dd0b      	ble.n	8002368 <timer_run+0x44>
    timer1_counter--;
 8002350:	4b29      	ldr	r3, [pc, #164]	@ (80023f8 <timer_run+0xd4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <timer_run+0xd4>)
 8002358:	6013      	str	r3, [r2, #0]
    if (timer1_counter == 0) {
 800235a:	4b27      	ldr	r3, [pc, #156]	@ (80023f8 <timer_run+0xd4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <timer_run+0x44>
      timer1_flag = 1;
 8002362:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <timer_run+0xd8>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    }
  }

  if (timer2_counter > 0) {
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <timer_run+0xdc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	dd0b      	ble.n	8002388 <timer_run+0x64>
    timer2_counter--;
 8002370:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <timer_run+0xdc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	4a22      	ldr	r2, [pc, #136]	@ (8002400 <timer_run+0xdc>)
 8002378:	6013      	str	r3, [r2, #0]
    if (timer2_counter == 0) {
 800237a:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <timer_run+0xdc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <timer_run+0x64>
      timer2_flag = 1;
 8002382:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <timer_run+0xe0>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]
    }
  }
    if (timer3_counter > 0) {
 8002388:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <timer_run+0xe4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	dd0b      	ble.n	80023a8 <timer_run+0x84>
      timer3_counter--;
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <timer_run+0xe4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	4a1c      	ldr	r2, [pc, #112]	@ (8002408 <timer_run+0xe4>)
 8002398:	6013      	str	r3, [r2, #0]
      if (timer3_counter == 0) {
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <timer_run+0xe4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <timer_run+0x84>
          timer3_flag = 1;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <timer_run+0xe8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
      }
  }
  if (timer4_counter > 0) {
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <timer_run+0xec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dd0b      	ble.n	80023c8 <timer_run+0xa4>
      timer4_counter--;
 80023b0:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <timer_run+0xec>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	4a16      	ldr	r2, [pc, #88]	@ (8002410 <timer_run+0xec>)
 80023b8:	6013      	str	r3, [r2, #0]
      if (timer4_counter == 0) {
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <timer_run+0xec>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <timer_run+0xa4>
          timer4_flag = 1;
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <timer_run+0xf0>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
      }
  }
  if (timer5_counter > 0) {
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <timer_run+0xf4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	dd0b      	ble.n	80023e8 <timer_run+0xc4>
      timer5_counter--;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <timer_run+0xf4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4a10      	ldr	r2, [pc, #64]	@ (8002418 <timer_run+0xf4>)
 80023d8:	6013      	str	r3, [r2, #0]
      if (timer5_counter == 0) {
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <timer_run+0xf4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <timer_run+0xc4>
          timer5_flag = 1;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <timer_run+0xf8>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
      }
  }
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000100 	.word	0x20000100
 80023f4:	20000118 	.word	0x20000118
 80023f8:	20000104 	.word	0x20000104
 80023fc:	2000011c 	.word	0x2000011c
 8002400:	20000108 	.word	0x20000108
 8002404:	20000120 	.word	0x20000120
 8002408:	2000010c 	.word	0x2000010c
 800240c:	20000124 	.word	0x20000124
 8002410:	20000110 	.word	0x20000110
 8002414:	20000128 	.word	0x20000128
 8002418:	20000114 	.word	0x20000114
 800241c:	2000012c 	.word	0x2000012c

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <HAL_MspInit+0x5c>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4a14      	ldr	r2, [pc, #80]	@ (800247c <HAL_MspInit+0x5c>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6193      	str	r3, [r2, #24]
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_MspInit+0x5c>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_MspInit+0x5c>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a0e      	ldr	r2, [pc, #56]	@ (800247c <HAL_MspInit+0x5c>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_MspInit+0x5c>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002456:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_MspInit+0x60>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <HAL_MspInit+0x60>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000

08002484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002494:	d113      	bne.n	80024be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <HAL_TIM_Base_MspInit+0x44>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a0b      	ldr	r2, [pc, #44]	@ (80024c8 <HAL_TIM_Base_MspInit+0x44>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	61d3      	str	r3, [r2, #28]
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_TIM_Base_MspInit+0x44>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	201c      	movs	r0, #28
 80024b4:	f000 f9a5 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024b8:	201c      	movs	r0, #28
 80024ba:	f000 f9be 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <NMI_Handler+0x4>

080024d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <MemManage_Handler+0x4>

080024e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251c:	f000 f87e 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <TIM2_IRQHandler+0x10>)
 800252a:	f000 ffdf 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200000b8 	.word	0x200000b8

08002538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002544:	f7ff fff8 	bl	8002538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480b      	ldr	r0, [pc, #44]	@ (8002578 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800254a:	490c      	ldr	r1, [pc, #48]	@ (800257c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800254c:	4a0c      	ldr	r2, [pc, #48]	@ (8002580 <LoopFillZerobss+0x16>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a09      	ldr	r2, [pc, #36]	@ (8002584 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002560:	4c09      	ldr	r4, [pc, #36]	@ (8002588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256e:	f001 fb05 	bl	8003b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002572:	f7ff fd1b 	bl	8001fac <main>
  bx lr
 8002576:	4770      	bx	lr
  ldr r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800257c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002580:	08003d04 	.word	0x08003d04
  ldr r2, =_sbss
 8002584:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002588:	20000134 	.word	0x20000134

0800258c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_2_IRQHandler>
	...

08002590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_Init+0x28>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <HAL_Init+0x28>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 f923 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	200f      	movs	r0, #15
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff ff38 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f93b 	bl	8002856 <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 f903 	bl	8002802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	@ (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000064 	.word	0x20000064
 8002614:	2000006c 	.word	0x2000006c
 8002618:	20000068 	.word	0x20000068

0800261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_IncTick+0x1c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_IncTick+0x20>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a03      	ldr	r2, [pc, #12]	@ (800263c <HAL_IncTick+0x20>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	2000006c 	.word	0x2000006c
 800263c:	20000130 	.word	0x20000130

08002640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b02      	ldr	r3, [pc, #8]	@ (8002650 <HAL_GetTick+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000130 	.word	0x20000130

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4906      	ldr	r1, [pc, #24]	@ (80026ec <__NVIC_EnableIRQ+0x34>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	@ (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	@ (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	@ 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	@ 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f7ff ff90 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff2d 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff42 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff90 	bl	8002744 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff5f 	bl	80026f0 <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff35 	bl	80026b8 <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffa2 	bl	80027a8 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b08b      	sub	sp, #44	@ 0x2c
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e161      	b.n	8002b48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002884:	2201      	movs	r2, #1
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 8150 	bne.w	8002b42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a97      	ldr	r2, [pc, #604]	@ (8002b04 <HAL_GPIO_Init+0x294>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d05e      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028ac:	4a95      	ldr	r2, [pc, #596]	@ (8002b04 <HAL_GPIO_Init+0x294>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d875      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028b2:	4a95      	ldr	r2, [pc, #596]	@ (8002b08 <HAL_GPIO_Init+0x298>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d058      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028b8:	4a93      	ldr	r2, [pc, #588]	@ (8002b08 <HAL_GPIO_Init+0x298>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d86f      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028be:	4a93      	ldr	r2, [pc, #588]	@ (8002b0c <HAL_GPIO_Init+0x29c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d052      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028c4:	4a91      	ldr	r2, [pc, #580]	@ (8002b0c <HAL_GPIO_Init+0x29c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d869      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028ca:	4a91      	ldr	r2, [pc, #580]	@ (8002b10 <HAL_GPIO_Init+0x2a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d04c      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028d0:	4a8f      	ldr	r2, [pc, #572]	@ (8002b10 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d863      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028d6:	4a8f      	ldr	r2, [pc, #572]	@ (8002b14 <HAL_GPIO_Init+0x2a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d046      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028dc:	4a8d      	ldr	r2, [pc, #564]	@ (8002b14 <HAL_GPIO_Init+0x2a4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d85d      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d82a      	bhi.n	800293c <HAL_GPIO_Init+0xcc>
 80028e6:	2b12      	cmp	r3, #18
 80028e8:	d859      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028ea:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_GPIO_Init+0x80>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	0800296b 	.word	0x0800296b
 80028f4:	08002945 	.word	0x08002945
 80028f8:	08002957 	.word	0x08002957
 80028fc:	08002999 	.word	0x08002999
 8002900:	0800299f 	.word	0x0800299f
 8002904:	0800299f 	.word	0x0800299f
 8002908:	0800299f 	.word	0x0800299f
 800290c:	0800299f 	.word	0x0800299f
 8002910:	0800299f 	.word	0x0800299f
 8002914:	0800299f 	.word	0x0800299f
 8002918:	0800299f 	.word	0x0800299f
 800291c:	0800299f 	.word	0x0800299f
 8002920:	0800299f 	.word	0x0800299f
 8002924:	0800299f 	.word	0x0800299f
 8002928:	0800299f 	.word	0x0800299f
 800292c:	0800299f 	.word	0x0800299f
 8002930:	0800299f 	.word	0x0800299f
 8002934:	0800294d 	.word	0x0800294d
 8002938:	08002961 	.word	0x08002961
 800293c:	4a76      	ldr	r2, [pc, #472]	@ (8002b18 <HAL_GPIO_Init+0x2a8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002942:	e02c      	b.n	800299e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e029      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	3304      	adds	r3, #4
 8002952:	623b      	str	r3, [r7, #32]
          break;
 8002954:	e024      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	3308      	adds	r3, #8
 800295c:	623b      	str	r3, [r7, #32]
          break;
 800295e:	e01f      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	330c      	adds	r3, #12
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e01a      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002972:	2304      	movs	r3, #4
 8002974:	623b      	str	r3, [r7, #32]
          break;
 8002976:	e013      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002980:	2308      	movs	r3, #8
 8002982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	611a      	str	r2, [r3, #16]
          break;
 800298a:	e009      	b.n	80029a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	615a      	str	r2, [r3, #20]
          break;
 8002996:	e003      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
          break;
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          break;
 800299e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2bff      	cmp	r3, #255	@ 0xff
 80029a4:	d801      	bhi.n	80029aa <HAL_GPIO_Init+0x13a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	e001      	b.n	80029ae <HAL_GPIO_Init+0x13e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d802      	bhi.n	80029bc <HAL_GPIO_Init+0x14c>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x152>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	3b08      	subs	r3, #8
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	210f      	movs	r1, #15
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a9 	beq.w	8002b42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_GPIO_Init+0x2ac>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a49      	ldr	r2, [pc, #292]	@ (8002b1c <HAL_GPIO_Init+0x2ac>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_GPIO_Init+0x2ac>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a08:	4a45      	ldr	r2, [pc, #276]	@ (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b24 <HAL_GPIO_Init+0x2b4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00d      	beq.n	8002a50 <HAL_GPIO_Init+0x1e0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3c      	ldr	r2, [pc, #240]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x1dc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b2c <HAL_GPIO_Init+0x2bc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_GPIO_Init+0x1d8>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e004      	b.n	8002a52 <HAL_GPIO_Init+0x1e2>
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e002      	b.n	8002a52 <HAL_GPIO_Init+0x1e2>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_GPIO_Init+0x1e2>
 8002a50:	2300      	movs	r3, #0
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	f002 0203 	and.w	r2, r2, #3
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	4093      	lsls	r3, r2
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a62:	492f      	ldr	r1, [pc, #188]	@ (8002b20 <HAL_GPIO_Init+0x2b0>)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	492b      	ldr	r1, [pc, #172]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a8a:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	4927      	ldr	r1, [pc, #156]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aa4:	4b22      	ldr	r3, [pc, #136]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	4921      	ldr	r1, [pc, #132]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60cb      	str	r3, [r1, #12]
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	491d      	ldr	r1, [pc, #116]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002acc:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4917      	ldr	r1, [pc, #92]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4913      	ldr	r1, [pc, #76]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01f      	beq.n	8002b34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	490d      	ldr	r1, [pc, #52]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e01f      	b.n	8002b42 <HAL_GPIO_Init+0x2d2>
 8002b02:	bf00      	nop
 8002b04:	10320000 	.word	0x10320000
 8002b08:	10310000 	.word	0x10310000
 8002b0c:	10220000 	.word	0x10220000
 8002b10:	10210000 	.word	0x10210000
 8002b14:	10120000 	.word	0x10120000
 8002b18:	10110000 	.word	0x10110000
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40010800 	.word	0x40010800
 8002b28:	40010c00 	.word	0x40010c00
 8002b2c:	40011000 	.word	0x40011000
 8002b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_GPIO_Init+0x2f4>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4909      	ldr	r1, [pc, #36]	@ (8002b64 <HAL_GPIO_Init+0x2f4>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f47f ae96 	bne.w	8002884 <HAL_GPIO_Init+0x14>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	372c      	adds	r7, #44	@ 0x2c
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	807b      	strh	r3, [r7, #2]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba6:	787b      	ldrb	r3, [r7, #1]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bac:	887a      	ldrh	r2, [r7, #2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bb2:	e003      	b.n	8002bbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	041a      	lsls	r2, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	611a      	str	r2, [r3, #16]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd8:	887a      	ldrh	r2, [r7, #2]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	041a      	lsls	r2, r3, #16
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	400b      	ands	r3, r1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e272      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c18:	4b92      	ldr	r3, [pc, #584]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d00c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c24:	4b8f      	ldr	r3, [pc, #572]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d112      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5e>
 8002c30:	4b8c      	ldr	r3, [pc, #560]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c3c:	d10b      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3e:	4b89      	ldr	r3, [pc, #548]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d06c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x12c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d168      	bne.n	8002d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e24c      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x76>
 8002c60:	4b80      	ldr	r3, [pc, #512]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7f      	ldr	r2, [pc, #508]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	e02e      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x98>
 8002c76:	4b7b      	ldr	r3, [pc, #492]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b78      	ldr	r3, [pc, #480]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a77      	ldr	r2, [pc, #476]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xbc>
 8002c9a:	4b72      	ldr	r3, [pc, #456]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a71      	ldr	r2, [pc, #452]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6e      	ldr	r2, [pc, #440]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xd4>
 8002cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a67      	ldr	r2, [pc, #412]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fcb4 	bl	8002640 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fcb0 	bl	8002640 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e200      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b5d      	ldr	r3, [pc, #372]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe4>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fca0 	bl	8002640 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7ff fc9c 	bl	8002640 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1ec      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x10c>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d32:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d3e:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x18c>
 8002d4a:	4b46      	ldr	r3, [pc, #280]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d116      	bne.n	8002d84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	4b43      	ldr	r3, [pc, #268]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x176>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e1c0      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4939      	ldr	r1, [pc, #228]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	e03a      	b.n	8002dfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8c:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fc55 	bl	8002640 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7ff fc51 	bl	8002640 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1a1      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	4b2d      	ldr	r3, [pc, #180]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4927      	ldr	r1, [pc, #156]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b26      	ldr	r3, [pc, #152]	@ (8002e68 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fc34 	bl	8002640 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7ff fc30 	bl	8002640 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e180      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03a      	beq.n	8002e7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d019      	beq.n	8002e42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e14:	f7ff fc14 	bl	8002640 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7ff fc10 	bl	8002640 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e160      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f000 fa9c 	bl	8003378 <RCC_Delay>
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7ff fbfa 	bl	8002640 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4e:	e00f      	b.n	8002e70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e50:	f7ff fbf6 	bl	8002640 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d908      	bls.n	8002e70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e146      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	42420000 	.word	0x42420000
 8002e6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b92      	ldr	r3, [pc, #584]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e9      	bne.n	8002e50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a6 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a87      	ldr	r2, [pc, #540]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b82      	ldr	r3, [pc, #520]	@ (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7ff fbb7 	bl	8002640 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7ff fbb3 	bl	8002640 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	@ 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e103      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b75      	ldr	r3, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x4c8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x312>
 8002efc:	4b6f      	ldr	r3, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e02d      	b.n	8002f66 <HAL_RCC_OscConfig+0x36e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x334>
 8002f12:	4b6a      	ldr	r3, [pc, #424]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a69      	ldr	r2, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	4b67      	ldr	r3, [pc, #412]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a66      	ldr	r2, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6213      	str	r3, [r2, #32]
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCC_OscConfig+0x36e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x356>
 8002f34:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a60      	ldr	r2, [pc, #384]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	4b5e      	ldr	r3, [pc, #376]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4a5d      	ldr	r2, [pc, #372]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6213      	str	r3, [r2, #32]
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x36e>
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a5a      	ldr	r2, [pc, #360]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6213      	str	r3, [r2, #32]
 8002f5a:	4b58      	ldr	r3, [pc, #352]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a57      	ldr	r2, [pc, #348]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7ff fb67 	bl	8002640 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7ff fb63 	bl	8002640 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0b1      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCC_OscConfig+0x37e>
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7ff fb51 	bl	8002640 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7ff fb4d 	bl	8002640 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e09b      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	4b40      	ldr	r3, [pc, #256]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b3c      	ldr	r3, [pc, #240]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4a3b      	ldr	r2, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8087 	beq.w	80030ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe0:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d061      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d146      	bne.n	8003082 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b33      	ldr	r3, [pc, #204]	@ (80030c4 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7ff fb21 	bl	8002640 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7ff fb1d 	bl	8002640 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e06d      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003014:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003028:	d108      	bne.n	800303c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4921      	ldr	r1, [pc, #132]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303c:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a19      	ldr	r1, [r3, #32]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	430b      	orrs	r3, r1
 800304e:	491b      	ldr	r1, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff faf1 	bl	8002640 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff faed 	bl	8002640 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e03d      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x46a>
 8003080:	e035      	b.n	80030ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_OscConfig+0x4cc>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fada 	bl	8002640 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7ff fad6 	bl	8002640 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e026      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x498>
 80030ae:	e01e      	b.n	80030ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e019      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_OscConfig+0x500>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b6a      	ldr	r3, [pc, #424]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b67      	ldr	r3, [pc, #412]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4965      	ldr	r1, [pc, #404]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a58      	ldr	r2, [pc, #352]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a52      	ldr	r2, [pc, #328]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800317a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e073      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3d      	ldr	r3, [pc, #244]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4936      	ldr	r1, [pc, #216]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7ff fa28 	bl	8002640 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7ff fa24 	bl	8002640 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e053      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2d      	ldr	r3, [pc, #180]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b27      	ldr	r3, [pc, #156]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d210      	bcs.n	800324c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4922      	ldr	r1, [pc, #136]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003276:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	@ (80032c8 <HAL_RCC_ClockConfig+0x1cc>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_ClockConfig+0x1d0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f986 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08003cd8 	.word	0x08003cd8
 80032c8:	20000064 	.word	0x20000064
 80032cc:	20000068 	.word	0x20000068

080032d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x94>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x30>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x36>
 80032fe:	e027      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x98>)
 8003302:	613b      	str	r3, [r7, #16]
      break;
 8003304:	e027      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0c9b      	lsrs	r3, r3, #18
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	4a17      	ldr	r2, [pc, #92]	@ (800336c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003310:	5cd3      	ldrb	r3, [r2, r3]
 8003312:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331e:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x94>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	0c5b      	lsrs	r3, r3, #17
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	4a11      	ldr	r2, [pc, #68]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xa0>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x98>)
 8003332:	fb03 f202 	mul.w	r2, r3, r2
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e004      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	613b      	str	r3, [r7, #16]
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x98>)
 8003352:	613b      	str	r3, [r7, #16]
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	693b      	ldr	r3, [r7, #16]
}
 8003358:	4618      	mov	r0, r3
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	007a1200 	.word	0x007a1200
 800336c:	08003ce8 	.word	0x08003ce8
 8003370:	08003cf8 	.word	0x08003cf8
 8003374:	003d0900 	.word	0x003d0900

08003378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <RCC_Delay+0x34>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <RCC_Delay+0x38>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0a5b      	lsrs	r3, r3, #9
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003394:	bf00      	nop
  }
  while (Delay --);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	60fa      	str	r2, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f9      	bne.n	8003394 <RCC_Delay+0x1c>
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	20000064 	.word	0x20000064
 80033b0:	10624dd3 	.word	0x10624dd3

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e041      	b.n	800344a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff f852 	bl	8002484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 fa56 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e035      	b.n	80034d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <HAL_TIM_Base_Start_IT+0x90>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x4e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003496:	d004      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x4e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <HAL_TIM_Base_Start_IT+0x94>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d111      	bne.n	80034c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d010      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c4:	e007      	b.n	80034d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400

080034ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d020      	beq.n	8003550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0202 	mvn.w	r2, #2
 8003520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f998 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f98b 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f99a 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d020      	beq.n	800359c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0204 	mvn.w	r2, #4
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f972 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f965 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f974 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0208 	mvn.w	r2, #8
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2204      	movs	r2, #4
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f94c 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f93f 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f94e 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0210 	mvn.w	r2, #16
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2208      	movs	r2, #8
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f926 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f919 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f928 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0201 	mvn.w	r2, #1
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fdb8 	bl	80021c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa6f 	bl	8003b5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8f8 	bl	8003890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa42 	bl	8003b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b4      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003720:	d03e      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003726:	f200 8087 	bhi.w	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	f000 8086 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x172>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003736:	d87f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d01a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xa6>
 800373c:	2b70      	cmp	r3, #112	@ 0x70
 800373e:	d87b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d050      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003744:	2b60      	cmp	r3, #96	@ 0x60
 8003746:	d877      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d03c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xfa>
 800374c:	2b50      	cmp	r3, #80	@ 0x50
 800374e:	d873      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d058      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x13a>
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d86f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d064      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b30      	cmp	r3, #48	@ 0x30
 800375e:	d86b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d060      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d867      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d05a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	e062      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	f000 f96a 	bl	8003a5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
      break;
 800379e:	e04f      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	f000 f953 	bl	8003a5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e03c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 f8ca 	bl	800396c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2150      	movs	r1, #80	@ 0x50
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f921 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 80037e4:	e02c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 f8e8 	bl	80039c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2160      	movs	r1, #96	@ 0x60
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f911 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 8003804:	e01c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	461a      	mov	r2, r3
 8003814:	f000 f8aa 	bl	800396c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2140      	movs	r1, #64	@ 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f901 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 8003824:	e00c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 f8f8 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 8003836:	e003      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
	...

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003964 <TIM_Base_SetConfig+0xc0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <TIM_Base_SetConfig+0x28>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0x28>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a28      	ldr	r2, [pc, #160]	@ (8003968 <TIM_Base_SetConfig+0xc4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d108      	bne.n	80038de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a20      	ldr	r2, [pc, #128]	@ (8003964 <TIM_Base_SetConfig+0xc0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0x52>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0x52>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <TIM_Base_SetConfig+0xc4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0d      	ldr	r2, [pc, #52]	@ (8003964 <TIM_Base_SetConfig+0xc0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d103      	bne.n	800393c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]
  }
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400

0800396c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 030a 	bic.w	r3, r3, #10
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f023 0210 	bic.w	r2, r3, #16
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	031b      	lsls	r3, r3, #12
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f043 0307 	orr.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	609a      	str	r2, [r3, #8]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e041      	b.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afc:	d004      	beq.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a10      	ldr	r2, [pc, #64]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10c      	bne.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400

08003b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <memset>:
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4402      	add	r2, r0
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <__libc_init_array>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	2600      	movs	r6, #0
 8003b80:	4d0c      	ldr	r5, [pc, #48]	@ (8003bb4 <__libc_init_array+0x38>)
 8003b82:	4c0d      	ldr	r4, [pc, #52]	@ (8003bb8 <__libc_init_array+0x3c>)
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	42a6      	cmp	r6, r4
 8003b8a:	d109      	bne.n	8003ba0 <__libc_init_array+0x24>
 8003b8c:	f000 f898 	bl	8003cc0 <_init>
 8003b90:	2600      	movs	r6, #0
 8003b92:	4d0a      	ldr	r5, [pc, #40]	@ (8003bbc <__libc_init_array+0x40>)
 8003b94:	4c0a      	ldr	r4, [pc, #40]	@ (8003bc0 <__libc_init_array+0x44>)
 8003b96:	1b64      	subs	r4, r4, r5
 8003b98:	10a4      	asrs	r4, r4, #2
 8003b9a:	42a6      	cmp	r6, r4
 8003b9c:	d105      	bne.n	8003baa <__libc_init_array+0x2e>
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba4:	4798      	blx	r3
 8003ba6:	3601      	adds	r6, #1
 8003ba8:	e7ee      	b.n	8003b88 <__libc_init_array+0xc>
 8003baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bae:	4798      	blx	r3
 8003bb0:	3601      	adds	r6, #1
 8003bb2:	e7f2      	b.n	8003b9a <__libc_init_array+0x1e>
 8003bb4:	08003cfc 	.word	0x08003cfc
 8003bb8:	08003cfc 	.word	0x08003cfc
 8003bbc:	08003cfc 	.word	0x08003cfc
 8003bc0:	08003d00 	.word	0x08003d00
 8003bc4:	00000000 	.word	0x00000000

08003bc8 <ceil>:
 8003bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bcc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003bd0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003bd4:	2e13      	cmp	r6, #19
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	460c      	mov	r4, r1
 8003bdc:	4605      	mov	r5, r0
 8003bde:	4680      	mov	r8, r0
 8003be0:	dc2f      	bgt.n	8003c42 <ceil+0x7a>
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	da11      	bge.n	8003c0a <ceil+0x42>
 8003be6:	a332      	add	r3, pc, #200	@ (adr r3, 8003cb0 <ceil+0xe8>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fab6 	bl	800015c <__adddf3>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f7fc fef8 	bl	80009e8 <__aeabi_dcmpgt>
 8003bf8:	b120      	cbz	r0, 8003c04 <ceil+0x3c>
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	db51      	blt.n	8003ca2 <ceil+0xda>
 8003bfe:	4325      	orrs	r5, r4
 8003c00:	d153      	bne.n	8003caa <ceil+0xe2>
 8003c02:	462c      	mov	r4, r5
 8003c04:	4623      	mov	r3, r4
 8003c06:	462a      	mov	r2, r5
 8003c08:	e024      	b.n	8003c54 <ceil+0x8c>
 8003c0a:	4f2b      	ldr	r7, [pc, #172]	@ (8003cb8 <ceil+0xf0>)
 8003c0c:	4137      	asrs	r7, r6
 8003c0e:	ea01 0c07 	and.w	ip, r1, r7
 8003c12:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003c16:	d01d      	beq.n	8003c54 <ceil+0x8c>
 8003c18:	a325      	add	r3, pc, #148	@ (adr r3, 8003cb0 <ceil+0xe8>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f7fc fa9d 	bl	800015c <__adddf3>
 8003c22:	2200      	movs	r2, #0
 8003c24:	2300      	movs	r3, #0
 8003c26:	f7fc fedf 	bl	80009e8 <__aeabi_dcmpgt>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d0ea      	beq.n	8003c04 <ceil+0x3c>
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	bfc2      	ittt	gt
 8003c32:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8003c36:	4133      	asrgt	r3, r6
 8003c38:	18e4      	addgt	r4, r4, r3
 8003c3a:	2500      	movs	r5, #0
 8003c3c:	ea24 0407 	bic.w	r4, r4, r7
 8003c40:	e7e0      	b.n	8003c04 <ceil+0x3c>
 8003c42:	2e33      	cmp	r6, #51	@ 0x33
 8003c44:	dd0a      	ble.n	8003c5c <ceil+0x94>
 8003c46:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003c4a:	d103      	bne.n	8003c54 <ceil+0x8c>
 8003c4c:	f7fc fa86 	bl	800015c <__adddf3>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5c:	f04f 3cff 	mov.w	ip, #4294967295
 8003c60:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003c64:	fa2c f707 	lsr.w	r7, ip, r7
 8003c68:	4238      	tst	r0, r7
 8003c6a:	d0f3      	beq.n	8003c54 <ceil+0x8c>
 8003c6c:	a310      	add	r3, pc, #64	@ (adr r3, 8003cb0 <ceil+0xe8>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fa73 	bl	800015c <__adddf3>
 8003c76:	2200      	movs	r2, #0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f7fc feb5 	bl	80009e8 <__aeabi_dcmpgt>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d0c0      	beq.n	8003c04 <ceil+0x3c>
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	dd0a      	ble.n	8003c9c <ceil+0xd4>
 8003c86:	2e14      	cmp	r6, #20
 8003c88:	d101      	bne.n	8003c8e <ceil+0xc6>
 8003c8a:	3401      	adds	r4, #1
 8003c8c:	e006      	b.n	8003c9c <ceil+0xd4>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003c94:	40b3      	lsls	r3, r6
 8003c96:	441d      	add	r5, r3
 8003c98:	45a8      	cmp	r8, r5
 8003c9a:	d8f6      	bhi.n	8003c8a <ceil+0xc2>
 8003c9c:	ea25 0507 	bic.w	r5, r5, r7
 8003ca0:	e7b0      	b.n	8003c04 <ceil+0x3c>
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003ca8:	e7ac      	b.n	8003c04 <ceil+0x3c>
 8003caa:	2500      	movs	r5, #0
 8003cac:	4c03      	ldr	r4, [pc, #12]	@ (8003cbc <ceil+0xf4>)
 8003cae:	e7a9      	b.n	8003c04 <ceil+0x3c>
 8003cb0:	8800759c 	.word	0x8800759c
 8003cb4:	7e37e43c 	.word	0x7e37e43c
 8003cb8:	000fffff 	.word	0x000fffff
 8003cbc:	3ff00000 	.word	0x3ff00000

08003cc0 <_init>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

08003ccc <_fini>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr
