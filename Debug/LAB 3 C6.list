
LAB 3 C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003374  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003480  08003480  00004480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a4  080034a4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080034a4  080034a4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034a4  080034a4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a4  080034a4  000044a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034a8  080034a8  000044a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080034ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000068  08003514  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003514  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089a9  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2b  00000000  00000000  0000da3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0000f668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d91  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d064  00000000  00000000  00027689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828f0  00000000  00000000  000346ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000b7020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b99c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003468 	.word	0x08003468

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003468 	.word	0x08003468

0800014c <display7SEG>:
    HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
}

  void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	f2c0 819c 	blt.w	8000494 <display7SEG+0x348>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b09      	cmp	r3, #9
 8000160:	f300 8198 	bgt.w	8000494 <display7SEG+0x348>
    switch (num) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b09      	cmp	r3, #9
 8000168:	f200 8196 	bhi.w	8000498 <display7SEG+0x34c>
 800016c:	a201      	add	r2, pc, #4	@ (adr r2, 8000174 <display7SEG+0x28>)
 800016e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000172:	bf00      	nop
 8000174:	0800019d 	.word	0x0800019d
 8000178:	080001e9 	.word	0x080001e9
 800017c:	08000235 	.word	0x08000235
 8000180:	08000281 	.word	0x08000281
 8000184:	080002cd 	.word	0x080002cd
 8000188:	08000319 	.word	0x08000319
 800018c:	08000365 	.word	0x08000365
 8000190:	080003b1 	.word	0x080003b1
 8000194:	080003fd 	.word	0x080003fd
 8000198:	08000449 	.word	0x08000449
        case 0:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2101      	movs	r1, #1
 80001a0:	48bf      	ldr	r0, [pc, #764]	@ (80004a0 <display7SEG+0x354>)
 80001a2:	f002 f94a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2102      	movs	r1, #2
 80001aa:	48bd      	ldr	r0, [pc, #756]	@ (80004a0 <display7SEG+0x354>)
 80001ac:	f002 f945 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2104      	movs	r1, #4
 80001b4:	48ba      	ldr	r0, [pc, #744]	@ (80004a0 <display7SEG+0x354>)
 80001b6:	f002 f940 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2108      	movs	r1, #8
 80001be:	48b8      	ldr	r0, [pc, #736]	@ (80004a0 <display7SEG+0x354>)
 80001c0:	f002 f93b 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2110      	movs	r1, #16
 80001c8:	48b5      	ldr	r0, [pc, #724]	@ (80004a0 <display7SEG+0x354>)
 80001ca:	f002 f936 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d4:	48b2      	ldr	r0, [pc, #712]	@ (80004a0 <display7SEG+0x354>)
 80001d6:	f002 f930 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e0:	48af      	ldr	r0, [pc, #700]	@ (80004a0 <display7SEG+0x354>)
 80001e2:	f002 f92a 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80001e6:	e158      	b.n	800049a <display7SEG+0x34e>
        case 1:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2101      	movs	r1, #1
 80001ec:	48ac      	ldr	r0, [pc, #688]	@ (80004a0 <display7SEG+0x354>)
 80001ee:	f002 f924 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2102      	movs	r1, #2
 80001f6:	48aa      	ldr	r0, [pc, #680]	@ (80004a0 <display7SEG+0x354>)
 80001f8:	f002 f91f 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	48a7      	ldr	r0, [pc, #668]	@ (80004a0 <display7SEG+0x354>)
 8000202:	f002 f91a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2108      	movs	r1, #8
 800020a:	48a5      	ldr	r0, [pc, #660]	@ (80004a0 <display7SEG+0x354>)
 800020c:	f002 f915 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2110      	movs	r1, #16
 8000214:	48a2      	ldr	r0, [pc, #648]	@ (80004a0 <display7SEG+0x354>)
 8000216:	f002 f910 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000220:	489f      	ldr	r0, [pc, #636]	@ (80004a0 <display7SEG+0x354>)
 8000222:	f002 f90a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022c:	489c      	ldr	r0, [pc, #624]	@ (80004a0 <display7SEG+0x354>)
 800022e:	f002 f904 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000232:	e132      	b.n	800049a <display7SEG+0x34e>
        case 2:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	2101      	movs	r1, #1
 8000238:	4899      	ldr	r0, [pc, #612]	@ (80004a0 <display7SEG+0x354>)
 800023a:	f002 f8fe 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2102      	movs	r1, #2
 8000242:	4897      	ldr	r0, [pc, #604]	@ (80004a0 <display7SEG+0x354>)
 8000244:	f002 f8f9 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2104      	movs	r1, #4
 800024c:	4894      	ldr	r0, [pc, #592]	@ (80004a0 <display7SEG+0x354>)
 800024e:	f002 f8f4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2108      	movs	r1, #8
 8000256:	4892      	ldr	r0, [pc, #584]	@ (80004a0 <display7SEG+0x354>)
 8000258:	f002 f8ef 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2110      	movs	r1, #16
 8000260:	488f      	ldr	r0, [pc, #572]	@ (80004a0 <display7SEG+0x354>)
 8000262:	f002 f8ea 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800026c:	488c      	ldr	r0, [pc, #560]	@ (80004a0 <display7SEG+0x354>)
 800026e:	f002 f8e4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000278:	4889      	ldr	r0, [pc, #548]	@ (80004a0 <display7SEG+0x354>)
 800027a:	f002 f8de 	bl	800243a <HAL_GPIO_WritePin>
            break;
 800027e:	e10c      	b.n	800049a <display7SEG+0x34e>
        case 3:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2101      	movs	r1, #1
 8000284:	4886      	ldr	r0, [pc, #536]	@ (80004a0 <display7SEG+0x354>)
 8000286:	f002 f8d8 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	4884      	ldr	r0, [pc, #528]	@ (80004a0 <display7SEG+0x354>)
 8000290:	f002 f8d3 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2104      	movs	r1, #4
 8000298:	4881      	ldr	r0, [pc, #516]	@ (80004a0 <display7SEG+0x354>)
 800029a:	f002 f8ce 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2108      	movs	r1, #8
 80002a2:	487f      	ldr	r0, [pc, #508]	@ (80004a0 <display7SEG+0x354>)
 80002a4:	f002 f8c9 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	487c      	ldr	r0, [pc, #496]	@ (80004a0 <display7SEG+0x354>)
 80002ae:	f002 f8c4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b8:	4879      	ldr	r0, [pc, #484]	@ (80004a0 <display7SEG+0x354>)
 80002ba:	f002 f8be 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002c4:	4876      	ldr	r0, [pc, #472]	@ (80004a0 <display7SEG+0x354>)
 80002c6:	f002 f8b8 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80002ca:	e0e6      	b.n	800049a <display7SEG+0x34e>
        case 4:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4873      	ldr	r0, [pc, #460]	@ (80004a0 <display7SEG+0x354>)
 80002d2:	f002 f8b2 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2102      	movs	r1, #2
 80002da:	4871      	ldr	r0, [pc, #452]	@ (80004a0 <display7SEG+0x354>)
 80002dc:	f002 f8ad 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2104      	movs	r1, #4
 80002e4:	486e      	ldr	r0, [pc, #440]	@ (80004a0 <display7SEG+0x354>)
 80002e6:	f002 f8a8 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	486c      	ldr	r0, [pc, #432]	@ (80004a0 <display7SEG+0x354>)
 80002f0:	f002 f8a3 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2110      	movs	r1, #16
 80002f8:	4869      	ldr	r0, [pc, #420]	@ (80004a0 <display7SEG+0x354>)
 80002fa:	f002 f89e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000304:	4866      	ldr	r0, [pc, #408]	@ (80004a0 <display7SEG+0x354>)
 8000306:	f002 f898 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000310:	4863      	ldr	r0, [pc, #396]	@ (80004a0 <display7SEG+0x354>)
 8000312:	f002 f892 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000316:	e0c0      	b.n	800049a <display7SEG+0x34e>
        case 5:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	4860      	ldr	r0, [pc, #384]	@ (80004a0 <display7SEG+0x354>)
 800031e:	f002 f88c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2102      	movs	r1, #2
 8000326:	485e      	ldr	r0, [pc, #376]	@ (80004a0 <display7SEG+0x354>)
 8000328:	f002 f887 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	485b      	ldr	r0, [pc, #364]	@ (80004a0 <display7SEG+0x354>)
 8000332:	f002 f882 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2108      	movs	r1, #8
 800033a:	4859      	ldr	r0, [pc, #356]	@ (80004a0 <display7SEG+0x354>)
 800033c:	f002 f87d 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	4856      	ldr	r0, [pc, #344]	@ (80004a0 <display7SEG+0x354>)
 8000346:	f002 f878 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000350:	4853      	ldr	r0, [pc, #332]	@ (80004a0 <display7SEG+0x354>)
 8000352:	f002 f872 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800035c:	4850      	ldr	r0, [pc, #320]	@ (80004a0 <display7SEG+0x354>)
 800035e:	f002 f86c 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000362:	e09a      	b.n	800049a <display7SEG+0x34e>
        case 6:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2101      	movs	r1, #1
 8000368:	484d      	ldr	r0, [pc, #308]	@ (80004a0 <display7SEG+0x354>)
 800036a:	f002 f866 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2102      	movs	r1, #2
 8000372:	484b      	ldr	r0, [pc, #300]	@ (80004a0 <display7SEG+0x354>)
 8000374:	f002 f861 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2104      	movs	r1, #4
 800037c:	4848      	ldr	r0, [pc, #288]	@ (80004a0 <display7SEG+0x354>)
 800037e:	f002 f85c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2108      	movs	r1, #8
 8000386:	4846      	ldr	r0, [pc, #280]	@ (80004a0 <display7SEG+0x354>)
 8000388:	f002 f857 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2110      	movs	r1, #16
 8000390:	4843      	ldr	r0, [pc, #268]	@ (80004a0 <display7SEG+0x354>)
 8000392:	f002 f852 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800039c:	4840      	ldr	r0, [pc, #256]	@ (80004a0 <display7SEG+0x354>)
 800039e:	f002 f84c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003a8:	483d      	ldr	r0, [pc, #244]	@ (80004a0 <display7SEG+0x354>)
 80003aa:	f002 f846 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80003ae:	e074      	b.n	800049a <display7SEG+0x34e>
        case 7:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2101      	movs	r1, #1
 80003b4:	483a      	ldr	r0, [pc, #232]	@ (80004a0 <display7SEG+0x354>)
 80003b6:	f002 f840 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2102      	movs	r1, #2
 80003be:	4838      	ldr	r0, [pc, #224]	@ (80004a0 <display7SEG+0x354>)
 80003c0:	f002 f83b 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2104      	movs	r1, #4
 80003c8:	4835      	ldr	r0, [pc, #212]	@ (80004a0 <display7SEG+0x354>)
 80003ca:	f002 f836 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2108      	movs	r1, #8
 80003d2:	4833      	ldr	r0, [pc, #204]	@ (80004a0 <display7SEG+0x354>)
 80003d4:	f002 f831 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2110      	movs	r1, #16
 80003dc:	4830      	ldr	r0, [pc, #192]	@ (80004a0 <display7SEG+0x354>)
 80003de:	f002 f82c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003e8:	482d      	ldr	r0, [pc, #180]	@ (80004a0 <display7SEG+0x354>)
 80003ea:	f002 f826 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003f4:	482a      	ldr	r0, [pc, #168]	@ (80004a0 <display7SEG+0x354>)
 80003f6:	f002 f820 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80003fa:	e04e      	b.n	800049a <display7SEG+0x34e>
        case 8:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2101      	movs	r1, #1
 8000400:	4827      	ldr	r0, [pc, #156]	@ (80004a0 <display7SEG+0x354>)
 8000402:	f002 f81a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2102      	movs	r1, #2
 800040a:	4825      	ldr	r0, [pc, #148]	@ (80004a0 <display7SEG+0x354>)
 800040c:	f002 f815 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	4822      	ldr	r0, [pc, #136]	@ (80004a0 <display7SEG+0x354>)
 8000416:	f002 f810 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	4820      	ldr	r0, [pc, #128]	@ (80004a0 <display7SEG+0x354>)
 8000420:	f002 f80b 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	481d      	ldr	r0, [pc, #116]	@ (80004a0 <display7SEG+0x354>)
 800042a:	f002 f806 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000434:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <display7SEG+0x354>)
 8000436:	f002 f800 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000440:	4817      	ldr	r0, [pc, #92]	@ (80004a0 <display7SEG+0x354>)
 8000442:	f001 fffa 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000446:	e028      	b.n	800049a <display7SEG+0x34e>
        case 9:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2101      	movs	r1, #1
 800044c:	4814      	ldr	r0, [pc, #80]	@ (80004a0 <display7SEG+0x354>)
 800044e:	f001 fff4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	4812      	ldr	r0, [pc, #72]	@ (80004a0 <display7SEG+0x354>)
 8000458:	f001 ffef 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2104      	movs	r1, #4
 8000460:	480f      	ldr	r0, [pc, #60]	@ (80004a0 <display7SEG+0x354>)
 8000462:	f001 ffea 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2108      	movs	r1, #8
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <display7SEG+0x354>)
 800046c:	f001 ffe5 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	480a      	ldr	r0, [pc, #40]	@ (80004a0 <display7SEG+0x354>)
 8000476:	f001 ffe0 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000480:	4807      	ldr	r0, [pc, #28]	@ (80004a0 <display7SEG+0x354>)
 8000482:	f001 ffda 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <display7SEG+0x354>)
 800048e:	f001 ffd4 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000492:	e002      	b.n	800049a <display7SEG+0x34e>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000494:	bf00      	nop
 8000496:	e000      	b.n	800049a <display7SEG+0x34e>
        default:
            // Handle invalid input
            break;
 8000498:	bf00      	nop
    }
  }
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010800 	.word	0x40010800

080004a4 <display7SEG2>:

  void display7SEG2(int num) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	f2c0 81b0 	blt.w	8000814 <display7SEG2+0x370>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b09      	cmp	r3, #9
 80004b8:	f300 81ac 	bgt.w	8000814 <display7SEG2+0x370>
    switch (num) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b09      	cmp	r3, #9
 80004c0:	f200 81aa 	bhi.w	8000818 <display7SEG2+0x374>
 80004c4:	a201      	add	r2, pc, #4	@ (adr r2, 80004cc <display7SEG2+0x28>)
 80004c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ca:	bf00      	nop
 80004cc:	080004f5 	.word	0x080004f5
 80004d0:	08000545 	.word	0x08000545
 80004d4:	08000595 	.word	0x08000595
 80004d8:	080005e5 	.word	0x080005e5
 80004dc:	08000635 	.word	0x08000635
 80004e0:	08000685 	.word	0x08000685
 80004e4:	080006d5 	.word	0x080006d5
 80004e8:	08000725 	.word	0x08000725
 80004ec:	08000775 	.word	0x08000775
 80004f0:	080007c5 	.word	0x080007c5
        case 0:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	48c9      	ldr	r0, [pc, #804]	@ (8000820 <display7SEG2+0x37c>)
 80004fa:	f001 ff9e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	@ 0x40
 8000502:	48c7      	ldr	r0, [pc, #796]	@ (8000820 <display7SEG2+0x37c>)
 8000504:	f001 ff99 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	@ 0x80
 800050c:	48c4      	ldr	r0, [pc, #784]	@ (8000820 <display7SEG2+0x37c>)
 800050e:	f001 ff94 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000518:	48c1      	ldr	r0, [pc, #772]	@ (8000820 <display7SEG2+0x37c>)
 800051a:	f001 ff8e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000524:	48be      	ldr	r0, [pc, #760]	@ (8000820 <display7SEG2+0x37c>)
 8000526:	f001 ff88 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000530:	48bb      	ldr	r0, [pc, #748]	@ (8000820 <display7SEG2+0x37c>)
 8000532:	f001 ff82 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053c:	48b8      	ldr	r0, [pc, #736]	@ (8000820 <display7SEG2+0x37c>)
 800053e:	f001 ff7c 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000542:	e16a      	b.n	800081a <display7SEG2+0x376>
        case 1:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	48b5      	ldr	r0, [pc, #724]	@ (8000820 <display7SEG2+0x37c>)
 800054a:	f001 ff76 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	48b3      	ldr	r0, [pc, #716]	@ (8000820 <display7SEG2+0x37c>)
 8000554:	f001 ff71 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2180      	movs	r1, #128	@ 0x80
 800055c:	48b0      	ldr	r0, [pc, #704]	@ (8000820 <display7SEG2+0x37c>)
 800055e:	f001 ff6c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000568:	48ad      	ldr	r0, [pc, #692]	@ (8000820 <display7SEG2+0x37c>)
 800056a:	f001 ff66 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000574:	48aa      	ldr	r0, [pc, #680]	@ (8000820 <display7SEG2+0x37c>)
 8000576:	f001 ff60 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000580:	48a7      	ldr	r0, [pc, #668]	@ (8000820 <display7SEG2+0x37c>)
 8000582:	f001 ff5a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058c:	48a4      	ldr	r0, [pc, #656]	@ (8000820 <display7SEG2+0x37c>)
 800058e:	f001 ff54 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000592:	e142      	b.n	800081a <display7SEG2+0x376>
        case 2:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2120      	movs	r1, #32
 8000598:	48a1      	ldr	r0, [pc, #644]	@ (8000820 <display7SEG2+0x37c>)
 800059a:	f001 ff4e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	@ 0x40
 80005a2:	489f      	ldr	r0, [pc, #636]	@ (8000820 <display7SEG2+0x37c>)
 80005a4:	f001 ff49 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	489c      	ldr	r0, [pc, #624]	@ (8000820 <display7SEG2+0x37c>)
 80005ae:	f001 ff44 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b8:	4899      	ldr	r0, [pc, #612]	@ (8000820 <display7SEG2+0x37c>)
 80005ba:	f001 ff3e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c4:	4896      	ldr	r0, [pc, #600]	@ (8000820 <display7SEG2+0x37c>)
 80005c6:	f001 ff38 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4893      	ldr	r0, [pc, #588]	@ (8000820 <display7SEG2+0x37c>)
 80005d2:	f001 ff32 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005dc:	4890      	ldr	r0, [pc, #576]	@ (8000820 <display7SEG2+0x37c>)
 80005de:	f001 ff2c 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80005e2:	e11a      	b.n	800081a <display7SEG2+0x376>
        case 3:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2120      	movs	r1, #32
 80005e8:	488d      	ldr	r0, [pc, #564]	@ (8000820 <display7SEG2+0x37c>)
 80005ea:	f001 ff26 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	@ 0x40
 80005f2:	488b      	ldr	r0, [pc, #556]	@ (8000820 <display7SEG2+0x37c>)
 80005f4:	f001 ff21 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	@ 0x80
 80005fc:	4888      	ldr	r0, [pc, #544]	@ (8000820 <display7SEG2+0x37c>)
 80005fe:	f001 ff1c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	4885      	ldr	r0, [pc, #532]	@ (8000820 <display7SEG2+0x37c>)
 800060a:	f001 ff16 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000614:	4882      	ldr	r0, [pc, #520]	@ (8000820 <display7SEG2+0x37c>)
 8000616:	f001 ff10 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000620:	487f      	ldr	r0, [pc, #508]	@ (8000820 <display7SEG2+0x37c>)
 8000622:	f001 ff0a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062c:	487c      	ldr	r0, [pc, #496]	@ (8000820 <display7SEG2+0x37c>)
 800062e:	f001 ff04 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000632:	e0f2      	b.n	800081a <display7SEG2+0x376>
        case 4:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	4879      	ldr	r0, [pc, #484]	@ (8000820 <display7SEG2+0x37c>)
 800063a:	f001 fefe 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	4877      	ldr	r0, [pc, #476]	@ (8000820 <display7SEG2+0x37c>)
 8000644:	f001 fef9 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	4874      	ldr	r0, [pc, #464]	@ (8000820 <display7SEG2+0x37c>)
 800064e:	f001 fef4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000658:	4871      	ldr	r0, [pc, #452]	@ (8000820 <display7SEG2+0x37c>)
 800065a:	f001 feee 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000664:	486e      	ldr	r0, [pc, #440]	@ (8000820 <display7SEG2+0x37c>)
 8000666:	f001 fee8 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000670:	486b      	ldr	r0, [pc, #428]	@ (8000820 <display7SEG2+0x37c>)
 8000672:	f001 fee2 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800067c:	4868      	ldr	r0, [pc, #416]	@ (8000820 <display7SEG2+0x37c>)
 800067e:	f001 fedc 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000682:	e0ca      	b.n	800081a <display7SEG2+0x376>
        case 5:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2120      	movs	r1, #32
 8000688:	4865      	ldr	r0, [pc, #404]	@ (8000820 <display7SEG2+0x37c>)
 800068a:	f001 fed6 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2140      	movs	r1, #64	@ 0x40
 8000692:	4863      	ldr	r0, [pc, #396]	@ (8000820 <display7SEG2+0x37c>)
 8000694:	f001 fed1 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	4860      	ldr	r0, [pc, #384]	@ (8000820 <display7SEG2+0x37c>)
 800069e:	f001 fecc 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a8:	485d      	ldr	r0, [pc, #372]	@ (8000820 <display7SEG2+0x37c>)
 80006aa:	f001 fec6 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b4:	485a      	ldr	r0, [pc, #360]	@ (8000820 <display7SEG2+0x37c>)
 80006b6:	f001 fec0 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	@ (8000820 <display7SEG2+0x37c>)
 80006c2:	f001 feba 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006cc:	4854      	ldr	r0, [pc, #336]	@ (8000820 <display7SEG2+0x37c>)
 80006ce:	f001 feb4 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80006d2:	e0a2      	b.n	800081a <display7SEG2+0x376>
        case 6:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	4851      	ldr	r0, [pc, #324]	@ (8000820 <display7SEG2+0x37c>)
 80006da:	f001 feae 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	484f      	ldr	r0, [pc, #316]	@ (8000820 <display7SEG2+0x37c>)
 80006e4:	f001 fea9 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	484c      	ldr	r0, [pc, #304]	@ (8000820 <display7SEG2+0x37c>)
 80006ee:	f001 fea4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f8:	4849      	ldr	r0, [pc, #292]	@ (8000820 <display7SEG2+0x37c>)
 80006fa:	f001 fe9e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000704:	4846      	ldr	r0, [pc, #280]	@ (8000820 <display7SEG2+0x37c>)
 8000706:	f001 fe98 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000710:	4843      	ldr	r0, [pc, #268]	@ (8000820 <display7SEG2+0x37c>)
 8000712:	f001 fe92 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071c:	4840      	ldr	r0, [pc, #256]	@ (8000820 <display7SEG2+0x37c>)
 800071e:	f001 fe8c 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000722:	e07a      	b.n	800081a <display7SEG2+0x376>
        case 7:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	483d      	ldr	r0, [pc, #244]	@ (8000820 <display7SEG2+0x37c>)
 800072a:	f001 fe86 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2140      	movs	r1, #64	@ 0x40
 8000732:	483b      	ldr	r0, [pc, #236]	@ (8000820 <display7SEG2+0x37c>)
 8000734:	f001 fe81 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	4838      	ldr	r0, [pc, #224]	@ (8000820 <display7SEG2+0x37c>)
 800073e:	f001 fe7c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	4835      	ldr	r0, [pc, #212]	@ (8000820 <display7SEG2+0x37c>)
 800074a:	f001 fe76 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000754:	4832      	ldr	r0, [pc, #200]	@ (8000820 <display7SEG2+0x37c>)
 8000756:	f001 fe70 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000760:	482f      	ldr	r0, [pc, #188]	@ (8000820 <display7SEG2+0x37c>)
 8000762:	f001 fe6a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800076c:	482c      	ldr	r0, [pc, #176]	@ (8000820 <display7SEG2+0x37c>)
 800076e:	f001 fe64 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000772:	e052      	b.n	800081a <display7SEG2+0x376>
        case 8:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	4829      	ldr	r0, [pc, #164]	@ (8000820 <display7SEG2+0x37c>)
 800077a:	f001 fe5e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2140      	movs	r1, #64	@ 0x40
 8000782:	4827      	ldr	r0, [pc, #156]	@ (8000820 <display7SEG2+0x37c>)
 8000784:	f001 fe59 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	@ 0x80
 800078c:	4824      	ldr	r0, [pc, #144]	@ (8000820 <display7SEG2+0x37c>)
 800078e:	f001 fe54 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	4821      	ldr	r0, [pc, #132]	@ (8000820 <display7SEG2+0x37c>)
 800079a:	f001 fe4e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a4:	481e      	ldr	r0, [pc, #120]	@ (8000820 <display7SEG2+0x37c>)
 80007a6:	f001 fe48 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b0:	481b      	ldr	r0, [pc, #108]	@ (8000820 <display7SEG2+0x37c>)
 80007b2:	f001 fe42 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007bc:	4818      	ldr	r0, [pc, #96]	@ (8000820 <display7SEG2+0x37c>)
 80007be:	f001 fe3c 	bl	800243a <HAL_GPIO_WritePin>
            break;
 80007c2:	e02a      	b.n	800081a <display7SEG2+0x376>
        case 9:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2120      	movs	r1, #32
 80007c8:	4815      	ldr	r0, [pc, #84]	@ (8000820 <display7SEG2+0x37c>)
 80007ca:	f001 fe36 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	4813      	ldr	r0, [pc, #76]	@ (8000820 <display7SEG2+0x37c>)
 80007d4:	f001 fe31 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	4810      	ldr	r0, [pc, #64]	@ (8000820 <display7SEG2+0x37c>)
 80007de:	f001 fe2c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <display7SEG2+0x37c>)
 80007ea:	f001 fe26 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007f4:	480a      	ldr	r0, [pc, #40]	@ (8000820 <display7SEG2+0x37c>)
 80007f6:	f001 fe20 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <display7SEG2+0x37c>)
 8000802:	f001 fe1a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <display7SEG2+0x37c>)
 800080e:	f001 fe14 	bl	800243a <HAL_GPIO_WritePin>
            break;
 8000812:	e002      	b.n	800081a <display7SEG2+0x376>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <display7SEG2+0x376>
        default:
            // Handle invalid input
            break;
 8000818:	bf00      	nop
    }
  }
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010c00 	.word	0x40010c00

08000824 <display2DigitNumberWay1>:


void display2DigitNumberWay1(int number) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    static int digit = 0; // 0 for tens, 1 for units

    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db5b      	blt.n	80008ea <display2DigitNumberWay1+0xc6>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b63      	cmp	r3, #99	@ 0x63
 8000836:	dc58      	bgt.n	80008ea <display2DigitNumberWay1+0xc6>

    if (timer5_flag == 1) {
 8000838:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <display2DigitNumberWay1+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d155      	bne.n	80008ec <display2DigitNumberWay1+0xc8>
        setTimer5(100); // Reset the timer for multiplexing
 8000840:	2064      	movs	r0, #100	@ 0x64
 8000842:	f001 f9a7 	bl	8001b94 <setTimer5>

        if (number <= 9) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b09      	cmp	r3, #9
 800084a:	dc0f      	bgt.n	800086c <display2DigitNumberWay1+0x48>
            // For numbers less than or equal to 9, display the same number on both segments
            HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); // Enable first segment
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000852:	4829      	ldr	r0, [pc, #164]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 8000854:	f001 fdf1 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET); // Enable second segment (same digit)
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800085e:	4826      	ldr	r0, [pc, #152]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 8000860:	f001 fdeb 	bl	800243a <HAL_GPIO_WritePin>
            display7SEG(number); // Display the same number on both segments
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fc71 	bl	800014c <display7SEG>
 800086a:	e03f      	b.n	80008ec <display2DigitNumberWay1+0xc8>
        } else {
            if (digit == 0) {
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <display2DigitNumberWay1+0xd8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11a      	bne.n	80008aa <display2DigitNumberWay1+0x86>
                // Display tens digit
                int tens = number / 10; // Get the tens digit
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a22      	ldr	r2, [pc, #136]	@ (8000900 <display2DigitNumberWay1+0xdc>)
 8000878:	fb82 1203 	smull	r1, r2, r2, r3
 800087c:	1092      	asrs	r2, r2, #2
 800087e:	17db      	asrs	r3, r3, #31
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	60bb      	str	r3, [r7, #8]
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); // Enable tens
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088a:	481b      	ldr	r0, [pc, #108]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 800088c:	f001 fdd5 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_SET);   // Disable units
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000896:	4818      	ldr	r0, [pc, #96]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 8000898:	f001 fdcf 	bl	800243a <HAL_GPIO_WritePin>
                display7SEG(tens); // Display the tens digit on the 7-segment
 800089c:	68b8      	ldr	r0, [r7, #8]
 800089e:	f7ff fc55 	bl	800014c <display7SEG>
                digit = 1; // Switch to units digit next
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <display2DigitNumberWay1+0xd8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e020      	b.n	80008ec <display2DigitNumberWay1+0xc8>
            } else {
                // Display units digit
                int units = number % 10; // Get the units digit
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <display2DigitNumberWay1+0xdc>)
 80008ae:	fb83 1302 	smull	r1, r3, r3, r2
 80008b2:	1099      	asrs	r1, r3, #2
 80008b4:	17d3      	asrs	r3, r2, #31
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	60fb      	str	r3, [r7, #12]
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET); // Enable units
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 80008cc:	f001 fdb5 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_SET);   // Disable tens
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d6:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 80008d8:	f001 fdaf 	bl	800243a <HAL_GPIO_WritePin>
                display7SEG(units); // Display the units digit on the 7-segment
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fc35 	bl	800014c <display7SEG>
                digit = 0; // Switch to tens digit next
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <display2DigitNumberWay1+0xd8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e000      	b.n	80008ec <display2DigitNumberWay1+0xc8>
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 80008ea:	bf00      	nop
            }
        }
    }
}
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000124 	.word	0x20000124
 80008f8:	40010800 	.word	0x40010800
 80008fc:	20000084 	.word	0x20000084
 8000900:	66666667 	.word	0x66666667

08000904 <display2DigitNumberWay2>:


void display2DigitNumberWay2(int number) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    static int digit = 0; // 0 for tens, 1 for units

    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db5b      	blt.n	80009ca <display2DigitNumberWay2+0xc6>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b63      	cmp	r3, #99	@ 0x63
 8000916:	dc58      	bgt.n	80009ca <display2DigitNumberWay2+0xc6>

    if (timer4_flag == 1) {
 8000918:	4b2e      	ldr	r3, [pc, #184]	@ (80009d4 <display2DigitNumberWay2+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d155      	bne.n	80009cc <display2DigitNumberWay2+0xc8>
        setTimer4(100); // Reset the timer for multiplexing
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f001 f91d 	bl	8001b60 <setTimer4>
        if (number <= 9) {
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b09      	cmp	r3, #9
 800092a:	dc0f      	bgt.n	800094c <display2DigitNumberWay2+0x48>
            // For numbers less than or equal to 9, display the same number on both segments
            
            HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); // Enable first segment
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000932:	4829      	ldr	r0, [pc, #164]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 8000934:	f001 fd81 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET); // Enable second segment (same digit)
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800093e:	4826      	ldr	r0, [pc, #152]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 8000940:	f001 fd7b 	bl	800243a <HAL_GPIO_WritePin>
            display7SEG2(number); // Display the same number for both segments
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fdad 	bl	80004a4 <display7SEG2>
 800094a:	e03f      	b.n	80009cc <display2DigitNumberWay2+0xc8>
        } else {
            if (digit == 0) {
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <display2DigitNumberWay2+0xd8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d11a      	bne.n	800098a <display2DigitNumberWay2+0x86>
                // Display tens digit
                int tens = number / 10; // Get the tens digit
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <display2DigitNumberWay2+0xdc>)
 8000958:	fb82 1203 	smull	r1, r2, r2, r3
 800095c:	1092      	asrs	r2, r2, #2
 800095e:	17db      	asrs	r3, r3, #31
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	60bb      	str	r3, [r7, #8]
                
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); // Enable tens
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096a:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 800096c:	f001 fd65 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_SET);   // Disable units
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 8000978:	f001 fd5f 	bl	800243a <HAL_GPIO_WritePin>
                display7SEG2(tens); // Display the tens digit on the 7-segment
 800097c:	68b8      	ldr	r0, [r7, #8]
 800097e:	f7ff fd91 	bl	80004a4 <display7SEG2>
                digit = 1; // Switch to units digit next
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <display2DigitNumberWay2+0xd8>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e020      	b.n	80009cc <display2DigitNumberWay2+0xc8>
            } else {
                // Display units digit
                int units = number % 10; // Get the units digit
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <display2DigitNumberWay2+0xdc>)
 800098e:	fb83 1302 	smull	r1, r3, r3, r2
 8000992:	1099      	asrs	r1, r3, #2
 8000994:	17d3      	asrs	r3, r2, #31
 8000996:	1ac9      	subs	r1, r1, r3
 8000998:	460b      	mov	r3, r1
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	440b      	add	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	60fb      	str	r3, [r7, #12]

                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET); // Enable units
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 80009ac:	f001 fd45 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_SET);   // Disable tens
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 80009b8:	f001 fd3f 	bl	800243a <HAL_GPIO_WritePin>
                display7SEG2(units); // Display the units digit on the 7-segment
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fd71 	bl	80004a4 <display7SEG2>
                digit = 0; // Switch to tens digit next
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <display2DigitNumberWay2+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e000      	b.n	80009cc <display2DigitNumberWay2+0xc8>
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 80009ca:	bf00      	nop
            }
        }
    }
}
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000120 	.word	0x20000120
 80009d8:	40010800 	.word	0x40010800
 80009dc:	20000088 	.word	0x20000088
 80009e0:	66666667 	.word	0x66666667

080009e4 <isButton1Pressed>:
int button3_pressed = 0;
int button3_long_pressed_flag = 0;
int button3_flag = 0;

// Button 1 functions
int isButton1Pressed() {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    if (button1_flag == 1) {
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <isButton1Pressed+0x20>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d104      	bne.n	80009fa <isButton1Pressed+0x16>
        button1_flag = 0;
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <isButton1Pressed+0x20>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
        return 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <isButton1Pressed+0x18>
    }
    return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000090 	.word	0x20000090

08000a08 <isButton2Pressed>:
    }
    return 0;
}

// Button 2 functions
int isButton2Pressed() {
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
    if (button2_flag == 1) {
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <isButton2Pressed+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d104      	bne.n	8000a1e <isButton2Pressed+0x16>
        button2_flag = 0;
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <isButton2Pressed+0x20>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
        return 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <isButton2Pressed+0x18>
    }
    return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000098 	.word	0x20000098

08000a2c <isButton3Pressed>:
    }
    return 0;
}

// Button 3 functions
int isButton3Pressed() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    if (button3_flag == 1) {
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <isButton3Pressed+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d104      	bne.n	8000a42 <isButton3Pressed+0x16>
        button3_flag = 0;
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <isButton3Pressed+0x20>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
        return 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <isButton3Pressed+0x18>
    }
    return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	200000a0 	.word	0x200000a0

08000a50 <getKeyInput>:
void subKeyProcess() {
    // TODO
    // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}

void getKeyInput() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    // Button 1
    KeyReg0_1 = KeyReg1_1;
 8000a54:	4b69      	ldr	r3, [pc, #420]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a69      	ldr	r2, [pc, #420]	@ (8000c00 <getKeyInput+0x1b0>)
 8000a5a:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg2_1;
 8000a5c:	4b69      	ldr	r3, [pc, #420]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a66      	ldr	r2, [pc, #408]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a62:	6013      	str	r3, [r2, #0]
    KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000a64:	2120      	movs	r1, #32
 8000a66:	4868      	ldr	r0, [pc, #416]	@ (8000c08 <getKeyInput+0x1b8>)
 8000a68:	f001 fcd0 	bl	800240c <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b64      	ldr	r3, [pc, #400]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a72:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)) {
 8000a74:	4b61      	ldr	r3, [pc, #388]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b61      	ldr	r3, [pc, #388]	@ (8000c00 <getKeyInput+0x1b0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d12f      	bne.n	8000ae0 <getKeyInput+0x90>
 8000a80:	4b5e      	ldr	r3, [pc, #376]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b5f      	ldr	r3, [pc, #380]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d129      	bne.n	8000ae0 <getKeyInput+0x90>
        if (KeyReg2_1 != KeyReg3_1) {  // Button press detected
 8000a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b5e      	ldr	r3, [pc, #376]	@ (8000c0c <getKeyInput+0x1bc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d00f      	beq.n	8000ab8 <getKeyInput+0x68>
            KeyReg3_1 = KeyReg2_1;
 8000a98:	4b5a      	ldr	r3, [pc, #360]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a5b      	ldr	r2, [pc, #364]	@ (8000c0c <getKeyInput+0x1bc>)
 8000a9e:	6013      	str	r3, [r2, #0]

            if (KeyReg3_1 == PRESSED_STATE) {
 8000aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8000c0c <getKeyInput+0x1bc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11b      	bne.n	8000ae0 <getKeyInput+0x90>
                TimeOutForKeyPress_1 = 500;
 8000aa8:	4b59      	ldr	r3, [pc, #356]	@ (8000c10 <getKeyInput+0x1c0>)
 8000aaa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000aae:	601a      	str	r2, [r3, #0]
                button1_flag = 1;
 8000ab0:	4b58      	ldr	r3, [pc, #352]	@ (8000c14 <getKeyInput+0x1c4>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e013      	b.n	8000ae0 <getKeyInput+0x90>
            }
        } else {
            TimeOutForKeyPress_1--;  // Long press detection
 8000ab8:	4b55      	ldr	r3, [pc, #340]	@ (8000c10 <getKeyInput+0x1c0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a54      	ldr	r2, [pc, #336]	@ (8000c10 <getKeyInput+0x1c0>)
 8000ac0:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_1 == 0) {
 8000ac2:	4b53      	ldr	r3, [pc, #332]	@ (8000c10 <getKeyInput+0x1c0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10a      	bne.n	8000ae0 <getKeyInput+0x90>
                TimeOutForKeyPress_1 = 500;
 8000aca:	4b51      	ldr	r3, [pc, #324]	@ (8000c10 <getKeyInput+0x1c0>)
 8000acc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ad0:	601a      	str	r2, [r3, #0]
                if (KeyReg3_1 == PRESSED_STATE) {
 8000ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c0c <getKeyInput+0x1bc>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <getKeyInput+0x90>
                    button1_long_pressed_flag = 1;
 8000ada:	4b4f      	ldr	r3, [pc, #316]	@ (8000c18 <getKeyInput+0x1c8>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Button 2
    KeyReg0_2 = KeyReg1_2;
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <getKeyInput+0x1cc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8000c20 <getKeyInput+0x1d0>)
 8000ae6:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg2_2;
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c24 <getKeyInput+0x1d4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a4b      	ldr	r2, [pc, #300]	@ (8000c1c <getKeyInput+0x1cc>)
 8000aee:	6013      	str	r3, [r2, #0]
    KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	4845      	ldr	r0, [pc, #276]	@ (8000c08 <getKeyInput+0x1b8>)
 8000af4:	f001 fc8a 	bl	800240c <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b49      	ldr	r3, [pc, #292]	@ (8000c24 <getKeyInput+0x1d4>)
 8000afe:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)) {
 8000b00:	4b46      	ldr	r3, [pc, #280]	@ (8000c1c <getKeyInput+0x1cc>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b46      	ldr	r3, [pc, #280]	@ (8000c20 <getKeyInput+0x1d0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d12f      	bne.n	8000b6c <getKeyInput+0x11c>
 8000b0c:	4b43      	ldr	r3, [pc, #268]	@ (8000c1c <getKeyInput+0x1cc>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b44      	ldr	r3, [pc, #272]	@ (8000c24 <getKeyInput+0x1d4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d129      	bne.n	8000b6c <getKeyInput+0x11c>
        if (KeyReg2_2 != KeyReg3_2) {  // Button press detected
 8000b18:	4b42      	ldr	r3, [pc, #264]	@ (8000c24 <getKeyInput+0x1d4>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b42      	ldr	r3, [pc, #264]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d00f      	beq.n	8000b44 <getKeyInput+0xf4>
            KeyReg3_2 = KeyReg2_2;
 8000b24:	4b3f      	ldr	r3, [pc, #252]	@ (8000c24 <getKeyInput+0x1d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a3f      	ldr	r2, [pc, #252]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b2a:	6013      	str	r3, [r2, #0]

            if (KeyReg3_2 == PRESSED_STATE) {
 8000b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d11b      	bne.n	8000b6c <getKeyInput+0x11c>
                TimeOutForKeyPress_2 = 500;
 8000b34:	4b3d      	ldr	r3, [pc, #244]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b36:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b3a:	601a      	str	r2, [r3, #0]
                button2_flag = 1;
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <getKeyInput+0x1e0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e013      	b.n	8000b6c <getKeyInput+0x11c>
            }
        } else {
            TimeOutForKeyPress_2--;  // Long press detection
 8000b44:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a38      	ldr	r2, [pc, #224]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b4c:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_2 == 0) {
 8000b4e:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <getKeyInput+0x11c>
                TimeOutForKeyPress_2 = 500;
 8000b56:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b58:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b5c:	601a      	str	r2, [r3, #0]
                if (KeyReg3_2 == PRESSED_STATE) {
 8000b5e:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <getKeyInput+0x11c>
                    button2_long_pressed_flag = 1;
 8000b66:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <getKeyInput+0x1e4>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Button 3
    KeyReg0_3 = KeyReg1_3;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <getKeyInput+0x1ec>)
 8000b72:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg2_3;
 8000b74:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <getKeyInput+0x1f0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b7a:	6013      	str	r3, [r2, #0]
    KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	4822      	ldr	r0, [pc, #136]	@ (8000c08 <getKeyInput+0x1b8>)
 8000b80:	f001 fc44 	bl	800240c <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <getKeyInput+0x1f0>)
 8000b8a:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)) {
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b2a      	ldr	r3, [pc, #168]	@ (8000c3c <getKeyInput+0x1ec>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d12f      	bne.n	8000bf8 <getKeyInput+0x1a8>
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <getKeyInput+0x1f0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d129      	bne.n	8000bf8 <getKeyInput+0x1a8>
        if (KeyReg2_3 != KeyReg3_3) {  // Button press detected
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <getKeyInput+0x1f0>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <getKeyInput+0x1f4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d00f      	beq.n	8000bd0 <getKeyInput+0x180>
            KeyReg3_3 = KeyReg2_3;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <getKeyInput+0x1f0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <getKeyInput+0x1f4>)
 8000bb6:	6013      	str	r3, [r2, #0]

            if (KeyReg3_3 == PRESSED_STATE) {
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <getKeyInput+0x1f4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11b      	bne.n	8000bf8 <getKeyInput+0x1a8>
                TimeOutForKeyPress_3 = 500;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bc2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bc6:	601a      	str	r2, [r3, #0]
                button3_flag = 1;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <getKeyInput+0x1fc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
                    button3_long_pressed_flag = 1;
                }
            }
        }
    }
 8000bce:	e013      	b.n	8000bf8 <getKeyInput+0x1a8>
            TimeOutForKeyPress_3--;  // Long press detection
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bd8:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_3 == 0) {
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10a      	bne.n	8000bf8 <getKeyInput+0x1a8>
                TimeOutForKeyPress_3 = 500;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <getKeyInput+0x1f8>)
 8000be4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000be8:	601a      	str	r2, [r3, #0]
                if (KeyReg3_3 == PRESSED_STATE) {
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <getKeyInput+0x1f4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <getKeyInput+0x1a8>
                    button3_long_pressed_flag = 1;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <getKeyInput+0x200>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000010 	.word	0x20000010
 8000c14:	20000090 	.word	0x20000090
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	20000018 	.word	0x20000018
 8000c20:	20000014 	.word	0x20000014
 8000c24:	2000001c 	.word	0x2000001c
 8000c28:	20000020 	.word	0x20000020
 8000c2c:	20000024 	.word	0x20000024
 8000c30:	20000098 	.word	0x20000098
 8000c34:	20000094 	.word	0x20000094
 8000c38:	2000002c 	.word	0x2000002c
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	20000030 	.word	0x20000030
 8000c44:	20000034 	.word	0x20000034
 8000c48:	20000038 	.word	0x20000038
 8000c4c:	200000a0 	.word	0x200000a0
 8000c50:	2000009c 	.word	0x2000009c

08000c54 <fsm_automatic_run_way1>:
 *      Author: admin
 */

#include "fsm_automatic.h"

void fsm_automatic_run_way1() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	    static int countdown_way1;
switch (status_way1) {
 8000c58:	4bac      	ldr	r3, [pc, #688]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	f200 814b 	bhi.w	8000ef8 <fsm_automatic_run_way1+0x2a4>
 8000c62:	a201      	add	r2, pc, #4	@ (adr r2, 8000c68 <fsm_automatic_run_way1+0x14>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000d05 	.word	0x08000d05
 8000c70:	08000dad 	.word	0x08000dad
 8000c74:	08000e53 	.word	0x08000e53
        case INIT_1:
            // Initialize all LEDs to off
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	48a4      	ldr	r0, [pc, #656]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000c7e:	f001 fbdc 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c88:	48a1      	ldr	r0, [pc, #644]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000c8a:	f001 fbd6 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c94:	489e      	ldr	r0, [pc, #632]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000c96:	f001 fbd0 	bl	800243a <HAL_GPIO_WritePin>
            
            HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); 
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca0:	489c      	ldr	r0, [pc, #624]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000ca2:	f001 fbca 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cac:	4899      	ldr	r0, [pc, #612]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000cae:	f001 fbc4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); 
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb8:	4896      	ldr	r0, [pc, #600]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000cba:	f001 fbbe 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET);  
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cc4:	4893      	ldr	r0, [pc, #588]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000cc6:	f001 fbb8 	bl	800243a <HAL_GPIO_WritePin>
            
            status_way1 = AUTO_RED_WAY1;
 8000cca:	4b90      	ldr	r3, [pc, #576]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]


            countdown_way1 = red_led_duration ;
 8000cd0:	4b91      	ldr	r3, [pc, #580]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a91      	ldr	r2, [pc, #580]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000cd6:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay1(countdown_way1);
 8000cd8:	4b90      	ldr	r3, [pc, #576]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fda1 	bl	8000824 <display2DigitNumberWay1>

            setTimer0(red_led_duration*1000);
 8000ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fece 	bl	8001a90 <setTimer0>
            setTimer1(1000); // Start the countdown timer
 8000cf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf8:	f000 fee4 	bl	8001ac4 <setTimer1>
            setTimer5(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f000 ff49 	bl	8001b94 <setTimer5>
            break;
 8000d02:	e100      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
        case AUTO_RED_WAY1:
            // Way 1 Red, Way 2 Green
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	4881      	ldr	r0, [pc, #516]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000d0a:	f001 fb96 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d14:	487e      	ldr	r0, [pc, #504]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000d16:	f001 fb90 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d20:	487b      	ldr	r0, [pc, #492]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000d22:	f001 fb8a 	bl	800243a <HAL_GPIO_WritePin>

            if (timer1_flag == 1) {
 8000d26:	4b7e      	ldr	r3, [pc, #504]	@ (8000f20 <fsm_automatic_run_way1+0x2cc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d108      	bne.n	8000d40 <fsm_automatic_run_way1+0xec>
                setTimer1(1000); // Reset the countdown timer
 8000d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d32:	f000 fec7 	bl	8001ac4 <setTimer1>

                countdown_way1--;
 8000d36:	4b79      	ldr	r3, [pc, #484]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a77      	ldr	r2, [pc, #476]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d3e:	6013      	str	r3, [r2, #0]



            }
            display2DigitNumberWay1(countdown_way1);
 8000d40:	4b76      	ldr	r3, [pc, #472]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd6d 	bl	8000824 <display2DigitNumberWay1>

            if (isButton1Pressed() == 1) {
 8000d4a:	f7ff fe4b 	bl	80009e4 <isButton1Pressed>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d109      	bne.n	8000d68 <fsm_automatic_run_way1+0x114>
                status_way1 = INIT_mode;
 8000d54:	4b6d      	ldr	r3, [pc, #436]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000d56:	220a      	movs	r2, #10
 8000d58:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8000d5a:	4b72      	ldr	r3, [pc, #456]	@ (8000f24 <fsm_automatic_run_way1+0x2d0>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	601a      	str	r2, [r3, #0]
                setTimer0(10000);
 8000d60:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d64:	f000 fe94 	bl	8001a90 <setTimer0>
            }

            if (timer0_flag == 1) {
 8000d68:	4b6f      	ldr	r3, [pc, #444]	@ (8000f28 <fsm_automatic_run_way1+0x2d4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f040 80c5 	bne.w	8000efc <fsm_automatic_run_way1+0x2a8>
                status_way1 = AUTO_GREEN_WAY1;
 8000d72:	4b66      	ldr	r3, [pc, #408]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	601a      	str	r2, [r3, #0]
                setTimer0(green_led_duration*1000);
 8000d78:	4b6c      	ldr	r3, [pc, #432]	@ (8000f2c <fsm_automatic_run_way1+0x2d8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fe83 	bl	8001a90 <setTimer0>
				countdown_way1 = green_led_duration; // Reset countdown for next cycle
 8000d8a:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <fsm_automatic_run_way1+0x2d8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a63      	ldr	r2, [pc, #396]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d90:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay1(countdown_way1);
 8000d92:	4b62      	ldr	r3, [pc, #392]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fd44 	bl	8000824 <display2DigitNumberWay1>
				setTimer1(1000); // Start the countdown timer for the next state
 8000d9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da0:	f000 fe90 	bl	8001ac4 <setTimer1>
                    setTimer5(10);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f000 fef5 	bl	8001b94 <setTimer5>
            }
            break;
 8000daa:	e0a7      	b.n	8000efc <fsm_automatic_run_way1+0x2a8>
        case AUTO_GREEN_WAY1:
            // Way 1 Red, Way 2 Yellow
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2101      	movs	r1, #1
 8000db0:	4857      	ldr	r0, [pc, #348]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000db2:	f001 fb42 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dbc:	4854      	ldr	r0, [pc, #336]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000dbe:	f001 fb3c 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc8:	4851      	ldr	r0, [pc, #324]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000dca:	f001 fb36 	bl	800243a <HAL_GPIO_WritePin>

            if (timer1_flag == 1) {
 8000dce:	4b54      	ldr	r3, [pc, #336]	@ (8000f20 <fsm_automatic_run_way1+0x2cc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d108      	bne.n	8000de8 <fsm_automatic_run_way1+0x194>
                setTimer1(1000); // Reset the countdown timer
 8000dd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dda:	f000 fe73 	bl	8001ac4 <setTimer1>
                countdown_way1--;
 8000dde:	4b4f      	ldr	r3, [pc, #316]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	4a4d      	ldr	r2, [pc, #308]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000de6:	6013      	str	r3, [r2, #0]

            }
            display2DigitNumberWay1(countdown_way1);
 8000de8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fd19 	bl	8000824 <display2DigitNumberWay1>


            if (isButton1Pressed() == 1) {
 8000df2:	f7ff fdf7 	bl	80009e4 <isButton1Pressed>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d109      	bne.n	8000e10 <fsm_automatic_run_way1+0x1bc>
                status_way1 = INIT_mode;
 8000dfc:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000dfe:	220a      	movs	r2, #10
 8000e00:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8000e02:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <fsm_automatic_run_way1+0x2d0>)
 8000e04:	220a      	movs	r2, #10
 8000e06:	601a      	str	r2, [r3, #0]
                setTimer0(10000);
 8000e08:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e0c:	f000 fe40 	bl	8001a90 <setTimer0>
            }

            if (timer0_flag == 1) {
 8000e10:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <fsm_automatic_run_way1+0x2d4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d173      	bne.n	8000f00 <fsm_automatic_run_way1+0x2ac>
                status_way1 = AUTO_YELLOW_WAY1;
 8000e18:	4b3c      	ldr	r3, [pc, #240]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	601a      	str	r2, [r3, #0]
                setTimer0(yellow_led_duration*1000);
 8000e1e:	4b44      	ldr	r3, [pc, #272]	@ (8000f30 <fsm_automatic_run_way1+0x2dc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fe30 	bl	8001a90 <setTimer0>
				countdown_way1 = yellow_led_duration; // Reset countdown for next cycle
 8000e30:	4b3f      	ldr	r3, [pc, #252]	@ (8000f30 <fsm_automatic_run_way1+0x2dc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a39      	ldr	r2, [pc, #228]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e36:	6013      	str	r3, [r2, #0]
            display2DigitNumberWay1(countdown_way1);
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fcf1 	bl	8000824 <display2DigitNumberWay1>
			    setTimer1(1000); // Start the countdown timer for the next state
 8000e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e46:	f000 fe3d 	bl	8001ac4 <setTimer1>
                                setTimer5(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f000 fea2 	bl	8001b94 <setTimer5>
            }
            break;
 8000e50:	e056      	b.n	8000f00 <fsm_automatic_run_way1+0x2ac>
        case AUTO_YELLOW_WAY1:
            // Way 1 Green, Way 2 Red
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	482e      	ldr	r0, [pc, #184]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000e58:	f001 faef 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e62:	482b      	ldr	r0, [pc, #172]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000e64:	f001 fae9 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6e:	4828      	ldr	r0, [pc, #160]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000e70:	f001 fae3 	bl	800243a <HAL_GPIO_WritePin>




            if (timer1_flag == 1) {
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <fsm_automatic_run_way1+0x2cc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <fsm_automatic_run_way1+0x23a>
                setTimer1(1000); // Reset the countdown timer
 8000e7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e80:	f000 fe20 	bl	8001ac4 <setTimer1>
                countdown_way1--;
 8000e84:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e8c:	6013      	str	r3, [r2, #0]
  
                
            }
            display2DigitNumberWay1(countdown_way1);
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fcc6 	bl	8000824 <display2DigitNumberWay1>
            if (isButton1Pressed() == 1) {
 8000e98:	f7ff fda4 	bl	80009e4 <isButton1Pressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d109      	bne.n	8000eb6 <fsm_automatic_run_way1+0x262>
                status_way1 = INIT_mode;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <fsm_automatic_run_way1+0x2d0>)
 8000eaa:	220a      	movs	r2, #10
 8000eac:	601a      	str	r2, [r3, #0]
                setTimer0(10000);
 8000eae:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000eb2:	f000 fded 	bl	8001a90 <setTimer0>
            }

            if (timer0_flag == 1) {
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <fsm_automatic_run_way1+0x2d4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d122      	bne.n	8000f04 <fsm_automatic_run_way1+0x2b0>
                status_way1 = AUTO_RED_WAY1;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
                setTimer0(red_led_duration*1000);
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fddd 	bl	8001a90 <setTimer0>
				countdown_way1 = red_led_duration; // Reset countdown for next cycle
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000edc:	6013      	str	r3, [r2, #0]
                
            display2DigitNumberWay1(countdown_way1);
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc9e 	bl	8000824 <display2DigitNumberWay1>
				setTimer1(1000); // Start the countdown timer for the next state
 8000ee8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eec:	f000 fdea 	bl	8001ac4 <setTimer1>
                                setTimer5(10);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f000 fe4f 	bl	8001b94 <setTimer5>
            }
            break;
 8000ef6:	e005      	b.n	8000f04 <fsm_automatic_run_way1+0x2b0>
       

		
		default:
            break;
 8000ef8:	bf00      	nop
 8000efa:	e004      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
            break;
 8000efc:	bf00      	nop
 8000efe:	e002      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
            break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
            break;
 8000f04:	bf00      	nop
    }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000ac 	.word	0x200000ac
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40010800 	.word	0x40010800
 8000f18:	2000004c 	.word	0x2000004c
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	20000114 	.word	0x20000114
 8000f24:	20000048 	.word	0x20000048
 8000f28:	20000110 	.word	0x20000110
 8000f2c:	20000050 	.word	0x20000050
 8000f30:	20000054 	.word	0x20000054

08000f34 <fsm_automatic_run_way2>:

void fsm_automatic_run_way2() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    static int countdown_way2;
    switch (status_way2) {
 8000f38:	4b86      	ldr	r3, [pc, #536]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b04      	subs	r3, #4
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	f200 80ff 	bhi.w	8001142 <fsm_automatic_run_way2+0x20e>
 8000f44:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <fsm_automatic_run_way2+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	080010bf 	.word	0x080010bf
 8000f54:	08000fb5 	.word	0x08000fb5
 8000f58:	0800103b 	.word	0x0800103b
        case INIT_2:
            // Initialize all LEDs to off
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	487d      	ldr	r0, [pc, #500]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000f62:	f001 fa6a 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	487b      	ldr	r0, [pc, #492]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000f6c:	f001 fa65 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4878      	ldr	r0, [pc, #480]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000f76:	f001 fa60 	bl	800243a <HAL_GPIO_WritePin>
            status_way2 = AUTO_GREEN_WAY2;
 8000f7a:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	601a      	str	r2, [r3, #0]
            countdown_way2 = green_led_duration;
 8000f80:	4b76      	ldr	r3, [pc, #472]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a76      	ldr	r2, [pc, #472]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000f86:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay2(countdown_way2);
 8000f88:	4b75      	ldr	r3, [pc, #468]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fcb9 	bl	8000904 <display2DigitNumberWay2>

            setTimer2(green_led_duration * 1000);
 8000f92:	4b72      	ldr	r3, [pc, #456]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fdaa 	bl	8001af8 <setTimer2>
            setTimer3(1000); // Start the countdown timer
 8000fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa8:	f000 fdc0 	bl	8001b2c <setTimer3>
            setTimer4(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f000 fdd7 	bl	8001b60 <setTimer4>
            break;
 8000fb2:	e0cd      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
        case AUTO_GREEN_WAY2:
           
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4867      	ldr	r0, [pc, #412]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000fba:	f001 fa3e 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4865      	ldr	r0, [pc, #404]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000fc4:	f001 fa39 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4862      	ldr	r0, [pc, #392]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000fce:	f001 fa34 	bl	800243a <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 8000fd2:	4b64      	ldr	r3, [pc, #400]	@ (8001164 <fsm_automatic_run_way2+0x230>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <fsm_automatic_run_way2+0xb8>
                setTimer3(1000); // Reset the countdown timer
 8000fda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fde:	f000 fda5 	bl	8001b2c <setTimer3>

                countdown_way2--;
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000fea:	6013      	str	r3, [r2, #0]


            }
            display2DigitNumberWay2(countdown_way2);
 8000fec:	4b5c      	ldr	r3, [pc, #368]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc87 	bl	8000904 <display2DigitNumberWay2>
            //     status_way2 = INIT_mode;
            //     status_way2 = INIT_mode;

            // }

            if (timer2_flag == 1) {
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8001168 <fsm_automatic_run_way2+0x234>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	f040 80a3 	bne.w	8001146 <fsm_automatic_run_way2+0x212>
                status_way2 = AUTO_YELLOW_WAY2;
 8001000:	4b54      	ldr	r3, [pc, #336]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8001002:	2207      	movs	r2, #7
 8001004:	601a      	str	r2, [r3, #0]
                setTimer2(yellow_led_duration * 1000);
 8001006:	4b59      	ldr	r3, [pc, #356]	@ (800116c <fsm_automatic_run_way2+0x238>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fd70 	bl	8001af8 <setTimer2>
                countdown_way2 = yellow_led_duration; // Reset countdown for next cycle
 8001018:	4b54      	ldr	r3, [pc, #336]	@ (800116c <fsm_automatic_run_way2+0x238>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a50      	ldr	r2, [pc, #320]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 800101e:	6013      	str	r3, [r2, #0]
            
            display2DigitNumberWay2(countdown_way2);
 8001020:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fc6d 	bl	8000904 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 800102a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102e:	f000 fd7d 	bl	8001b2c <setTimer3>
            
            setTimer4(10);
 8001032:	200a      	movs	r0, #10
 8001034:	f000 fd94 	bl	8001b60 <setTimer4>
            }
            break;
 8001038:	e085      	b.n	8001146 <fsm_automatic_run_way2+0x212>
        case AUTO_YELLOW_WAY2:
            // Way 2 Green, Way 1 Yellow
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4846      	ldr	r0, [pc, #280]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8001040:	f001 f9fb 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2108      	movs	r1, #8
 8001048:	4843      	ldr	r0, [pc, #268]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 800104a:	f001 f9f6 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2110      	movs	r1, #16
 8001052:	4841      	ldr	r0, [pc, #260]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8001054:	f001 f9f1 	bl	800243a <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 8001058:	4b42      	ldr	r3, [pc, #264]	@ (8001164 <fsm_automatic_run_way2+0x230>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d108      	bne.n	8001072 <fsm_automatic_run_way2+0x13e>
                setTimer3(1000); // Reset the countdown timer
 8001060:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001064:	f000 fd62 	bl	8001b2c <setTimer3>
                countdown_way2--;
 8001068:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	4a3c      	ldr	r2, [pc, #240]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001070:	6013      	str	r3, [r2, #0]


            }
            display2DigitNumberWay2(countdown_way2);
 8001072:	4b3b      	ldr	r3, [pc, #236]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc44 	bl	8000904 <display2DigitNumberWay2>
            // if (isButton1Pressed() == 1) {
            //     status_way2 = INIT_mode;
            //     status_way2 = INIT_mode;
            // }

            if (timer2_flag == 1) {
 800107c:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <fsm_automatic_run_way2+0x234>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d162      	bne.n	800114a <fsm_automatic_run_way2+0x216>
                status_way2 = AUTO_RED_WAY2;
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8001086:	2205      	movs	r2, #5
 8001088:	601a      	str	r2, [r3, #0]
                setTimer2(red_led_duration * 1000);
 800108a:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <fsm_automatic_run_way2+0x23c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fd2e 	bl	8001af8 <setTimer2>
                countdown_way2 = red_led_duration; // Reset countdown for next cycle
 800109c:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <fsm_automatic_run_way2+0x23c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010a2:	6013      	str	r3, [r2, #0]
            display2DigitNumberWay2(countdown_way2);
 80010a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc2b 	bl	8000904 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 80010ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b2:	f000 fd3b 	bl	8001b2c <setTimer3>
            
                setTimer4(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 fd52 	bl	8001b60 <setTimer4>
            }
            break;
 80010bc:	e045      	b.n	800114a <fsm_automatic_run_way2+0x216>
        case AUTO_RED_WAY2:
            // Way 2 Yellow, Way 1 Red
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2102      	movs	r1, #2
 80010c2:	4825      	ldr	r0, [pc, #148]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 80010c4:	f001 f9b9 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2108      	movs	r1, #8
 80010cc:	4822      	ldr	r0, [pc, #136]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 80010ce:	f001 f9b4 	bl	800243a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2110      	movs	r1, #16
 80010d6:	4820      	ldr	r0, [pc, #128]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 80010d8:	f001 f9af 	bl	800243a <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <fsm_automatic_run_way2+0x230>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <fsm_automatic_run_way2+0x1c2>
                setTimer3(1000); // Reset the countdown timer
 80010e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e8:	f000 fd20 	bl	8001b2c <setTimer3>
                countdown_way2--;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010f4:	6013      	str	r3, [r2, #0]

            }
            display2DigitNumberWay2(countdown_way2);
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc02 	bl	8000904 <display2DigitNumberWay2>
            // if (isButton1Pressed() == 1) {
            //     status_way2 = INIT_mode;

            // }

            if (timer2_flag == 1) {
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <fsm_automatic_run_way2+0x234>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d122      	bne.n	800114e <fsm_automatic_run_way2+0x21a>
                status_way2 = AUTO_GREEN_WAY2;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 800110a:	2206      	movs	r2, #6
 800110c:	601a      	str	r2, [r3, #0]
                setTimer2(green_led_duration * 1000);
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fcec 	bl	8001af8 <setTimer2>
                countdown_way2 = green_led_duration; // Reset countdown for next cycle
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001126:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay2(countdown_way2);
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fbe9 	bl	8000904 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 8001132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001136:	f000 fcf9 	bl	8001b2c <setTimer3>
            
                setTimer4(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f000 fd10 	bl	8001b60 <setTimer4>
            }
            break;
 8001140:	e005      	b.n	800114e <fsm_automatic_run_way2+0x21a>
        default:
            break;
 8001142:	bf00      	nop
 8001144:	e004      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
            break;
 8001146:	bf00      	nop
 8001148:	e002      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
            break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
            break;
 800114e:	bf00      	nop
    }
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000048 	.word	0x20000048
 8001158:	40010c00 	.word	0x40010c00
 800115c:	20000050 	.word	0x20000050
 8001160:	200000a8 	.word	0x200000a8
 8001164:	2000011c 	.word	0x2000011c
 8001168:	20000118 	.word	0x20000118
 800116c:	20000054 	.word	0x20000054
 8001170:	2000004c 	.word	0x2000004c

08001174 <setRedLEDDuration>:
#include "fsm_select_mode.h"
int red_duration = 1;
int green_duration = 1;
int yellow_duration = 1;

void setRedLEDDuration(int duration) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

// int green_led_duration = 3;
// int yellow_led_duration = 2;
    
    if (green_led_duration + yellow_led_duration == duration) {
 800117c:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <setRedLEDDuration+0xec>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <setRedLEDDuration+0xf0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4413      	add	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	d103      	bne.n	8001194 <setRedLEDDuration+0x20>
        red_led_duration = duration;
 800118c:	4a36      	ldr	r2, [pc, #216]	@ (8001268 <setRedLEDDuration+0xf4>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e060      	b.n	8001256 <setRedLEDDuration+0xe2>
    }
    else if (duration==1) return;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d05c      	beq.n	8001254 <setRedLEDDuration+0xe0>
    
    else if (duration > green_led_duration + yellow_led_duration) {
 800119a:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <setRedLEDDuration+0xec>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <setRedLEDDuration+0xf0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dd20      	ble.n	80011ec <setRedLEDDuration+0x78>
        // Keep adding 1 to green first, then yellow, alternating until the sum equals duration

        while (green_led_duration + yellow_led_duration < duration) {
 80011aa:	e013      	b.n	80011d4 <setRedLEDDuration+0x60>

                if ((green_led_duration + yellow_led_duration) % 2 == 0) {
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <setRedLEDDuration+0xec>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <setRedLEDDuration+0xf0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <setRedLEDDuration+0x56>
                    green_led_duration++;
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <setRedLEDDuration+0xec>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <setRedLEDDuration+0xec>)
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	e004      	b.n	80011d4 <setRedLEDDuration+0x60>
                } else {
                    yellow_led_duration++;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <setRedLEDDuration+0xf0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a24      	ldr	r2, [pc, #144]	@ (8001264 <setRedLEDDuration+0xf0>)
 80011d2:	6013      	str	r3, [r2, #0]
        while (green_led_duration + yellow_led_duration < duration) {
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <setRedLEDDuration+0xec>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <setRedLEDDuration+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dce3      	bgt.n	80011ac <setRedLEDDuration+0x38>
                }
            
        }
        red_led_duration = duration;
 80011e4:	4a20      	ldr	r2, [pc, #128]	@ (8001268 <setRedLEDDuration+0xf4>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e034      	b.n	8001256 <setRedLEDDuration+0xe2>
        // Additional logic can be added here if needed
    } else if (duration < green_led_duration + yellow_led_duration) {
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <setRedLEDDuration+0xec>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <setRedLEDDuration+0xf0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	da2c      	bge.n	8001256 <setRedLEDDuration+0xe2>

    // Keep subtracting 1 from yellow first, then green, alternating until the sum equals duration

    while (green_led_duration + yellow_led_duration > duration) {
 80011fc:	e01e      	b.n	800123c <setRedLEDDuration+0xc8>

            if (green_led_duration >= yellow_led_duration) {
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <setRedLEDDuration+0xec>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <setRedLEDDuration+0xf0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	db05      	blt.n	8001216 <setRedLEDDuration+0xa2>
                green_led_duration--;
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <setRedLEDDuration+0xec>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <setRedLEDDuration+0xec>)
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e004      	b.n	8001220 <setRedLEDDuration+0xac>
            } else {
                yellow_led_duration--;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <setRedLEDDuration+0xf0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3b01      	subs	r3, #1
 800121c:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <setRedLEDDuration+0xf0>)
 800121e:	6013      	str	r3, [r2, #0]
            }

            // Safeguard to avoid either duration going below 1
            if (green_led_duration < 1) green_led_duration = 1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <setRedLEDDuration+0xec>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	dc02      	bgt.n	800122e <setRedLEDDuration+0xba>
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <setRedLEDDuration+0xec>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
            if (yellow_led_duration < 1) yellow_led_duration = 1;
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <setRedLEDDuration+0xf0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	dc02      	bgt.n	800123c <setRedLEDDuration+0xc8>
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <setRedLEDDuration+0xf0>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
    while (green_led_duration + yellow_led_duration > duration) {
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <setRedLEDDuration+0xec>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <setRedLEDDuration+0xf0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbd8      	blt.n	80011fe <setRedLEDDuration+0x8a>
        
        
    }   
        red_led_duration = duration;
 800124c:	4a06      	ldr	r2, [pc, #24]	@ (8001268 <setRedLEDDuration+0xf4>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e000      	b.n	8001256 <setRedLEDDuration+0xe2>
    else if (duration==1) return;
 8001254:	bf00      	nop
        // Additional logic can be added here if needed
    }
}
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000050 	.word	0x20000050
 8001264:	20000054 	.word	0x20000054
 8001268:	2000004c 	.word	0x2000004c

0800126c <setGreenLEDDuration>:


void setGreenLEDDuration(int duration) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
// int red_led_duration = 5;
// int yellow_led_duration = 2;

    if (red_led_duration - yellow_led_duration == duration) {
 8001274:	4b39      	ldr	r3, [pc, #228]	@ (800135c <setGreenLEDDuration+0xf0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b39      	ldr	r3, [pc, #228]	@ (8001360 <setGreenLEDDuration+0xf4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	d103      	bne.n	800128c <setGreenLEDDuration+0x20>
        green_led_duration = duration;
 8001284:	4a37      	ldr	r2, [pc, #220]	@ (8001364 <setGreenLEDDuration+0xf8>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
            }
            
        }
        green_led_duration = duration;
    }
}
 800128a:	e062      	b.n	8001352 <setGreenLEDDuration+0xe6>
    } else if (duration > red_led_duration - yellow_led_duration) {
 800128c:	4b33      	ldr	r3, [pc, #204]	@ (800135c <setGreenLEDDuration+0xf0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <setGreenLEDDuration+0xf4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dd27      	ble.n	80012ec <setGreenLEDDuration+0x80>
        while (red_led_duration - yellow_led_duration < duration) {
 800129c:	e01a      	b.n	80012d4 <setGreenLEDDuration+0x68>
            if (red_led_duration < 2*duration) {
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	005a      	lsls	r2, r3, #1
 80012a2:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dd05      	ble.n	80012b6 <setGreenLEDDuration+0x4a>
                red_led_duration++;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a2a      	ldr	r2, [pc, #168]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e00e      	b.n	80012d4 <setGreenLEDDuration+0x68>
            } else if (yellow_led_duration > 1) {
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <setGreenLEDDuration+0xf4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	dd05      	ble.n	80012ca <setGreenLEDDuration+0x5e>
                yellow_led_duration--;
 80012be:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <setGreenLEDDuration+0xf4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	4a26      	ldr	r2, [pc, #152]	@ (8001360 <setGreenLEDDuration+0xf4>)
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e004      	b.n	80012d4 <setGreenLEDDuration+0x68>
                red_led_duration++;
 80012ca:	4b24      	ldr	r3, [pc, #144]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a22      	ldr	r2, [pc, #136]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012d2:	6013      	str	r3, [r2, #0]
        while (red_led_duration - yellow_led_duration < duration) {
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <setGreenLEDDuration+0xf4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dcdc      	bgt.n	800129e <setGreenLEDDuration+0x32>
        green_led_duration = duration;
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <setGreenLEDDuration+0xf8>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	e032      	b.n	8001352 <setGreenLEDDuration+0xe6>
    } else if (duration < red_led_duration - yellow_led_duration) {
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <setGreenLEDDuration+0xf0>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <setGreenLEDDuration+0xf4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	da2a      	bge.n	8001352 <setGreenLEDDuration+0xe6>
        while (red_led_duration - yellow_led_duration > duration) {
 80012fc:	e01e      	b.n	800133c <setGreenLEDDuration+0xd0>
            if ((red_led_duration > 2*duration) && (red_led_duration > 2)) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	005a      	lsls	r2, r3, #1
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <setGreenLEDDuration+0xf0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	da09      	bge.n	800131e <setGreenLEDDuration+0xb2>
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <setGreenLEDDuration+0xf0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	dd05      	ble.n	800131e <setGreenLEDDuration+0xb2>
                red_led_duration--;
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <setGreenLEDDuration+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3b01      	subs	r3, #1
 8001318:	4a10      	ldr	r2, [pc, #64]	@ (800135c <setGreenLEDDuration+0xf0>)
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e00e      	b.n	800133c <setGreenLEDDuration+0xd0>
            else if (yellow_led_duration > 1) {
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <setGreenLEDDuration+0xf4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	dd05      	ble.n	8001332 <setGreenLEDDuration+0xc6>
                yellow_led_duration--;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <setGreenLEDDuration+0xf4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <setGreenLEDDuration+0xf4>)
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e004      	b.n	800133c <setGreenLEDDuration+0xd0>
                red_led_duration--;  // Fallback if yellow_led_duration cannot be decremented
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <setGreenLEDDuration+0xf0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <setGreenLEDDuration+0xf0>)
 800133a:	6013      	str	r3, [r2, #0]
        while (red_led_duration - yellow_led_duration > duration) {
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <setGreenLEDDuration+0xf0>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <setGreenLEDDuration+0xf4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbd8      	blt.n	80012fe <setGreenLEDDuration+0x92>
        green_led_duration = duration;
 800134c:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <setGreenLEDDuration+0xf8>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	2000004c 	.word	0x2000004c
 8001360:	20000054 	.word	0x20000054
 8001364:	20000050 	.word	0x20000050

08001368 <setYellowLEDDuration>:

void setYellowLEDDuration(int duration) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
// int red_led_duration = 5;
// int green_led_duration = 3;
 
    
    if (red_led_duration - green_led_duration == duration) {
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <setYellowLEDDuration+0xf4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	d103      	bne.n	8001388 <setYellowLEDDuration+0x20>
        yellow_led_duration = duration;
 8001380:	4a37      	ldr	r2, [pc, #220]	@ (8001460 <setYellowLEDDuration+0xf8>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
            }
            
        }
        yellow_led_duration = duration;
    }
}
 8001386:	e062      	b.n	800144e <setYellowLEDDuration+0xe6>
    } else if (duration > red_led_duration - green_led_duration) {
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <setYellowLEDDuration+0xf0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b33      	ldr	r3, [pc, #204]	@ (800145c <setYellowLEDDuration+0xf4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dd27      	ble.n	80013e8 <setYellowLEDDuration+0x80>
        while (red_led_duration - green_led_duration < duration) {
 8001398:	e01a      	b.n	80013d0 <setYellowLEDDuration+0x68>
            if (red_led_duration < 2*duration) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	005a      	lsls	r2, r3, #1
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd05      	ble.n	80013b2 <setYellowLEDDuration+0x4a>
                red_led_duration++;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e00e      	b.n	80013d0 <setYellowLEDDuration+0x68>
            } else if (green_led_duration > 1) {
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <setYellowLEDDuration+0xf4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	dd05      	ble.n	80013c6 <setYellowLEDDuration+0x5e>
                green_led_duration--;
 80013ba:	4b28      	ldr	r3, [pc, #160]	@ (800145c <setYellowLEDDuration+0xf4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	4a26      	ldr	r2, [pc, #152]	@ (800145c <setYellowLEDDuration+0xf4>)
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e004      	b.n	80013d0 <setYellowLEDDuration+0x68>
                red_led_duration++;
 80013c6:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a22      	ldr	r2, [pc, #136]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013ce:	6013      	str	r3, [r2, #0]
        while (red_led_duration - green_led_duration < duration) {
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b21      	ldr	r3, [pc, #132]	@ (800145c <setYellowLEDDuration+0xf4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dcdc      	bgt.n	800139a <setYellowLEDDuration+0x32>
        yellow_led_duration = duration;
 80013e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001460 <setYellowLEDDuration+0xf8>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	e032      	b.n	800144e <setYellowLEDDuration+0xe6>
    } else if (duration < red_led_duration - green_led_duration) {
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <setYellowLEDDuration+0xf0>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <setYellowLEDDuration+0xf4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	da2a      	bge.n	800144e <setYellowLEDDuration+0xe6>
        while (red_led_duration - green_led_duration > duration) {
 80013f8:	e01e      	b.n	8001438 <setYellowLEDDuration+0xd0>
            if ((red_led_duration > 2*duration) && (red_led_duration > 2)) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	005a      	lsls	r2, r3, #1
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	da09      	bge.n	800141a <setYellowLEDDuration+0xb2>
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	dd05      	ble.n	800141a <setYellowLEDDuration+0xb2>
                red_led_duration--;
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e00e      	b.n	8001438 <setYellowLEDDuration+0xd0>
            else if (green_led_duration > 1) {
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <setYellowLEDDuration+0xf4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	dd05      	ble.n	800142e <setYellowLEDDuration+0xc6>
                green_led_duration--;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <setYellowLEDDuration+0xf4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3b01      	subs	r3, #1
 8001428:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <setYellowLEDDuration+0xf4>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e004      	b.n	8001438 <setYellowLEDDuration+0xd0>
                red_led_duration--;  // Fallback if yellow_led_duration cannot be decremented
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3b01      	subs	r3, #1
 8001434:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <setYellowLEDDuration+0xf0>)
 8001436:	6013      	str	r3, [r2, #0]
        while (red_led_duration - green_led_duration > duration) {
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <setYellowLEDDuration+0xf0>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <setYellowLEDDuration+0xf4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbd8      	blt.n	80013fa <setYellowLEDDuration+0x92>
        yellow_led_duration = duration;
 8001448:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <setYellowLEDDuration+0xf8>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000004c 	.word	0x2000004c
 800145c:	20000050 	.word	0x20000050
 8001460:	20000054 	.word	0x20000054

08001464 <fsm_select_mode_run>:

void fsm_select_mode_run() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
   switch (status_way1) {
 8001468:	4bb1      	ldr	r3, [pc, #708]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3b0a      	subs	r3, #10
 800146e:	2b04      	cmp	r3, #4
 8001470:	f200 81d7 	bhi.w	8001822 <fsm_select_mode_run+0x3be>
 8001474:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <fsm_select_mode_run+0x18>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	08001491 	.word	0x08001491
 8001480:	08001517 	.word	0x08001517
 8001484:	08001571 	.word	0x08001571
 8001488:	08001651 	.word	0x08001651
 800148c:	08001751 	.word	0x08001751
       case INIT_mode:
           // Initialize the state to SELECT_MODE_1
           // Initialize all LEDs to off
           HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2101      	movs	r1, #1
 8001494:	48a7      	ldr	r0, [pc, #668]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001496:	f000 ffd0 	bl	800243a <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014a0:	48a4      	ldr	r0, [pc, #656]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80014a2:	f000 ffca 	bl	800243a <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ac:	48a1      	ldr	r0, [pc, #644]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80014ae:	f000 ffc4 	bl	800243a <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2102      	movs	r1, #2
 80014b6:	489f      	ldr	r0, [pc, #636]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80014b8:	f000 ffbf 	bl	800243a <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2108      	movs	r1, #8
 80014c0:	489c      	ldr	r0, [pc, #624]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80014c2:	f000 ffba 	bl	800243a <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2110      	movs	r1, #16
 80014ca:	489a      	ldr	r0, [pc, #616]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80014cc:	f000 ffb5 	bl	800243a <HAL_GPIO_WritePin>

            // off all SEGb
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d6:	4898      	ldr	r0, [pc, #608]	@ (8001738 <fsm_select_mode_run+0x2d4>)
 80014d8:	f000 ffaf 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014e2:	4895      	ldr	r0, [pc, #596]	@ (8001738 <fsm_select_mode_run+0x2d4>)
 80014e4:	f000 ffa9 	bl	800243a <HAL_GPIO_WritePin>

            // ON all SEG
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ee:	4892      	ldr	r0, [pc, #584]	@ (8001738 <fsm_select_mode_run+0x2d4>)
 80014f0:	f000 ffa3 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014fa:	488f      	ldr	r0, [pc, #572]	@ (8001738 <fsm_select_mode_run+0x2d4>)
 80014fc:	f000 ff9d 	bl	800243a <HAL_GPIO_WritePin>


           status_way1 = SELECT_MODE_1;
 8001500:	4b8b      	ldr	r3, [pc, #556]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 8001502:	220b      	movs	r2, #11
 8001504:	601a      	str	r2, [r3, #0]
           setTimer0(3000);
 8001506:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800150a:	f000 fac1 	bl	8001a90 <setTimer0>
             setTimer1(250); //Blinking
 800150e:	20fa      	movs	r0, #250	@ 0xfa
 8001510:	f000 fad8 	bl	8001ac4 <setTimer1>
 
           break;
 8001514:	e18e      	b.n	8001834 <fsm_select_mode_run+0x3d0>
       case SELECT_MODE_1:

           display7SEG(1); // Display mode
 8001516:	2001      	movs	r0, #1
 8001518:	f7fe fe18 	bl	800014c <display7SEG>

           if (isButton1Pressed() == 1) {
 800151c:	f7ff fa62 	bl	80009e4 <isButton1Pressed>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10c      	bne.n	8001540 <fsm_select_mode_run+0xdc>
           status_way1 = SELECT_MODE_2;
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 8001528:	220c      	movs	r2, #12
 800152a:	601a      	str	r2, [r3, #0]
           setTimer0(10000);
 800152c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001530:	f000 faae 	bl	8001a90 <setTimer0>
            setTimer1(250); //Blinking
 8001534:	20fa      	movs	r0, #250	@ 0xfa
 8001536:	f000 fac5 	bl	8001ac4 <setTimer1>
           setTimer4(10);
 800153a:	200a      	movs	r0, #10
 800153c:	f000 fb10 	bl	8001b60 <setTimer4>
           }



           if (timer0_flag == 1) {
 8001540:	4b7e      	ldr	r3, [pc, #504]	@ (800173c <fsm_select_mode_run+0x2d8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	f040 816e 	bne.w	8001826 <fsm_select_mode_run+0x3c2>
                status_way1 = INIT_1;
 800154a:	4b79      	ldr	r3, [pc, #484]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001550:	4b7b      	ldr	r3, [pc, #492]	@ (8001740 <fsm_select_mode_run+0x2dc>)
 8001552:	2204      	movs	r2, #4
 8001554:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800155c:	4876      	ldr	r0, [pc, #472]	@ (8001738 <fsm_select_mode_run+0x2d4>)
 800155e:	f000 ff6c 	bl	800243a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001568:	4873      	ldr	r0, [pc, #460]	@ (8001738 <fsm_select_mode_run+0x2d4>)
 800156a:	f000 ff66 	bl	800243a <HAL_GPIO_WritePin>
           }
           break;
 800156e:	e15a      	b.n	8001826 <fsm_select_mode_run+0x3c2>
       case SELECT_MODE_2:
           display7SEG(2); // Display mode
 8001570:	2002      	movs	r0, #2
 8001572:	f7fe fdeb 	bl	800014c <display7SEG>
// Blinking red LEDs at 2 Hz
           if (timer1_flag == 1) {
 8001576:	4b73      	ldr	r3, [pc, #460]	@ (8001744 <fsm_select_mode_run+0x2e0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d120      	bne.n	80015c0 <fsm_select_mode_run+0x15c>
               HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800157e:	2101      	movs	r1, #1
 8001580:	486c      	ldr	r0, [pc, #432]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001582:	f000 ff72 	bl	800246a <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8001586:	2110      	movs	r1, #16
 8001588:	486a      	ldr	r0, [pc, #424]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 800158a:	f000 ff6e 	bl	800246a <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2102      	movs	r1, #2
 8001592:	4868      	ldr	r0, [pc, #416]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001594:	f000 ff51 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2108      	movs	r1, #8
 800159c:	4865      	ldr	r0, [pc, #404]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 800159e:	f000 ff4c 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a8:	4862      	ldr	r0, [pc, #392]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80015aa:	f000 ff46 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b4:	485f      	ldr	r0, [pc, #380]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 80015b6:	f000 ff40 	bl	800243a <HAL_GPIO_WritePin>
               setTimer1(250); // 0.5 seconds for 2 Hz blinking
 80015ba:	20fa      	movs	r0, #250	@ 0xfa
 80015bc:	f000 fa82 	bl	8001ac4 <setTimer1>
           }


           if (isButton1Pressed() == 1) {
 80015c0:	f7ff fa10 	bl	80009e4 <isButton1Pressed>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10c      	bne.n	80015e4 <fsm_select_mode_run+0x180>
               status_way1 = SELECT_MODE_3;
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 80015cc:	220d      	movs	r2, #13
 80015ce:	601a      	str	r2, [r3, #0]
               setTimer0(10000);
 80015d0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80015d4:	f000 fa5c 	bl	8001a90 <setTimer0>
            setTimer1(250); //Blinking
 80015d8:	20fa      	movs	r0, #250	@ 0xfa
 80015da:	f000 fa73 	bl	8001ac4 <setTimer1>
           setTimer4(10);
 80015de:	200a      	movs	r0, #10
 80015e0:	f000 fabe 	bl	8001b60 <setTimer4>
           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 80015e4:	f7ff fa10 	bl	8000a08 <isButton2Pressed>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10f      	bne.n	800160e <fsm_select_mode_run+0x1aa>
               red_duration++;
 80015ee:	4b56      	ldr	r3, [pc, #344]	@ (8001748 <fsm_select_mode_run+0x2e4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a54      	ldr	r2, [pc, #336]	@ (8001748 <fsm_select_mode_run+0x2e4>)
 80015f6:	6013      	str	r3, [r2, #0]
               if (red_duration > 99) {
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <fsm_select_mode_run+0x2e4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b63      	cmp	r3, #99	@ 0x63
 80015fe:	dd02      	ble.n	8001606 <fsm_select_mode_run+0x1a2>
                   red_duration = 1; // Wrap around to 1 if it exceeds 9
 8001600:	4b51      	ldr	r3, [pc, #324]	@ (8001748 <fsm_select_mode_run+0x2e4>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
               }
               setTimer0(10000);
 8001606:	f242 7010 	movw	r0, #10000	@ 0x2710
 800160a:	f000 fa41 	bl	8001a90 <setTimer0>
           }
            // display7SEG2(red_duration);
            display2DigitNumberWay2(red_duration);
 800160e:	4b4e      	ldr	r3, [pc, #312]	@ (8001748 <fsm_select_mode_run+0x2e4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f976 	bl	8000904 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 8001618:	f7ff fa08 	bl	8000a2c <isButton3Pressed>
 800161c:	4603      	mov	r3, r0
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10a      	bne.n	8001638 <fsm_select_mode_run+0x1d4>
               // Save the duration value and exit Mode 2
               setRedLEDDuration(red_duration);
 8001622:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <fsm_select_mode_run+0x2e4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fda4 	bl	8001174 <setRedLEDDuration>
                status_way1 = INIT_1;
 800162c:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001632:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <fsm_select_mode_run+0x2dc>)
 8001634:	2204      	movs	r2, #4
 8001636:	601a      	str	r2, [r3, #0]
           }

           if (timer0_flag == 1) {
 8001638:	4b40      	ldr	r3, [pc, #256]	@ (800173c <fsm_select_mode_run+0x2d8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	f040 80f4 	bne.w	800182a <fsm_select_mode_run+0x3c6>
                status_way1 = INIT_1;
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001648:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <fsm_select_mode_run+0x2dc>)
 800164a:	2204      	movs	r2, #4
 800164c:	601a      	str	r2, [r3, #0]
           }
           break;
 800164e:	e0ec      	b.n	800182a <fsm_select_mode_run+0x3c6>
       case SELECT_MODE_3:
           display7SEG(3); // Display mode
 8001650:	2003      	movs	r0, #3
 8001652:	f7fe fd7b 	bl	800014c <display7SEG>
           // Blinking yellow LEDs at 2 Hz
           if (timer1_flag == 1) {
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <fsm_select_mode_run+0x2e0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d120      	bne.n	80016a0 <fsm_select_mode_run+0x23c>
               HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800165e:	2108      	movs	r1, #8
 8001660:	4834      	ldr	r0, [pc, #208]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001662:	f000 ff02 	bl	800246a <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
 8001666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166a:	4832      	ldr	r0, [pc, #200]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 800166c:	f000 fefd 	bl	800246a <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2101      	movs	r1, #1
 8001674:	482f      	ldr	r0, [pc, #188]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001676:	f000 fee0 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2102      	movs	r1, #2
 800167e:	482d      	ldr	r0, [pc, #180]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001680:	f000 fedb 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2110      	movs	r1, #16
 8001688:	482a      	ldr	r0, [pc, #168]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 800168a:	f000 fed6 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001694:	4827      	ldr	r0, [pc, #156]	@ (8001734 <fsm_select_mode_run+0x2d0>)
 8001696:	f000 fed0 	bl	800243a <HAL_GPIO_WritePin>
               setTimer1(250); // 0.5 seconds for 2 Hz blinking
 800169a:	20fa      	movs	r0, #250	@ 0xfa
 800169c:	f000 fa12 	bl	8001ac4 <setTimer1>
           }

           if (isButton1Pressed() == 1) {
 80016a0:	f7ff f9a0 	bl	80009e4 <isButton1Pressed>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10c      	bne.n	80016c4 <fsm_select_mode_run+0x260>
               status_way1 = SELECT_MODE_4;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 80016ac:	220e      	movs	r2, #14
 80016ae:	601a      	str	r2, [r3, #0]
               setTimer0(10000);
 80016b0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80016b4:	f000 f9ec 	bl	8001a90 <setTimer0>
              setTimer1(250); //Blinking
 80016b8:	20fa      	movs	r0, #250	@ 0xfa
 80016ba:	f000 fa03 	bl	8001ac4 <setTimer1>
           setTimer4(10);
 80016be:	200a      	movs	r0, #10
 80016c0:	f000 fa4e 	bl	8001b60 <setTimer4>
           
           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 80016c4:	f7ff f9a0 	bl	8000a08 <isButton2Pressed>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10f      	bne.n	80016ee <fsm_select_mode_run+0x28a>
               yellow_duration++;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <fsm_select_mode_run+0x2e8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <fsm_select_mode_run+0x2e8>)
 80016d6:	6013      	str	r3, [r2, #0]
               if (yellow_duration > 99) {
 80016d8:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <fsm_select_mode_run+0x2e8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b63      	cmp	r3, #99	@ 0x63
 80016de:	dd02      	ble.n	80016e6 <fsm_select_mode_run+0x282>
                   yellow_duration = 1; // Wrap around to 1 if it exceeds 9
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <fsm_select_mode_run+0x2e8>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
               }
           setTimer0(10000);
 80016e6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80016ea:	f000 f9d1 	bl	8001a90 <setTimer0>
           }


        //    display7SEG2(yellow_duration);
            display2DigitNumberWay2(yellow_duration);
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <fsm_select_mode_run+0x2e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f906 	bl	8000904 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 80016f8:	f7ff f998 	bl	8000a2c <isButton3Pressed>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10a      	bne.n	8001718 <fsm_select_mode_run+0x2b4>
               // Save the duration value and exit Mode 2
               setYellowLEDDuration(yellow_duration);
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <fsm_select_mode_run+0x2e8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fe2e 	bl	8001368 <setYellowLEDDuration>
                status_way1 = INIT_1;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <fsm_select_mode_run+0x2dc>)
 8001714:	2204      	movs	r2, #4
 8001716:	601a      	str	r2, [r3, #0]
           }
           if (timer0_flag == 1) {
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <fsm_select_mode_run+0x2d8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 8086 	bne.w	800182e <fsm_select_mode_run+0x3ca>
                status_way1 = INIT_1;
 8001722:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <fsm_select_mode_run+0x2cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <fsm_select_mode_run+0x2dc>)
 800172a:	2204      	movs	r2, #4
 800172c:	601a      	str	r2, [r3, #0]
           }
           break;
 800172e:	e07e      	b.n	800182e <fsm_select_mode_run+0x3ca>
 8001730:	200000ac 	.word	0x200000ac
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40010800 	.word	0x40010800
 800173c:	20000110 	.word	0x20000110
 8001740:	20000048 	.word	0x20000048
 8001744:	20000114 	.word	0x20000114
 8001748:	2000003c 	.word	0x2000003c
 800174c:	20000044 	.word	0x20000044
       case SELECT_MODE_4:
           display7SEG(4); // Display mode
 8001750:	2004      	movs	r0, #4
 8001752:	f7fe fcfb 	bl	800014c <display7SEG>

            // Blinking red LEDs at 2 Hz
           if (timer1_flag == 1) {
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <fsm_select_mode_run+0x3d4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d120      	bne.n	80017a0 <fsm_select_mode_run+0x33c>
               HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
 800175e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001762:	4836      	ldr	r0, [pc, #216]	@ (800183c <fsm_select_mode_run+0x3d8>)
 8001764:	f000 fe81 	bl	800246a <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001768:	2102      	movs	r1, #2
 800176a:	4834      	ldr	r0, [pc, #208]	@ (800183c <fsm_select_mode_run+0x3d8>)
 800176c:	f000 fe7d 	bl	800246a <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2101      	movs	r1, #1
 8001774:	4831      	ldr	r0, [pc, #196]	@ (800183c <fsm_select_mode_run+0x3d8>)
 8001776:	f000 fe60 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2108      	movs	r1, #8
 800177e:	482f      	ldr	r0, [pc, #188]	@ (800183c <fsm_select_mode_run+0x3d8>)
 8001780:	f000 fe5b 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	482c      	ldr	r0, [pc, #176]	@ (800183c <fsm_select_mode_run+0x3d8>)
 800178a:	f000 fe56 	bl	800243a <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001794:	4829      	ldr	r0, [pc, #164]	@ (800183c <fsm_select_mode_run+0x3d8>)
 8001796:	f000 fe50 	bl	800243a <HAL_GPIO_WritePin>

               setTimer1(250); // 0.5 seconds for 2 Hz blinking
 800179a:	20fa      	movs	r0, #250	@ 0xfa
 800179c:	f000 f992 	bl	8001ac4 <setTimer1>
           }

           if (isButton1Pressed() == 1) {
 80017a0:	f7ff f920 	bl	80009e4 <isButton1Pressed>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <fsm_select_mode_run+0x354>
               status_way1 = INIT_mode;
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <fsm_select_mode_run+0x3dc>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	601a      	str	r2, [r3, #0]
               setTimer0(3000);
 80017b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017b4:	f000 f96c 	bl	8001a90 <setTimer0>

           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 80017b8:	f7ff f926 	bl	8000a08 <isButton2Pressed>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10f      	bne.n	80017e2 <fsm_select_mode_run+0x37e>
               green_duration++;
 80017c2:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <fsm_select_mode_run+0x3e0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <fsm_select_mode_run+0x3e0>)
 80017ca:	6013      	str	r3, [r2, #0]
               if (green_duration > 99) {
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <fsm_select_mode_run+0x3e0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b63      	cmp	r3, #99	@ 0x63
 80017d2:	dd02      	ble.n	80017da <fsm_select_mode_run+0x376>
                   green_duration = 1; // Wrap around to 1 if it exceeds 9
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <fsm_select_mode_run+0x3e0>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
               }
           setTimer0(10000);
 80017da:	f242 7010 	movw	r0, #10000	@ 0x2710
 80017de:	f000 f957 	bl	8001a90 <setTimer0>
           }

        //    display7SEG2(green_duration);
            display2DigitNumberWay2(green_duration);
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <fsm_select_mode_run+0x3e0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f88c 	bl	8000904 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 80017ec:	f7ff f91e 	bl	8000a2c <isButton3Pressed>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10a      	bne.n	800180c <fsm_select_mode_run+0x3a8>
               // Save the duration value and exit Mode 2
               setGreenLEDDuration(green_duration);
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <fsm_select_mode_run+0x3e0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fd36 	bl	800126c <setGreenLEDDuration>
                status_way1 = INIT_1;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <fsm_select_mode_run+0x3dc>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <fsm_select_mode_run+0x3e4>)
 8001808:	2204      	movs	r2, #4
 800180a:	601a      	str	r2, [r3, #0]
           }
           if (timer0_flag == 1) {
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <fsm_select_mode_run+0x3e8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10e      	bne.n	8001832 <fsm_select_mode_run+0x3ce>
               status_way1 = INIT_1;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <fsm_select_mode_run+0x3dc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
               status_way2 = INIT_2;
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <fsm_select_mode_run+0x3e4>)
 800181c:	2204      	movs	r2, #4
 800181e:	601a      	str	r2, [r3, #0]
           }
           break;
 8001820:	e007      	b.n	8001832 <fsm_select_mode_run+0x3ce>
       default:
           // status_way1 = INIT;
           break;
 8001822:	bf00      	nop
 8001824:	e006      	b.n	8001834 <fsm_select_mode_run+0x3d0>
           break;
 8001826:	bf00      	nop
 8001828:	e004      	b.n	8001834 <fsm_select_mode_run+0x3d0>
           break;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <fsm_select_mode_run+0x3d0>
           break;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <fsm_select_mode_run+0x3d0>
           break;
 8001832:	bf00      	nop
   }
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000114 	.word	0x20000114
 800183c:	40010c00 	.word	0x40010c00
 8001840:	200000ac 	.word	0x200000ac
 8001844:	20000040 	.word	0x20000040
 8001848:	20000048 	.word	0x20000048
 800184c:	20000110 	.word	0x20000110

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001854:	f000 faee 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001858:	f000 f812 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185c:	f000 f898 	bl	8001990 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001860:	f000 f84a 	bl	80018f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001864:	4805      	ldr	r0, [pc, #20]	@ (800187c <main+0x2c>)
 8001866:	f001 fa47 	bl	8002cf8 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  	fsm_automatic_run_way1();
 800186a:	f7ff f9f3 	bl	8000c54 <fsm_automatic_run_way1>
	  	fsm_automatic_run_way2();
 800186e:	f7ff fb61 	bl	8000f34 <fsm_automatic_run_way2>
	  	fsm_select_mode_run();
 8001872:	f7ff fdf7 	bl	8001464 <fsm_select_mode_run>
	  	fsm_automatic_run_way1();
 8001876:	bf00      	nop
 8001878:	e7f7      	b.n	800186a <main+0x1a>
 800187a:	bf00      	nop
 800187c:	200000b0 	.word	0x200000b0

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b090      	sub	sp, #64	@ 0x40
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0318 	add.w	r3, r7, #24
 800188a:	2228      	movs	r2, #40	@ 0x28
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fdbe 	bl	8003410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a6:	2301      	movs	r3, #1
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018aa:	2310      	movs	r3, #16
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fdf0 	bl	800249c <HAL_RCC_OscConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018c2:	f000 f8df 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c6:	230f      	movs	r3, #15
 80018c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f85e 	bl	80029a0 <HAL_RCC_ClockConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018ea:	f000 f8cb 	bl	8001a84 <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3740      	adds	r7, #64	@ 0x40
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <MX_TIM2_Init+0x94>)
 8001916:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <MX_TIM2_Init+0x94>)
 800191e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001922:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <MX_TIM2_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <MX_TIM2_Init+0x94>)
 800192c:	2209      	movs	r2, #9
 800192e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_TIM2_Init+0x94>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <MX_TIM2_Init+0x94>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193c:	4813      	ldr	r0, [pc, #76]	@ (800198c <MX_TIM2_Init+0x94>)
 800193e:	f001 f98b 	bl	8002c58 <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001948:	f000 f89c 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001950:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	4619      	mov	r1, r3
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <MX_TIM2_Init+0x94>)
 800195a:	f001 fb09 	bl	8002f70 <HAL_TIM_ConfigClockSource>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001964:	f000 f88e 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_TIM2_Init+0x94>)
 8001976:	f001 fce1 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001980:	f000 f880 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200000b0 	.word	0x200000b0

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <MX_GPIO_Init+0xd0>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80019ec:	2200      	movs	r2, #0
 80019ee:	f649 711f 	movw	r1, #40735	@ 0x9f1f
 80019f2:	481c      	ldr	r0, [pc, #112]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 80019f4:	f000 fd21 	bl	800243a <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN1_1_Pin
                          |EN1_2_Pin|EN2_1_Pin|EN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_11_Pin|LED_12_Pin
 80019f8:	2200      	movs	r2, #0
 80019fa:	f647 31fb 	movw	r1, #31739	@ 0x7bfb
 80019fe:	481a      	ldr	r0, [pc, #104]	@ (8001a68 <MX_GPIO_Init+0xd8>)
 8001a00:	f000 fd1b 	bl	800243a <HAL_GPIO_WritePin>
                          |SEG_4b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin EN1_1_Pin
                           EN1_2_Pin EN2_1_Pin EN2_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8001a04:	f649 731f 	movw	r3, #40735	@ 0x9f1f
 8001a08:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN1_1_Pin
                          |EN1_2_Pin|EN2_1_Pin|EN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4811      	ldr	r0, [pc, #68]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 8001a1e:	f000 fb79 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001a22:	23e0      	movs	r3, #224	@ 0xe0
 8001a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	4619      	mov	r1, r3
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <MX_GPIO_Init+0xd4>)
 8001a36:	f000 fb6d 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_11_Pin LED_12_Pin
                           SEG_5b_Pin SEG_6b_Pin LED_3_Pin LED_4_Pin
                           SEG_0b_Pin SEG_1b_Pin SEG_2b_Pin SEG_3b_Pin
                           SEG_4b_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_11_Pin|LED_12_Pin
 8001a3a:	f647 33fb 	movw	r3, #31739	@ 0x7bfb
 8001a3e:	613b      	str	r3, [r7, #16]
                          |SEG_5b_Pin|SEG_6b_Pin|LED_3_Pin|LED_4_Pin
                          |SEG_0b_Pin|SEG_1b_Pin|SEG_2b_Pin|SEG_3b_Pin
                          |SEG_4b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_GPIO_Init+0xd8>)
 8001a54:	f000 fb5e 	bl	8002114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001a74:	f7fe ffec 	bl	8000a50 <getKeyInput>
    timer_run();
 8001a78:	f000 f8a6 	bl	8001bc8 <timer_run>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <setTimer0>:
int timer3_flag = 0;
int timer4_flag = 0;
int timer5_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0(int duration) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  timer0_counter = duration / TIMER_CYCLE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <setTimer0+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa2:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <setTimer0+0x2c>)
 8001aa4:	6013      	str	r3, [r2, #0]
  timer0_flag = 0;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <setTimer0+0x30>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000058 	.word	0x20000058
 8001abc:	200000f8 	.word	0x200000f8
 8001ac0:	20000110 	.word	0x20000110

08001ac4 <setTimer1>:

void setTimer1(int duration) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  timer1_counter = duration / TIMER_CYCLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <setTimer1+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ad6:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <setTimer1+0x2c>)
 8001ad8:	6013      	str	r3, [r2, #0]
  timer1_flag = 0;
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <setTimer1+0x30>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000058 	.word	0x20000058
 8001af0:	200000fc 	.word	0x200000fc
 8001af4:	20000114 	.word	0x20000114

08001af8 <setTimer2>:

void setTimer2(int duration) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  timer2_counter = duration / TIMER_CYCLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <setTimer2+0x28>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b0a:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <setTimer2+0x2c>)
 8001b0c:	6013      	str	r3, [r2, #0]
  timer2_flag = 0;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <setTimer2+0x30>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000058 	.word	0x20000058
 8001b24:	20000100 	.word	0x20000100
 8001b28:	20000118 	.word	0x20000118

08001b2c <setTimer3>:

void setTimer3(int duration) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <setTimer3+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b3e:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <setTimer3+0x2c>)
 8001b40:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <setTimer3+0x30>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000058 	.word	0x20000058
 8001b58:	20000104 	.word	0x20000104
 8001b5c:	2000011c 	.word	0x2000011c

08001b60 <setTimer4>:

void setTimer4(int duration) {
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    timer4_counter = duration / TIMER_CYCLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <setTimer4+0x28>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b72:	4a06      	ldr	r2, [pc, #24]	@ (8001b8c <setTimer4+0x2c>)
 8001b74:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <setTimer4+0x30>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000058 	.word	0x20000058
 8001b8c:	20000108 	.word	0x20000108
 8001b90:	20000120 	.word	0x20000120

08001b94 <setTimer5>:

void setTimer5(int duration) {
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    timer5_counter = duration / TIMER_CYCLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <setTimer5+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <setTimer5+0x2c>)
 8001ba8:	6013      	str	r3, [r2, #0]
    timer5_flag = 0;
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <setTimer5+0x30>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000058 	.word	0x20000058
 8001bc0:	2000010c 	.word	0x2000010c
 8001bc4:	20000124 	.word	0x20000124

08001bc8 <timer_run>:

void timer_run() {
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  if (timer0_counter > 0) {
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <timer_run+0xcc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dd0b      	ble.n	8001bec <timer_run+0x24>
    timer0_counter--;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <timer_run+0xcc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a2e      	ldr	r2, [pc, #184]	@ (8001c94 <timer_run+0xcc>)
 8001bdc:	6013      	str	r3, [r2, #0]
    if (timer0_counter == 0) {
 8001bde:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <timer_run+0xcc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <timer_run+0x24>
      timer0_flag = 1;
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <timer_run+0xd0>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
    }
  }

  if (timer1_counter > 0) {
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <timer_run+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dd0b      	ble.n	8001c0c <timer_run+0x44>
    timer1_counter--;
 8001bf4:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <timer_run+0xd4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <timer_run+0xd4>)
 8001bfc:	6013      	str	r3, [r2, #0]
    if (timer1_counter == 0) {
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <timer_run+0xd4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <timer_run+0x44>
      timer1_flag = 1;
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <timer_run+0xd8>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
    }
  }

  if (timer2_counter > 0) {
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <timer_run+0xdc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dd0b      	ble.n	8001c2c <timer_run+0x64>
    timer2_counter--;
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <timer_run+0xdc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ca4 <timer_run+0xdc>)
 8001c1c:	6013      	str	r3, [r2, #0]
    if (timer2_counter == 0) {
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <timer_run+0xdc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <timer_run+0x64>
      timer2_flag = 1;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <timer_run+0xe0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    }
  }
    if (timer3_counter > 0) {
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <timer_run+0xe4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dd0b      	ble.n	8001c4c <timer_run+0x84>
      timer3_counter--;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <timer_run+0xe4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <timer_run+0xe4>)
 8001c3c:	6013      	str	r3, [r2, #0]
      if (timer3_counter == 0) {
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <timer_run+0xe4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <timer_run+0x84>
          timer3_flag = 1;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <timer_run+0xe8>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
      }
  }
  if (timer4_counter > 0) {
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <timer_run+0xec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd0b      	ble.n	8001c6c <timer_run+0xa4>
      timer4_counter--;
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <timer_run+0xec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	4a16      	ldr	r2, [pc, #88]	@ (8001cb4 <timer_run+0xec>)
 8001c5c:	6013      	str	r3, [r2, #0]
      if (timer4_counter == 0) {
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <timer_run+0xec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <timer_run+0xa4>
          timer4_flag = 1;
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <timer_run+0xf0>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
      }
  }
  if (timer5_counter > 0) {
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <timer_run+0xf4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dd0b      	ble.n	8001c8c <timer_run+0xc4>
      timer5_counter--;
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <timer_run+0xf4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <timer_run+0xf4>)
 8001c7c:	6013      	str	r3, [r2, #0]
      if (timer5_counter == 0) {
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <timer_run+0xf4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <timer_run+0xc4>
          timer5_flag = 1;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <timer_run+0xf8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
      }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	200000f8 	.word	0x200000f8
 8001c98:	20000110 	.word	0x20000110
 8001c9c:	200000fc 	.word	0x200000fc
 8001ca0:	20000114 	.word	0x20000114
 8001ca4:	20000100 	.word	0x20000100
 8001ca8:	20000118 	.word	0x20000118
 8001cac:	20000104 	.word	0x20000104
 8001cb0:	2000011c 	.word	0x2000011c
 8001cb4:	20000108 	.word	0x20000108
 8001cb8:	20000120 	.word	0x20000120
 8001cbc:	2000010c 	.word	0x2000010c
 8001cc0:	20000124 	.word	0x20000124

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_MspInit+0x5c>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <HAL_MspInit+0x5c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6193      	str	r3, [r2, #24]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_MspInit+0x5c>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <HAL_MspInit+0x5c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d20 <HAL_MspInit+0x5c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <HAL_MspInit+0x5c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_MspInit+0x60>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_MspInit+0x60>)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000

08001d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d38:	d113      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	201c      	movs	r0, #28
 8001d58:	f000 f9a5 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d5c:	201c      	movs	r0, #28
 8001d5e:	f000 f9be 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f000 f87e 	bl	8001ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <TIM2_IRQHandler+0x10>)
 8001dce:	f000 ffdf 	bl	8002d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200000b0 	.word	0x200000b0

08001ddc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de8:	f7ff fff8 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dee:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001df0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e04:	4c09      	ldr	r4, [pc, #36]	@ (8001e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e12:	f001 fb05 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e16:	f7ff fd1b 	bl	8001850 <main>
  bx lr
 8001e1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e24:	080034ac 	.word	0x080034ac
  ldr r2, =_sbss
 8001e28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e2c:	2000012c 	.word	0x2000012c

08001e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_2_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_Init+0x28>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a07      	ldr	r2, [pc, #28]	@ (8001e5c <HAL_Init+0x28>)
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f000 f923 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f000 f808 	bl	8001e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e50:	f7ff ff38 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_InitTick+0x54>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_InitTick+0x58>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f93b 	bl	80020fa <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00e      	b.n	8001eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d80a      	bhi.n	8001eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f000 f903 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea0:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <HAL_InitTick+0x5c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000005c 	.word	0x2000005c
 8001eb8:	20000064 	.word	0x20000064
 8001ebc:	20000060 	.word	0x20000060

08001ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_IncTick+0x1c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_IncTick+0x20>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a03      	ldr	r2, [pc, #12]	@ (8001ee0 <HAL_IncTick+0x20>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	20000064 	.word	0x20000064
 8001ee0:	20000128 	.word	0x20000128

08001ee4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b02      	ldr	r3, [pc, #8]	@ (8001ef4 <HAL_GetTick+0x10>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000128 	.word	0x20000128

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4906      	ldr	r1, [pc, #24]	@ (8001f90 <__NVIC_EnableIRQ+0x34>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	@ (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff90 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff2d 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff42 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff90 	bl	8001fe8 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5f 	bl	8001f94 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff35 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b08b      	sub	sp, #44	@ 0x2c
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	e161      	b.n	80023ec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002128:	2201      	movs	r2, #1
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	429a      	cmp	r2, r3
 8002142:	f040 8150 	bne.w	80023e6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4a97      	ldr	r2, [pc, #604]	@ (80023a8 <HAL_GPIO_Init+0x294>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d05e      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002150:	4a95      	ldr	r2, [pc, #596]	@ (80023a8 <HAL_GPIO_Init+0x294>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d875      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 8002156:	4a95      	ldr	r2, [pc, #596]	@ (80023ac <HAL_GPIO_Init+0x298>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d058      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 800215c:	4a93      	ldr	r2, [pc, #588]	@ (80023ac <HAL_GPIO_Init+0x298>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d86f      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 8002162:	4a93      	ldr	r2, [pc, #588]	@ (80023b0 <HAL_GPIO_Init+0x29c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d052      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002168:	4a91      	ldr	r2, [pc, #580]	@ (80023b0 <HAL_GPIO_Init+0x29c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d869      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 800216e:	4a91      	ldr	r2, [pc, #580]	@ (80023b4 <HAL_GPIO_Init+0x2a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d04c      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002174:	4a8f      	ldr	r2, [pc, #572]	@ (80023b4 <HAL_GPIO_Init+0x2a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d863      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 800217a:	4a8f      	ldr	r2, [pc, #572]	@ (80023b8 <HAL_GPIO_Init+0x2a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d046      	beq.n	800220e <HAL_GPIO_Init+0xfa>
 8002180:	4a8d      	ldr	r2, [pc, #564]	@ (80023b8 <HAL_GPIO_Init+0x2a4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d85d      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 8002186:	2b12      	cmp	r3, #18
 8002188:	d82a      	bhi.n	80021e0 <HAL_GPIO_Init+0xcc>
 800218a:	2b12      	cmp	r3, #18
 800218c:	d859      	bhi.n	8002242 <HAL_GPIO_Init+0x12e>
 800218e:	a201      	add	r2, pc, #4	@ (adr r2, 8002194 <HAL_GPIO_Init+0x80>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	0800220f 	.word	0x0800220f
 8002198:	080021e9 	.word	0x080021e9
 800219c:	080021fb 	.word	0x080021fb
 80021a0:	0800223d 	.word	0x0800223d
 80021a4:	08002243 	.word	0x08002243
 80021a8:	08002243 	.word	0x08002243
 80021ac:	08002243 	.word	0x08002243
 80021b0:	08002243 	.word	0x08002243
 80021b4:	08002243 	.word	0x08002243
 80021b8:	08002243 	.word	0x08002243
 80021bc:	08002243 	.word	0x08002243
 80021c0:	08002243 	.word	0x08002243
 80021c4:	08002243 	.word	0x08002243
 80021c8:	08002243 	.word	0x08002243
 80021cc:	08002243 	.word	0x08002243
 80021d0:	08002243 	.word	0x08002243
 80021d4:	08002243 	.word	0x08002243
 80021d8:	080021f1 	.word	0x080021f1
 80021dc:	08002205 	.word	0x08002205
 80021e0:	4a76      	ldr	r2, [pc, #472]	@ (80023bc <HAL_GPIO_Init+0x2a8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021e6:	e02c      	b.n	8002242 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e029      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	3304      	adds	r3, #4
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e024      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	3308      	adds	r3, #8
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e01f      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	330c      	adds	r3, #12
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e01a      	b.n	8002244 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002216:	2304      	movs	r3, #4
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e013      	b.n	8002244 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002224:	2308      	movs	r3, #8
 8002226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	611a      	str	r2, [r3, #16]
          break;
 800222e:	e009      	b.n	8002244 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002230:	2308      	movs	r3, #8
 8002232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	615a      	str	r2, [r3, #20]
          break;
 800223a:	e003      	b.n	8002244 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x130>
          break;
 8002242:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2bff      	cmp	r3, #255	@ 0xff
 8002248:	d801      	bhi.n	800224e <HAL_GPIO_Init+0x13a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_Init+0x13e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2bff      	cmp	r3, #255	@ 0xff
 8002258:	d802      	bhi.n	8002260 <HAL_GPIO_Init+0x14c>
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	e002      	b.n	8002266 <HAL_GPIO_Init+0x152>
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	3b08      	subs	r3, #8
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	210f      	movs	r1, #15
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80a9 	beq.w	80023e6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002294:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_GPIO_Init+0x2ac>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a49      	ldr	r2, [pc, #292]	@ (80023c0 <HAL_GPIO_Init+0x2ac>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_GPIO_Init+0x2ac>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022ac:	4a45      	ldr	r2, [pc, #276]	@ (80023c4 <HAL_GPIO_Init+0x2b0>)
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <HAL_GPIO_Init+0x2b4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00d      	beq.n	80022f4 <HAL_GPIO_Init+0x1e0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <HAL_GPIO_Init+0x2b8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <HAL_GPIO_Init+0x1dc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a3b      	ldr	r2, [pc, #236]	@ (80023d0 <HAL_GPIO_Init+0x2bc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022ec:	2303      	movs	r3, #3
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002306:	492f      	ldr	r1, [pc, #188]	@ (80023c4 <HAL_GPIO_Init+0x2b0>)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	492b      	ldr	r1, [pc, #172]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4927      	ldr	r1, [pc, #156]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4921      	ldr	r1, [pc, #132]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002356:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	491d      	ldr	r1, [pc, #116]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002360:	4013      	ands	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002370:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4917      	ldr	r1, [pc, #92]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4913      	ldr	r1, [pc, #76]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 8002388:	4013      	ands	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01f      	beq.n	80023d8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002398:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <HAL_GPIO_Init+0x2c0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e01f      	b.n	80023e6 <HAL_GPIO_Init+0x2d2>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_GPIO_Init+0x2f4>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	43db      	mvns	r3, r3
 80023e0:	4909      	ldr	r1, [pc, #36]	@ (8002408 <HAL_GPIO_Init+0x2f4>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f47f ae96 	bne.w	8002128 <HAL_GPIO_Init+0x14>
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	372c      	adds	r7, #44	@ 0x2c
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e001      	b.n	800242e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]
 8002446:	4613      	mov	r3, r2
 8002448:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800244a:	787b      	ldrb	r3, [r7, #1]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002456:	e003      	b.n	8002460 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	041a      	lsls	r2, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43d9      	mvns	r1, r3
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	400b      	ands	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e272      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	4b92      	ldr	r3, [pc, #584]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
 80024d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b89      	ldr	r3, [pc, #548]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x12c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e24c      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x76>
 8002504:	4b80      	ldr	r3, [pc, #512]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7f      	ldr	r2, [pc, #508]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b7b      	ldr	r3, [pc, #492]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7a      	ldr	r2, [pc, #488]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b78      	ldr	r3, [pc, #480]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a77      	ldr	r2, [pc, #476]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xbc>
 800253e:	4b72      	ldr	r3, [pc, #456]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a71      	ldr	r2, [pc, #452]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002558:	4b6b      	ldr	r3, [pc, #428]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6a      	ldr	r2, [pc, #424]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b68      	ldr	r3, [pc, #416]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a67      	ldr	r2, [pc, #412]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fcb4 	bl	8001ee4 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fcb0 	bl	8001ee4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e200      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe4>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fca0 	bl	8001ee4 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fc9c 	bl	8001ee4 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	@ 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1ec      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10c>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
 80025ee:	4b46      	ldr	r3, [pc, #280]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1c0      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4939      	ldr	r1, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <HAL_RCC_OscConfig+0x270>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fc55 	bl	8001ee4 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff fc51 	bl	8001ee4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1a1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4927      	ldr	r1, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_RCC_OscConfig+0x270>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff fc34 	bl	8001ee4 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7ff fc30 	bl	8001ee4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e180      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03a      	beq.n	8002720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <HAL_RCC_OscConfig+0x274>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7ff fc14 	bl	8001ee4 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7ff fc10 	bl	8001ee4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e160      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 fa9c 	bl	8002c1c <RCC_Delay>
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff fbfa 	bl	8001ee4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f2:	e00f      	b.n	8002714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff fbf6 	bl	8001ee4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d908      	bls.n	8002714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e146      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	42420000 	.word	0x42420000
 8002710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b92      	ldr	r3, [pc, #584]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e9      	bne.n	80026f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a6 	beq.w	800287a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b8b      	ldr	r3, [pc, #556]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a87      	ldr	r2, [pc, #540]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]
 800274a:	4b85      	ldr	r3, [pc, #532]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b82      	ldr	r3, [pc, #520]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b7f      	ldr	r3, [pc, #508]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7e      	ldr	r2, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7ff fbb7 	bl	8001ee4 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7ff fbb3 	bl	8001ee4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	@ 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e103      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	e02d      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a69      	ldr	r2, [pc, #420]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	4b67      	ldr	r3, [pc, #412]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a66      	ldr	r2, [pc, #408]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x356>
 80027d8:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a60      	ldr	r2, [pc, #384]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b58      	ldr	r3, [pc, #352]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a57      	ldr	r2, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff fb67 	bl	8001ee4 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff fb63 	bl	8001ee4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0b1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x37e>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fb51 	bl	8001ee4 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7ff fb4d 	bl	8001ee4 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e09b      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b40      	ldr	r3, [pc, #256]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b3c      	ldr	r3, [pc, #240]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d061      	beq.n	8002954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d146      	bne.n	8002926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b33      	ldr	r3, [pc, #204]	@ (8002968 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fb21 	bl	8001ee4 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff fb1d 	bl	8001ee4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e06d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d108      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4921      	ldr	r1, [pc, #132]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a19      	ldr	r1, [r3, #32]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	430b      	orrs	r3, r1
 80028f2:	491b      	ldr	r1, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff faf1 	bl	8001ee4 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7ff faed 	bl	8001ee4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e03d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
 8002924:	e035      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fada 	bl	8001ee4 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff fad6 	bl	8001ee4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e026      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x498>
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e019      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_OscConfig+0x500>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0d0      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d910      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b67      	ldr	r3, [pc, #412]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4965      	ldr	r1, [pc, #404]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a58      	ldr	r2, [pc, #352]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a52      	ldr	r2, [pc, #328]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d040      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e073      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4936      	ldr	r1, [pc, #216]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7ff fa28 	bl	8001ee4 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7ff fa24 	bl	8001ee4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e053      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d210      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4922      	ldr	r1, [pc, #136]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	@ (8002b6c <HAL_RCC_ClockConfig+0x1cc>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x1d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f986 	bl	8001e60 <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08003480 	.word	0x08003480
 8002b6c:	2000005c 	.word	0x2000005c
 8002b70:	20000060 	.word	0x20000060

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x36>
 8002ba2:	e027      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0c5b      	lsrs	r3, r3, #17
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf6:	613b      	str	r3, [r7, #16]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	693b      	ldr	r3, [r7, #16]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	007a1200 	.word	0x007a1200
 8002c10:	08003490 	.word	0x08003490
 8002c14:	080034a0 	.word	0x080034a0
 8002c18:	003d0900 	.word	0x003d0900

08002c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	@ (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	2000005c 	.word	0x2000005c
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff f852 	bl	8001d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fa56 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e035      	b.n	8002d7c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a16      	ldr	r2, [pc, #88]	@ (8002d88 <HAL_TIM_Base_Start_IT+0x90>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0x4e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0x4e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <HAL_TIM_Base_Start_IT+0x94>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d010      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	e007      	b.n	8002d7a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400

08002d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f998 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f98b 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f99a 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d020      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0204 	mvn.w	r2, #4
 8002e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f972 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f965 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f974 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d020      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01b      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f94c 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f93f 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f94e 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d020      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0210 	mvn.w	r2, #16
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2208      	movs	r2, #8
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f926 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f919 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f928 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0201 	mvn.w	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fdb8 	bl	8001a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa6f 	bl	80033fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8f8 	bl	8003134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0220 	mvn.w	r2, #32
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa42 	bl	80033ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_ConfigClockSource+0x1c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0b4      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x186>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc4:	d03e      	beq.n	8003044 <HAL_TIM_ConfigClockSource+0xd4>
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fca:	f200 8087 	bhi.w	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	f000 8086 	beq.w	80030e2 <HAL_TIM_ConfigClockSource+0x172>
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fda:	d87f      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b70      	cmp	r3, #112	@ 0x70
 8002fde:	d01a      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xa6>
 8002fe0:	2b70      	cmp	r3, #112	@ 0x70
 8002fe2:	d87b      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b60      	cmp	r3, #96	@ 0x60
 8002fe6:	d050      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x11a>
 8002fe8:	2b60      	cmp	r3, #96	@ 0x60
 8002fea:	d877      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b50      	cmp	r3, #80	@ 0x50
 8002fee:	d03c      	beq.n	800306a <HAL_TIM_ConfigClockSource+0xfa>
 8002ff0:	2b50      	cmp	r3, #80	@ 0x50
 8002ff2:	d873      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b40      	cmp	r3, #64	@ 0x40
 8002ff6:	d058      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x13a>
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d86f      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b30      	cmp	r3, #48	@ 0x30
 8002ffe:	d064      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	2b30      	cmp	r3, #48	@ 0x30
 8003002:	d86b      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b20      	cmp	r3, #32
 8003006:	d060      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d867      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05c      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003010:	2b10      	cmp	r3, #16
 8003012:	d05a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	e062      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003026:	f000 f96a 	bl	80032fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	609a      	str	r2, [r3, #8]
      break;
 8003042:	e04f      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003054:	f000 f953 	bl	80032fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003066:	609a      	str	r2, [r3, #8]
      break;
 8003068:	e03c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	461a      	mov	r2, r3
 8003078:	f000 f8ca 	bl	8003210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2150      	movs	r1, #80	@ 0x50
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f921 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8003088:	e02c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	461a      	mov	r2, r3
 8003098:	f000 f8e8 	bl	800326c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2160      	movs	r1, #96	@ 0x60
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f911 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030a8:	e01c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 f8aa 	bl	8003210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2140      	movs	r1, #64	@ 0x40
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f901 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030c8:	e00c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 f8f8 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030da:	e003      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e000      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <TIM_Base_SetConfig+0xc0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x28>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x28>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a28      	ldr	r2, [pc, #160]	@ (800320c <TIM_Base_SetConfig+0xc4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a20      	ldr	r2, [pc, #128]	@ (8003208 <TIM_Base_SetConfig+0xc0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x52>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x52>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <TIM_Base_SetConfig+0xc4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003208 <TIM_Base_SetConfig+0xc0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f023 0201 	bic.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	611a      	str	r2, [r3, #16]
  }
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400

08003210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0201 	bic.w	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 030a 	bic.w	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0210 	bic.w	r2, r3, #16
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	031b      	lsls	r3, r3, #12
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f043 0307 	orr.w	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021a      	lsls	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	431a      	orrs	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e041      	b.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a0:	d004      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a10      	ldr	r2, [pc, #64]	@ (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40000400 	.word	0x40000400

080033ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <memset>:
 8003410:	4603      	mov	r3, r0
 8003412:	4402      	add	r2, r0
 8003414:	4293      	cmp	r3, r2
 8003416:	d100      	bne.n	800341a <memset+0xa>
 8003418:	4770      	bx	lr
 800341a:	f803 1b01 	strb.w	r1, [r3], #1
 800341e:	e7f9      	b.n	8003414 <memset+0x4>

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	2600      	movs	r6, #0
 8003424:	4d0c      	ldr	r5, [pc, #48]	@ (8003458 <__libc_init_array+0x38>)
 8003426:	4c0d      	ldr	r4, [pc, #52]	@ (800345c <__libc_init_array+0x3c>)
 8003428:	1b64      	subs	r4, r4, r5
 800342a:	10a4      	asrs	r4, r4, #2
 800342c:	42a6      	cmp	r6, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	f000 f81a 	bl	8003468 <_init>
 8003434:	2600      	movs	r6, #0
 8003436:	4d0a      	ldr	r5, [pc, #40]	@ (8003460 <__libc_init_array+0x40>)
 8003438:	4c0a      	ldr	r4, [pc, #40]	@ (8003464 <__libc_init_array+0x44>)
 800343a:	1b64      	subs	r4, r4, r5
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	42a6      	cmp	r6, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f855 3b04 	ldr.w	r3, [r5], #4
 8003448:	4798      	blx	r3
 800344a:	3601      	adds	r6, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003452:	4798      	blx	r3
 8003454:	3601      	adds	r6, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	080034a4 	.word	0x080034a4
 800345c:	080034a4 	.word	0x080034a4
 8003460:	080034a4 	.word	0x080034a4
 8003464:	080034a8 	.word	0x080034a8

08003468 <_init>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	bf00      	nop
 800346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346e:	bc08      	pop	{r3}
 8003470:	469e      	mov	lr, r3
 8003472:	4770      	bx	lr

08003474 <_fini>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr
