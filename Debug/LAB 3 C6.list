
LAB 3 C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003218  08003218  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003218  08003218  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003218  08003218  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00004218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800321c  0800321c  0000421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003220  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000068  08003288  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003288  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089a9  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2b  00000000  00000000  0000da3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0000f668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fd  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d91  00000000  00000000  000108f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf09  00000000  00000000  00027686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828f0  00000000  00000000  0003458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000b6ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b9864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080031dc 	.word	0x080031dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080031dc 	.word	0x080031dc

0800014c <display7SEG>:
    HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
}

  void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	f2c0 819c 	blt.w	8000494 <display7SEG+0x348>
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b09      	cmp	r3, #9
 8000160:	f300 8198 	bgt.w	8000494 <display7SEG+0x348>
    switch (num) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b09      	cmp	r3, #9
 8000168:	f200 8196 	bhi.w	8000498 <display7SEG+0x34c>
 800016c:	a201      	add	r2, pc, #4	@ (adr r2, 8000174 <display7SEG+0x28>)
 800016e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000172:	bf00      	nop
 8000174:	0800019d 	.word	0x0800019d
 8000178:	080001e9 	.word	0x080001e9
 800017c:	08000235 	.word	0x08000235
 8000180:	08000281 	.word	0x08000281
 8000184:	080002cd 	.word	0x080002cd
 8000188:	08000319 	.word	0x08000319
 800018c:	08000365 	.word	0x08000365
 8000190:	080003b1 	.word	0x080003b1
 8000194:	080003fd 	.word	0x080003fd
 8000198:	08000449 	.word	0x08000449
        case 0:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2101      	movs	r1, #1
 80001a0:	48bf      	ldr	r0, [pc, #764]	@ (80004a0 <display7SEG+0x354>)
 80001a2:	f002 f804 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2102      	movs	r1, #2
 80001aa:	48bd      	ldr	r0, [pc, #756]	@ (80004a0 <display7SEG+0x354>)
 80001ac:	f001 ffff 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2104      	movs	r1, #4
 80001b4:	48ba      	ldr	r0, [pc, #744]	@ (80004a0 <display7SEG+0x354>)
 80001b6:	f001 fffa 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2108      	movs	r1, #8
 80001be:	48b8      	ldr	r0, [pc, #736]	@ (80004a0 <display7SEG+0x354>)
 80001c0:	f001 fff5 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2110      	movs	r1, #16
 80001c8:	48b5      	ldr	r0, [pc, #724]	@ (80004a0 <display7SEG+0x354>)
 80001ca:	f001 fff0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d4:	48b2      	ldr	r0, [pc, #712]	@ (80004a0 <display7SEG+0x354>)
 80001d6:	f001 ffea 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e0:	48af      	ldr	r0, [pc, #700]	@ (80004a0 <display7SEG+0x354>)
 80001e2:	f001 ffe4 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80001e6:	e158      	b.n	800049a <display7SEG+0x34e>
        case 1:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2101      	movs	r1, #1
 80001ec:	48ac      	ldr	r0, [pc, #688]	@ (80004a0 <display7SEG+0x354>)
 80001ee:	f001 ffde 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2102      	movs	r1, #2
 80001f6:	48aa      	ldr	r0, [pc, #680]	@ (80004a0 <display7SEG+0x354>)
 80001f8:	f001 ffd9 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	48a7      	ldr	r0, [pc, #668]	@ (80004a0 <display7SEG+0x354>)
 8000202:	f001 ffd4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2108      	movs	r1, #8
 800020a:	48a5      	ldr	r0, [pc, #660]	@ (80004a0 <display7SEG+0x354>)
 800020c:	f001 ffcf 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2110      	movs	r1, #16
 8000214:	48a2      	ldr	r0, [pc, #648]	@ (80004a0 <display7SEG+0x354>)
 8000216:	f001 ffca 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000220:	489f      	ldr	r0, [pc, #636]	@ (80004a0 <display7SEG+0x354>)
 8000222:	f001 ffc4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022c:	489c      	ldr	r0, [pc, #624]	@ (80004a0 <display7SEG+0x354>)
 800022e:	f001 ffbe 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000232:	e132      	b.n	800049a <display7SEG+0x34e>
        case 2:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	2101      	movs	r1, #1
 8000238:	4899      	ldr	r0, [pc, #612]	@ (80004a0 <display7SEG+0x354>)
 800023a:	f001 ffb8 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2102      	movs	r1, #2
 8000242:	4897      	ldr	r0, [pc, #604]	@ (80004a0 <display7SEG+0x354>)
 8000244:	f001 ffb3 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2104      	movs	r1, #4
 800024c:	4894      	ldr	r0, [pc, #592]	@ (80004a0 <display7SEG+0x354>)
 800024e:	f001 ffae 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2108      	movs	r1, #8
 8000256:	4892      	ldr	r0, [pc, #584]	@ (80004a0 <display7SEG+0x354>)
 8000258:	f001 ffa9 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2110      	movs	r1, #16
 8000260:	488f      	ldr	r0, [pc, #572]	@ (80004a0 <display7SEG+0x354>)
 8000262:	f001 ffa4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800026c:	488c      	ldr	r0, [pc, #560]	@ (80004a0 <display7SEG+0x354>)
 800026e:	f001 ff9e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000278:	4889      	ldr	r0, [pc, #548]	@ (80004a0 <display7SEG+0x354>)
 800027a:	f001 ff98 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 800027e:	e10c      	b.n	800049a <display7SEG+0x34e>
        case 3:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2101      	movs	r1, #1
 8000284:	4886      	ldr	r0, [pc, #536]	@ (80004a0 <display7SEG+0x354>)
 8000286:	f001 ff92 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	4884      	ldr	r0, [pc, #528]	@ (80004a0 <display7SEG+0x354>)
 8000290:	f001 ff8d 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2104      	movs	r1, #4
 8000298:	4881      	ldr	r0, [pc, #516]	@ (80004a0 <display7SEG+0x354>)
 800029a:	f001 ff88 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2108      	movs	r1, #8
 80002a2:	487f      	ldr	r0, [pc, #508]	@ (80004a0 <display7SEG+0x354>)
 80002a4:	f001 ff83 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	487c      	ldr	r0, [pc, #496]	@ (80004a0 <display7SEG+0x354>)
 80002ae:	f001 ff7e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b8:	4879      	ldr	r0, [pc, #484]	@ (80004a0 <display7SEG+0x354>)
 80002ba:	f001 ff78 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002c4:	4876      	ldr	r0, [pc, #472]	@ (80004a0 <display7SEG+0x354>)
 80002c6:	f001 ff72 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80002ca:	e0e6      	b.n	800049a <display7SEG+0x34e>
        case 4:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4873      	ldr	r0, [pc, #460]	@ (80004a0 <display7SEG+0x354>)
 80002d2:	f001 ff6c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2102      	movs	r1, #2
 80002da:	4871      	ldr	r0, [pc, #452]	@ (80004a0 <display7SEG+0x354>)
 80002dc:	f001 ff67 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2104      	movs	r1, #4
 80002e4:	486e      	ldr	r0, [pc, #440]	@ (80004a0 <display7SEG+0x354>)
 80002e6:	f001 ff62 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	486c      	ldr	r0, [pc, #432]	@ (80004a0 <display7SEG+0x354>)
 80002f0:	f001 ff5d 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2110      	movs	r1, #16
 80002f8:	4869      	ldr	r0, [pc, #420]	@ (80004a0 <display7SEG+0x354>)
 80002fa:	f001 ff58 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000304:	4866      	ldr	r0, [pc, #408]	@ (80004a0 <display7SEG+0x354>)
 8000306:	f001 ff52 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000310:	4863      	ldr	r0, [pc, #396]	@ (80004a0 <display7SEG+0x354>)
 8000312:	f001 ff4c 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000316:	e0c0      	b.n	800049a <display7SEG+0x34e>
        case 5:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	4860      	ldr	r0, [pc, #384]	@ (80004a0 <display7SEG+0x354>)
 800031e:	f001 ff46 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2102      	movs	r1, #2
 8000326:	485e      	ldr	r0, [pc, #376]	@ (80004a0 <display7SEG+0x354>)
 8000328:	f001 ff41 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	485b      	ldr	r0, [pc, #364]	@ (80004a0 <display7SEG+0x354>)
 8000332:	f001 ff3c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2108      	movs	r1, #8
 800033a:	4859      	ldr	r0, [pc, #356]	@ (80004a0 <display7SEG+0x354>)
 800033c:	f001 ff37 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	4856      	ldr	r0, [pc, #344]	@ (80004a0 <display7SEG+0x354>)
 8000346:	f001 ff32 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000350:	4853      	ldr	r0, [pc, #332]	@ (80004a0 <display7SEG+0x354>)
 8000352:	f001 ff2c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800035c:	4850      	ldr	r0, [pc, #320]	@ (80004a0 <display7SEG+0x354>)
 800035e:	f001 ff26 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000362:	e09a      	b.n	800049a <display7SEG+0x34e>
        case 6:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2101      	movs	r1, #1
 8000368:	484d      	ldr	r0, [pc, #308]	@ (80004a0 <display7SEG+0x354>)
 800036a:	f001 ff20 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2102      	movs	r1, #2
 8000372:	484b      	ldr	r0, [pc, #300]	@ (80004a0 <display7SEG+0x354>)
 8000374:	f001 ff1b 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2104      	movs	r1, #4
 800037c:	4848      	ldr	r0, [pc, #288]	@ (80004a0 <display7SEG+0x354>)
 800037e:	f001 ff16 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2108      	movs	r1, #8
 8000386:	4846      	ldr	r0, [pc, #280]	@ (80004a0 <display7SEG+0x354>)
 8000388:	f001 ff11 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2110      	movs	r1, #16
 8000390:	4843      	ldr	r0, [pc, #268]	@ (80004a0 <display7SEG+0x354>)
 8000392:	f001 ff0c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800039c:	4840      	ldr	r0, [pc, #256]	@ (80004a0 <display7SEG+0x354>)
 800039e:	f001 ff06 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003a8:	483d      	ldr	r0, [pc, #244]	@ (80004a0 <display7SEG+0x354>)
 80003aa:	f001 ff00 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80003ae:	e074      	b.n	800049a <display7SEG+0x34e>
        case 7:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2101      	movs	r1, #1
 80003b4:	483a      	ldr	r0, [pc, #232]	@ (80004a0 <display7SEG+0x354>)
 80003b6:	f001 fefa 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2102      	movs	r1, #2
 80003be:	4838      	ldr	r0, [pc, #224]	@ (80004a0 <display7SEG+0x354>)
 80003c0:	f001 fef5 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2104      	movs	r1, #4
 80003c8:	4835      	ldr	r0, [pc, #212]	@ (80004a0 <display7SEG+0x354>)
 80003ca:	f001 fef0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2108      	movs	r1, #8
 80003d2:	4833      	ldr	r0, [pc, #204]	@ (80004a0 <display7SEG+0x354>)
 80003d4:	f001 feeb 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2110      	movs	r1, #16
 80003dc:	4830      	ldr	r0, [pc, #192]	@ (80004a0 <display7SEG+0x354>)
 80003de:	f001 fee6 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003e8:	482d      	ldr	r0, [pc, #180]	@ (80004a0 <display7SEG+0x354>)
 80003ea:	f001 fee0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003f4:	482a      	ldr	r0, [pc, #168]	@ (80004a0 <display7SEG+0x354>)
 80003f6:	f001 feda 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80003fa:	e04e      	b.n	800049a <display7SEG+0x34e>
        case 8:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2101      	movs	r1, #1
 8000400:	4827      	ldr	r0, [pc, #156]	@ (80004a0 <display7SEG+0x354>)
 8000402:	f001 fed4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2102      	movs	r1, #2
 800040a:	4825      	ldr	r0, [pc, #148]	@ (80004a0 <display7SEG+0x354>)
 800040c:	f001 fecf 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	4822      	ldr	r0, [pc, #136]	@ (80004a0 <display7SEG+0x354>)
 8000416:	f001 feca 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	4820      	ldr	r0, [pc, #128]	@ (80004a0 <display7SEG+0x354>)
 8000420:	f001 fec5 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	481d      	ldr	r0, [pc, #116]	@ (80004a0 <display7SEG+0x354>)
 800042a:	f001 fec0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000434:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <display7SEG+0x354>)
 8000436:	f001 feba 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000440:	4817      	ldr	r0, [pc, #92]	@ (80004a0 <display7SEG+0x354>)
 8000442:	f001 feb4 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000446:	e028      	b.n	800049a <display7SEG+0x34e>
        case 9:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2101      	movs	r1, #1
 800044c:	4814      	ldr	r0, [pc, #80]	@ (80004a0 <display7SEG+0x354>)
 800044e:	f001 feae 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	4812      	ldr	r0, [pc, #72]	@ (80004a0 <display7SEG+0x354>)
 8000458:	f001 fea9 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2104      	movs	r1, #4
 8000460:	480f      	ldr	r0, [pc, #60]	@ (80004a0 <display7SEG+0x354>)
 8000462:	f001 fea4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2108      	movs	r1, #8
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <display7SEG+0x354>)
 800046c:	f001 fe9f 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	480a      	ldr	r0, [pc, #40]	@ (80004a0 <display7SEG+0x354>)
 8000476:	f001 fe9a 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000480:	4807      	ldr	r0, [pc, #28]	@ (80004a0 <display7SEG+0x354>)
 8000482:	f001 fe94 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <display7SEG+0x354>)
 800048e:	f001 fe8e 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000492:	e002      	b.n	800049a <display7SEG+0x34e>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000494:	bf00      	nop
 8000496:	e000      	b.n	800049a <display7SEG+0x34e>
        default:
            // Handle invalid input
            break;
 8000498:	bf00      	nop
    }
  }
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010800 	.word	0x40010800

080004a4 <display7SEG2>:

  void display7SEG2(int num) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	f2c0 81b0 	blt.w	8000814 <display7SEG2+0x370>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b09      	cmp	r3, #9
 80004b8:	f300 81ac 	bgt.w	8000814 <display7SEG2+0x370>
    switch (num) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b09      	cmp	r3, #9
 80004c0:	f200 81aa 	bhi.w	8000818 <display7SEG2+0x374>
 80004c4:	a201      	add	r2, pc, #4	@ (adr r2, 80004cc <display7SEG2+0x28>)
 80004c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ca:	bf00      	nop
 80004cc:	080004f5 	.word	0x080004f5
 80004d0:	08000545 	.word	0x08000545
 80004d4:	08000595 	.word	0x08000595
 80004d8:	080005e5 	.word	0x080005e5
 80004dc:	08000635 	.word	0x08000635
 80004e0:	08000685 	.word	0x08000685
 80004e4:	080006d5 	.word	0x080006d5
 80004e8:	08000725 	.word	0x08000725
 80004ec:	08000775 	.word	0x08000775
 80004f0:	080007c5 	.word	0x080007c5
        case 0:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	48c9      	ldr	r0, [pc, #804]	@ (8000820 <display7SEG2+0x37c>)
 80004fa:	f001 fe58 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	@ 0x40
 8000502:	48c7      	ldr	r0, [pc, #796]	@ (8000820 <display7SEG2+0x37c>)
 8000504:	f001 fe53 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	@ 0x80
 800050c:	48c4      	ldr	r0, [pc, #784]	@ (8000820 <display7SEG2+0x37c>)
 800050e:	f001 fe4e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000518:	48c1      	ldr	r0, [pc, #772]	@ (8000820 <display7SEG2+0x37c>)
 800051a:	f001 fe48 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000524:	48be      	ldr	r0, [pc, #760]	@ (8000820 <display7SEG2+0x37c>)
 8000526:	f001 fe42 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000530:	48bb      	ldr	r0, [pc, #748]	@ (8000820 <display7SEG2+0x37c>)
 8000532:	f001 fe3c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053c:	48b8      	ldr	r0, [pc, #736]	@ (8000820 <display7SEG2+0x37c>)
 800053e:	f001 fe36 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000542:	e16a      	b.n	800081a <display7SEG2+0x376>
        case 1:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	48b5      	ldr	r0, [pc, #724]	@ (8000820 <display7SEG2+0x37c>)
 800054a:	f001 fe30 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	@ 0x40
 8000552:	48b3      	ldr	r0, [pc, #716]	@ (8000820 <display7SEG2+0x37c>)
 8000554:	f001 fe2b 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2180      	movs	r1, #128	@ 0x80
 800055c:	48b0      	ldr	r0, [pc, #704]	@ (8000820 <display7SEG2+0x37c>)
 800055e:	f001 fe26 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000568:	48ad      	ldr	r0, [pc, #692]	@ (8000820 <display7SEG2+0x37c>)
 800056a:	f001 fe20 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000574:	48aa      	ldr	r0, [pc, #680]	@ (8000820 <display7SEG2+0x37c>)
 8000576:	f001 fe1a 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000580:	48a7      	ldr	r0, [pc, #668]	@ (8000820 <display7SEG2+0x37c>)
 8000582:	f001 fe14 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058c:	48a4      	ldr	r0, [pc, #656]	@ (8000820 <display7SEG2+0x37c>)
 800058e:	f001 fe0e 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000592:	e142      	b.n	800081a <display7SEG2+0x376>
        case 2:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2120      	movs	r1, #32
 8000598:	48a1      	ldr	r0, [pc, #644]	@ (8000820 <display7SEG2+0x37c>)
 800059a:	f001 fe08 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	@ 0x40
 80005a2:	489f      	ldr	r0, [pc, #636]	@ (8000820 <display7SEG2+0x37c>)
 80005a4:	f001 fe03 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	489c      	ldr	r0, [pc, #624]	@ (8000820 <display7SEG2+0x37c>)
 80005ae:	f001 fdfe 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b8:	4899      	ldr	r0, [pc, #612]	@ (8000820 <display7SEG2+0x37c>)
 80005ba:	f001 fdf8 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c4:	4896      	ldr	r0, [pc, #600]	@ (8000820 <display7SEG2+0x37c>)
 80005c6:	f001 fdf2 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4893      	ldr	r0, [pc, #588]	@ (8000820 <display7SEG2+0x37c>)
 80005d2:	f001 fdec 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005dc:	4890      	ldr	r0, [pc, #576]	@ (8000820 <display7SEG2+0x37c>)
 80005de:	f001 fde6 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80005e2:	e11a      	b.n	800081a <display7SEG2+0x376>
        case 3:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2120      	movs	r1, #32
 80005e8:	488d      	ldr	r0, [pc, #564]	@ (8000820 <display7SEG2+0x37c>)
 80005ea:	f001 fde0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	@ 0x40
 80005f2:	488b      	ldr	r0, [pc, #556]	@ (8000820 <display7SEG2+0x37c>)
 80005f4:	f001 fddb 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	@ 0x80
 80005fc:	4888      	ldr	r0, [pc, #544]	@ (8000820 <display7SEG2+0x37c>)
 80005fe:	f001 fdd6 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	4885      	ldr	r0, [pc, #532]	@ (8000820 <display7SEG2+0x37c>)
 800060a:	f001 fdd0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000614:	4882      	ldr	r0, [pc, #520]	@ (8000820 <display7SEG2+0x37c>)
 8000616:	f001 fdca 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000620:	487f      	ldr	r0, [pc, #508]	@ (8000820 <display7SEG2+0x37c>)
 8000622:	f001 fdc4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062c:	487c      	ldr	r0, [pc, #496]	@ (8000820 <display7SEG2+0x37c>)
 800062e:	f001 fdbe 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000632:	e0f2      	b.n	800081a <display7SEG2+0x376>
        case 4:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	4879      	ldr	r0, [pc, #484]	@ (8000820 <display7SEG2+0x37c>)
 800063a:	f001 fdb8 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	4877      	ldr	r0, [pc, #476]	@ (8000820 <display7SEG2+0x37c>)
 8000644:	f001 fdb3 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	4874      	ldr	r0, [pc, #464]	@ (8000820 <display7SEG2+0x37c>)
 800064e:	f001 fdae 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000658:	4871      	ldr	r0, [pc, #452]	@ (8000820 <display7SEG2+0x37c>)
 800065a:	f001 fda8 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000664:	486e      	ldr	r0, [pc, #440]	@ (8000820 <display7SEG2+0x37c>)
 8000666:	f001 fda2 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000670:	486b      	ldr	r0, [pc, #428]	@ (8000820 <display7SEG2+0x37c>)
 8000672:	f001 fd9c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800067c:	4868      	ldr	r0, [pc, #416]	@ (8000820 <display7SEG2+0x37c>)
 800067e:	f001 fd96 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000682:	e0ca      	b.n	800081a <display7SEG2+0x376>
        case 5:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2120      	movs	r1, #32
 8000688:	4865      	ldr	r0, [pc, #404]	@ (8000820 <display7SEG2+0x37c>)
 800068a:	f001 fd90 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2140      	movs	r1, #64	@ 0x40
 8000692:	4863      	ldr	r0, [pc, #396]	@ (8000820 <display7SEG2+0x37c>)
 8000694:	f001 fd8b 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	4860      	ldr	r0, [pc, #384]	@ (8000820 <display7SEG2+0x37c>)
 800069e:	f001 fd86 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a8:	485d      	ldr	r0, [pc, #372]	@ (8000820 <display7SEG2+0x37c>)
 80006aa:	f001 fd80 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b4:	485a      	ldr	r0, [pc, #360]	@ (8000820 <display7SEG2+0x37c>)
 80006b6:	f001 fd7a 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	@ (8000820 <display7SEG2+0x37c>)
 80006c2:	f001 fd74 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006cc:	4854      	ldr	r0, [pc, #336]	@ (8000820 <display7SEG2+0x37c>)
 80006ce:	f001 fd6e 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80006d2:	e0a2      	b.n	800081a <display7SEG2+0x376>
        case 6:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	4851      	ldr	r0, [pc, #324]	@ (8000820 <display7SEG2+0x37c>)
 80006da:	f001 fd68 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	484f      	ldr	r0, [pc, #316]	@ (8000820 <display7SEG2+0x37c>)
 80006e4:	f001 fd63 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	484c      	ldr	r0, [pc, #304]	@ (8000820 <display7SEG2+0x37c>)
 80006ee:	f001 fd5e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f8:	4849      	ldr	r0, [pc, #292]	@ (8000820 <display7SEG2+0x37c>)
 80006fa:	f001 fd58 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000704:	4846      	ldr	r0, [pc, #280]	@ (8000820 <display7SEG2+0x37c>)
 8000706:	f001 fd52 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000710:	4843      	ldr	r0, [pc, #268]	@ (8000820 <display7SEG2+0x37c>)
 8000712:	f001 fd4c 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071c:	4840      	ldr	r0, [pc, #256]	@ (8000820 <display7SEG2+0x37c>)
 800071e:	f001 fd46 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000722:	e07a      	b.n	800081a <display7SEG2+0x376>
        case 7:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	483d      	ldr	r0, [pc, #244]	@ (8000820 <display7SEG2+0x37c>)
 800072a:	f001 fd40 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2140      	movs	r1, #64	@ 0x40
 8000732:	483b      	ldr	r0, [pc, #236]	@ (8000820 <display7SEG2+0x37c>)
 8000734:	f001 fd3b 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	4838      	ldr	r0, [pc, #224]	@ (8000820 <display7SEG2+0x37c>)
 800073e:	f001 fd36 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	4835      	ldr	r0, [pc, #212]	@ (8000820 <display7SEG2+0x37c>)
 800074a:	f001 fd30 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000754:	4832      	ldr	r0, [pc, #200]	@ (8000820 <display7SEG2+0x37c>)
 8000756:	f001 fd2a 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000760:	482f      	ldr	r0, [pc, #188]	@ (8000820 <display7SEG2+0x37c>)
 8000762:	f001 fd24 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800076c:	482c      	ldr	r0, [pc, #176]	@ (8000820 <display7SEG2+0x37c>)
 800076e:	f001 fd1e 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000772:	e052      	b.n	800081a <display7SEG2+0x376>
        case 8:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	4829      	ldr	r0, [pc, #164]	@ (8000820 <display7SEG2+0x37c>)
 800077a:	f001 fd18 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2140      	movs	r1, #64	@ 0x40
 8000782:	4827      	ldr	r0, [pc, #156]	@ (8000820 <display7SEG2+0x37c>)
 8000784:	f001 fd13 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	@ 0x80
 800078c:	4824      	ldr	r0, [pc, #144]	@ (8000820 <display7SEG2+0x37c>)
 800078e:	f001 fd0e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	4821      	ldr	r0, [pc, #132]	@ (8000820 <display7SEG2+0x37c>)
 800079a:	f001 fd08 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a4:	481e      	ldr	r0, [pc, #120]	@ (8000820 <display7SEG2+0x37c>)
 80007a6:	f001 fd02 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b0:	481b      	ldr	r0, [pc, #108]	@ (8000820 <display7SEG2+0x37c>)
 80007b2:	f001 fcfc 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007bc:	4818      	ldr	r0, [pc, #96]	@ (8000820 <display7SEG2+0x37c>)
 80007be:	f001 fcf6 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 80007c2:	e02a      	b.n	800081a <display7SEG2+0x376>
        case 9:
            HAL_GPIO_WritePin(SEG_0b_GPIO_Port, SEG_0b_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2120      	movs	r1, #32
 80007c8:	4815      	ldr	r0, [pc, #84]	@ (8000820 <display7SEG2+0x37c>)
 80007ca:	f001 fcf0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1b_GPIO_Port, SEG_1b_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	4813      	ldr	r0, [pc, #76]	@ (8000820 <display7SEG2+0x37c>)
 80007d4:	f001 fceb 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2b_GPIO_Port, SEG_2b_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	4810      	ldr	r0, [pc, #64]	@ (8000820 <display7SEG2+0x37c>)
 80007de:	f001 fce6 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3b_GPIO_Port, SEG_3b_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	480d      	ldr	r0, [pc, #52]	@ (8000820 <display7SEG2+0x37c>)
 80007ea:	f001 fce0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4b_GPIO_Port, SEG_4b_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007f4:	480a      	ldr	r0, [pc, #40]	@ (8000820 <display7SEG2+0x37c>)
 80007f6:	f001 fcda 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5b_GPIO_Port, SEG_5b_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <display7SEG2+0x37c>)
 8000802:	f001 fcd4 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6b_GPIO_Port, SEG_6b_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <display7SEG2+0x37c>)
 800080e:	f001 fcce 	bl	80021ae <HAL_GPIO_WritePin>
            break;
 8000812:	e002      	b.n	800081a <display7SEG2+0x376>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <display7SEG2+0x376>
        default:
            // Handle invalid input
            break;
 8000818:	bf00      	nop
    }
  }
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010c00 	.word	0x40010c00

08000824 <display2DigitNumberWay1>:


void display2DigitNumberWay1(int number) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    static int digit = 0; // 0 for tens, 1 for units

    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db5b      	blt.n	80008ea <display2DigitNumberWay1+0xc6>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b63      	cmp	r3, #99	@ 0x63
 8000836:	dc58      	bgt.n	80008ea <display2DigitNumberWay1+0xc6>

    if (timer5_flag == 1) {
 8000838:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <display2DigitNumberWay1+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d155      	bne.n	80008ec <display2DigitNumberWay1+0xc8>
        setTimer5(100); // Reset the timer for multiplexing
 8000840:	2064      	movs	r0, #100	@ 0x64
 8000842:	f001 f861 	bl	8001908 <setTimer5>

        if (number <= 9) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b09      	cmp	r3, #9
 800084a:	dc0f      	bgt.n	800086c <display2DigitNumberWay1+0x48>
            // For numbers less than or equal to 9, display the same number on both segments
            HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); // Enable first segment
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000852:	4829      	ldr	r0, [pc, #164]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 8000854:	f001 fcab 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET); // Enable second segment (same digit)
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800085e:	4826      	ldr	r0, [pc, #152]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 8000860:	f001 fca5 	bl	80021ae <HAL_GPIO_WritePin>
            display7SEG(number); // Display the same number on both segments
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fc71 	bl	800014c <display7SEG>
 800086a:	e03f      	b.n	80008ec <display2DigitNumberWay1+0xc8>
        } else {
            if (digit == 0) {
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <display2DigitNumberWay1+0xd8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11a      	bne.n	80008aa <display2DigitNumberWay1+0x86>
                // Display tens digit
                int tens = number / 10; // Get the tens digit
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a22      	ldr	r2, [pc, #136]	@ (8000900 <display2DigitNumberWay1+0xdc>)
 8000878:	fb82 1203 	smull	r1, r2, r2, r3
 800087c:	1092      	asrs	r2, r2, #2
 800087e:	17db      	asrs	r3, r3, #31
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	60bb      	str	r3, [r7, #8]
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); // Enable tens
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088a:	481b      	ldr	r0, [pc, #108]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 800088c:	f001 fc8f 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_SET);   // Disable units
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000896:	4818      	ldr	r0, [pc, #96]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 8000898:	f001 fc89 	bl	80021ae <HAL_GPIO_WritePin>
                display7SEG(tens); // Display the tens digit on the 7-segment
 800089c:	68b8      	ldr	r0, [r7, #8]
 800089e:	f7ff fc55 	bl	800014c <display7SEG>
                digit = 1; // Switch to units digit next
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <display2DigitNumberWay1+0xd8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e020      	b.n	80008ec <display2DigitNumberWay1+0xc8>
            } else {
                // Display units digit
                int units = number % 10; // Get the units digit
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <display2DigitNumberWay1+0xdc>)
 80008ae:	fb83 1302 	smull	r1, r3, r3, r2
 80008b2:	1099      	asrs	r1, r3, #2
 80008b4:	17d3      	asrs	r3, r2, #31
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	60fb      	str	r3, [r7, #12]
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET); // Enable units
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 80008cc:	f001 fc6f 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_SET);   // Disable tens
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d6:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <display2DigitNumberWay1+0xd4>)
 80008d8:	f001 fc69 	bl	80021ae <HAL_GPIO_WritePin>
                display7SEG(units); // Display the units digit on the 7-segment
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fc35 	bl	800014c <display7SEG>
                digit = 0; // Switch to tens digit next
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <display2DigitNumberWay1+0xd8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e000      	b.n	80008ec <display2DigitNumberWay1+0xc8>
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 80008ea:	bf00      	nop
            }
        }
    }
}
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000124 	.word	0x20000124
 80008f8:	40010800 	.word	0x40010800
 80008fc:	20000084 	.word	0x20000084
 8000900:	66666667 	.word	0x66666667

08000904 <display2DigitNumberWay2>:


void display2DigitNumberWay2(int number) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    static int digit = 0; // 0 for tens, 1 for units

    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db5b      	blt.n	80009ca <display2DigitNumberWay2+0xc6>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b63      	cmp	r3, #99	@ 0x63
 8000916:	dc58      	bgt.n	80009ca <display2DigitNumberWay2+0xc6>

    if (timer4_flag == 1) {
 8000918:	4b2e      	ldr	r3, [pc, #184]	@ (80009d4 <display2DigitNumberWay2+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d155      	bne.n	80009cc <display2DigitNumberWay2+0xc8>
        setTimer4(100); // Reset the timer for multiplexing
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f000 ffd7 	bl	80018d4 <setTimer4>
        if (number <= 9) {
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b09      	cmp	r3, #9
 800092a:	dc0f      	bgt.n	800094c <display2DigitNumberWay2+0x48>
            // For numbers less than or equal to 9, display the same number on both segments
            
            HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); // Enable first segment
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000932:	4829      	ldr	r0, [pc, #164]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 8000934:	f001 fc3b 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET); // Enable second segment (same digit)
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800093e:	4826      	ldr	r0, [pc, #152]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 8000940:	f001 fc35 	bl	80021ae <HAL_GPIO_WritePin>
            display7SEG2(number); // Display the same number for both segments
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fdad 	bl	80004a4 <display7SEG2>
 800094a:	e03f      	b.n	80009cc <display2DigitNumberWay2+0xc8>
        } else {
            if (digit == 0) {
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <display2DigitNumberWay2+0xd8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d11a      	bne.n	800098a <display2DigitNumberWay2+0x86>
                // Display tens digit
                int tens = number / 10; // Get the tens digit
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <display2DigitNumberWay2+0xdc>)
 8000958:	fb82 1203 	smull	r1, r2, r2, r3
 800095c:	1092      	asrs	r2, r2, #2
 800095e:	17db      	asrs	r3, r3, #31
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	60bb      	str	r3, [r7, #8]
                
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); // Enable tens
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096a:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 800096c:	f001 fc1f 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_SET);   // Disable units
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 8000978:	f001 fc19 	bl	80021ae <HAL_GPIO_WritePin>
                display7SEG2(tens); // Display the tens digit on the 7-segment
 800097c:	68b8      	ldr	r0, [r7, #8]
 800097e:	f7ff fd91 	bl	80004a4 <display7SEG2>
                digit = 1; // Switch to units digit next
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <display2DigitNumberWay2+0xd8>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e020      	b.n	80009cc <display2DigitNumberWay2+0xc8>
            } else {
                // Display units digit
                int units = number % 10; // Get the units digit
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <display2DigitNumberWay2+0xdc>)
 800098e:	fb83 1302 	smull	r1, r3, r3, r2
 8000992:	1099      	asrs	r1, r3, #2
 8000994:	17d3      	asrs	r3, r2, #31
 8000996:	1ac9      	subs	r1, r1, r3
 8000998:	460b      	mov	r3, r1
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	440b      	add	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	60fb      	str	r3, [r7, #12]

                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET); // Enable units
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 80009ac:	f001 fbff 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_SET);   // Disable tens
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <display2DigitNumberWay2+0xd4>)
 80009b8:	f001 fbf9 	bl	80021ae <HAL_GPIO_WritePin>
                display7SEG2(units); // Display the units digit on the 7-segment
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fd71 	bl	80004a4 <display7SEG2>
                digit = 0; // Switch to tens digit next
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <display2DigitNumberWay2+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e000      	b.n	80009cc <display2DigitNumberWay2+0xc8>
    if (number < 0 || number > 99) return; // Ensure the number is between 0 and 99
 80009ca:	bf00      	nop
            }
        }
    }
}
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000120 	.word	0x20000120
 80009d8:	40010800 	.word	0x40010800
 80009dc:	20000088 	.word	0x20000088
 80009e0:	66666667 	.word	0x66666667

080009e4 <isButton1Pressed>:
int button3_pressed = 0;
int button3_long_pressed_flag = 0;
int button3_flag = 0;

// Button 1 functions
int isButton1Pressed() {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    if (button1_flag == 1) {
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <isButton1Pressed+0x20>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d104      	bne.n	80009fa <isButton1Pressed+0x16>
        button1_flag = 0;
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <isButton1Pressed+0x20>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
        return 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <isButton1Pressed+0x18>
    }
    return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000090 	.word	0x20000090

08000a08 <isButton2Pressed>:
    }
    return 0;
}

// Button 2 functions
int isButton2Pressed() {
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
    if (button2_flag == 1) {
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <isButton2Pressed+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d104      	bne.n	8000a1e <isButton2Pressed+0x16>
        button2_flag = 0;
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <isButton2Pressed+0x20>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
        return 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <isButton2Pressed+0x18>
    }
    return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000098 	.word	0x20000098

08000a2c <isButton3Pressed>:
    }
    return 0;
}

// Button 3 functions
int isButton3Pressed() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
    if (button3_flag == 1) {
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <isButton3Pressed+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d104      	bne.n	8000a42 <isButton3Pressed+0x16>
        button3_flag = 0;
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <isButton3Pressed+0x20>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
        return 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <isButton3Pressed+0x18>
    }
    return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	200000a0 	.word	0x200000a0

08000a50 <getKeyInput>:
void subKeyProcess() {
    // TODO
    // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}

void getKeyInput() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    // Button 1
    KeyReg0_1 = KeyReg1_1;
 8000a54:	4b69      	ldr	r3, [pc, #420]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a69      	ldr	r2, [pc, #420]	@ (8000c00 <getKeyInput+0x1b0>)
 8000a5a:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg2_1;
 8000a5c:	4b69      	ldr	r3, [pc, #420]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a66      	ldr	r2, [pc, #408]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a62:	6013      	str	r3, [r2, #0]
    KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000a64:	2120      	movs	r1, #32
 8000a66:	4868      	ldr	r0, [pc, #416]	@ (8000c08 <getKeyInput+0x1b8>)
 8000a68:	f001 fb8a 	bl	8002180 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b64      	ldr	r3, [pc, #400]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a72:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)) {
 8000a74:	4b61      	ldr	r3, [pc, #388]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b61      	ldr	r3, [pc, #388]	@ (8000c00 <getKeyInput+0x1b0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d12f      	bne.n	8000ae0 <getKeyInput+0x90>
 8000a80:	4b5e      	ldr	r3, [pc, #376]	@ (8000bfc <getKeyInput+0x1ac>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b5f      	ldr	r3, [pc, #380]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d129      	bne.n	8000ae0 <getKeyInput+0x90>
        if (KeyReg2_1 != KeyReg3_1) {  // Button press detected
 8000a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b5e      	ldr	r3, [pc, #376]	@ (8000c0c <getKeyInput+0x1bc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d00f      	beq.n	8000ab8 <getKeyInput+0x68>
            KeyReg3_1 = KeyReg2_1;
 8000a98:	4b5a      	ldr	r3, [pc, #360]	@ (8000c04 <getKeyInput+0x1b4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a5b      	ldr	r2, [pc, #364]	@ (8000c0c <getKeyInput+0x1bc>)
 8000a9e:	6013      	str	r3, [r2, #0]

            if (KeyReg3_1 == PRESSED_STATE) {
 8000aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8000c0c <getKeyInput+0x1bc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11b      	bne.n	8000ae0 <getKeyInput+0x90>
                TimeOutForKeyPress_1 = 500;
 8000aa8:	4b59      	ldr	r3, [pc, #356]	@ (8000c10 <getKeyInput+0x1c0>)
 8000aaa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000aae:	601a      	str	r2, [r3, #0]
                button1_flag = 1;
 8000ab0:	4b58      	ldr	r3, [pc, #352]	@ (8000c14 <getKeyInput+0x1c4>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e013      	b.n	8000ae0 <getKeyInput+0x90>
            }
        } else {
            TimeOutForKeyPress_1--;  // Long press detection
 8000ab8:	4b55      	ldr	r3, [pc, #340]	@ (8000c10 <getKeyInput+0x1c0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a54      	ldr	r2, [pc, #336]	@ (8000c10 <getKeyInput+0x1c0>)
 8000ac0:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_1 == 0) {
 8000ac2:	4b53      	ldr	r3, [pc, #332]	@ (8000c10 <getKeyInput+0x1c0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10a      	bne.n	8000ae0 <getKeyInput+0x90>
                TimeOutForKeyPress_1 = 500;
 8000aca:	4b51      	ldr	r3, [pc, #324]	@ (8000c10 <getKeyInput+0x1c0>)
 8000acc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ad0:	601a      	str	r2, [r3, #0]
                if (KeyReg3_1 == PRESSED_STATE) {
 8000ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c0c <getKeyInput+0x1bc>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <getKeyInput+0x90>
                    button1_long_pressed_flag = 1;
 8000ada:	4b4f      	ldr	r3, [pc, #316]	@ (8000c18 <getKeyInput+0x1c8>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Button 2
    KeyReg0_2 = KeyReg1_2;
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <getKeyInput+0x1cc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8000c20 <getKeyInput+0x1d0>)
 8000ae6:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg2_2;
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c24 <getKeyInput+0x1d4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a4b      	ldr	r2, [pc, #300]	@ (8000c1c <getKeyInput+0x1cc>)
 8000aee:	6013      	str	r3, [r2, #0]
    KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	4845      	ldr	r0, [pc, #276]	@ (8000c08 <getKeyInput+0x1b8>)
 8000af4:	f001 fb44 	bl	8002180 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b49      	ldr	r3, [pc, #292]	@ (8000c24 <getKeyInput+0x1d4>)
 8000afe:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)) {
 8000b00:	4b46      	ldr	r3, [pc, #280]	@ (8000c1c <getKeyInput+0x1cc>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b46      	ldr	r3, [pc, #280]	@ (8000c20 <getKeyInput+0x1d0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d12f      	bne.n	8000b6c <getKeyInput+0x11c>
 8000b0c:	4b43      	ldr	r3, [pc, #268]	@ (8000c1c <getKeyInput+0x1cc>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b44      	ldr	r3, [pc, #272]	@ (8000c24 <getKeyInput+0x1d4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d129      	bne.n	8000b6c <getKeyInput+0x11c>
        if (KeyReg2_2 != KeyReg3_2) {  // Button press detected
 8000b18:	4b42      	ldr	r3, [pc, #264]	@ (8000c24 <getKeyInput+0x1d4>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b42      	ldr	r3, [pc, #264]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d00f      	beq.n	8000b44 <getKeyInput+0xf4>
            KeyReg3_2 = KeyReg2_2;
 8000b24:	4b3f      	ldr	r3, [pc, #252]	@ (8000c24 <getKeyInput+0x1d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a3f      	ldr	r2, [pc, #252]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b2a:	6013      	str	r3, [r2, #0]

            if (KeyReg3_2 == PRESSED_STATE) {
 8000b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d11b      	bne.n	8000b6c <getKeyInput+0x11c>
                TimeOutForKeyPress_2 = 500;
 8000b34:	4b3d      	ldr	r3, [pc, #244]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b36:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b3a:	601a      	str	r2, [r3, #0]
                button2_flag = 1;
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <getKeyInput+0x1e0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e013      	b.n	8000b6c <getKeyInput+0x11c>
            }
        } else {
            TimeOutForKeyPress_2--;  // Long press detection
 8000b44:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a38      	ldr	r2, [pc, #224]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b4c:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_2 == 0) {
 8000b4e:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <getKeyInput+0x11c>
                TimeOutForKeyPress_2 = 500;
 8000b56:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <getKeyInput+0x1dc>)
 8000b58:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b5c:	601a      	str	r2, [r3, #0]
                if (KeyReg3_2 == PRESSED_STATE) {
 8000b5e:	4b32      	ldr	r3, [pc, #200]	@ (8000c28 <getKeyInput+0x1d8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <getKeyInput+0x11c>
                    button2_long_pressed_flag = 1;
 8000b66:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <getKeyInput+0x1e4>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Button 3
    KeyReg0_3 = KeyReg1_3;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <getKeyInput+0x1ec>)
 8000b72:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg2_3;
 8000b74:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <getKeyInput+0x1f0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b7a:	6013      	str	r3, [r2, #0]
    KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	4822      	ldr	r0, [pc, #136]	@ (8000c08 <getKeyInput+0x1b8>)
 8000b80:	f001 fafe 	bl	8002180 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <getKeyInput+0x1f0>)
 8000b8a:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)) {
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b2a      	ldr	r3, [pc, #168]	@ (8000c3c <getKeyInput+0x1ec>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d12f      	bne.n	8000bf8 <getKeyInput+0x1a8>
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <getKeyInput+0x1e8>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <getKeyInput+0x1f0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d129      	bne.n	8000bf8 <getKeyInput+0x1a8>
        if (KeyReg2_3 != KeyReg3_3) {  // Button press detected
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <getKeyInput+0x1f0>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <getKeyInput+0x1f4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d00f      	beq.n	8000bd0 <getKeyInput+0x180>
            KeyReg3_3 = KeyReg2_3;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <getKeyInput+0x1f0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <getKeyInput+0x1f4>)
 8000bb6:	6013      	str	r3, [r2, #0]

            if (KeyReg3_3 == PRESSED_STATE) {
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <getKeyInput+0x1f4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11b      	bne.n	8000bf8 <getKeyInput+0x1a8>
                TimeOutForKeyPress_3 = 500;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bc2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bc6:	601a      	str	r2, [r3, #0]
                button3_flag = 1;
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <getKeyInput+0x1fc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
                    button3_long_pressed_flag = 1;
                }
            }
        }
    }
 8000bce:	e013      	b.n	8000bf8 <getKeyInput+0x1a8>
            TimeOutForKeyPress_3--;  // Long press detection
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bd8:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress_3 == 0) {
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <getKeyInput+0x1f8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10a      	bne.n	8000bf8 <getKeyInput+0x1a8>
                TimeOutForKeyPress_3 = 500;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <getKeyInput+0x1f8>)
 8000be4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000be8:	601a      	str	r2, [r3, #0]
                if (KeyReg3_3 == PRESSED_STATE) {
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <getKeyInput+0x1f4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <getKeyInput+0x1a8>
                    button3_long_pressed_flag = 1;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <getKeyInput+0x200>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000010 	.word	0x20000010
 8000c14:	20000090 	.word	0x20000090
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	20000018 	.word	0x20000018
 8000c20:	20000014 	.word	0x20000014
 8000c24:	2000001c 	.word	0x2000001c
 8000c28:	20000020 	.word	0x20000020
 8000c2c:	20000024 	.word	0x20000024
 8000c30:	20000098 	.word	0x20000098
 8000c34:	20000094 	.word	0x20000094
 8000c38:	2000002c 	.word	0x2000002c
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	20000030 	.word	0x20000030
 8000c44:	20000034 	.word	0x20000034
 8000c48:	20000038 	.word	0x20000038
 8000c4c:	200000a0 	.word	0x200000a0
 8000c50:	2000009c 	.word	0x2000009c

08000c54 <fsm_automatic_run_way1>:
 *      Author: admin
 */

#include "fsm_automatic.h"

void fsm_automatic_run_way1() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	    static int countdown_way1;
switch (status_way1) {
 8000c58:	4bac      	ldr	r3, [pc, #688]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	f200 814b 	bhi.w	8000ef8 <fsm_automatic_run_way1+0x2a4>
 8000c62:	a201      	add	r2, pc, #4	@ (adr r2, 8000c68 <fsm_automatic_run_way1+0x14>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000d05 	.word	0x08000d05
 8000c70:	08000dad 	.word	0x08000dad
 8000c74:	08000e53 	.word	0x08000e53
        case INIT_1:
            // Initialize all LEDs to off
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	48a4      	ldr	r0, [pc, #656]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000c7e:	f001 fa96 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c88:	48a1      	ldr	r0, [pc, #644]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000c8a:	f001 fa90 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c94:	489e      	ldr	r0, [pc, #632]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000c96:	f001 fa8a 	bl	80021ae <HAL_GPIO_WritePin>
            
            HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET); 
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca0:	489c      	ldr	r0, [pc, #624]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000ca2:	f001 fa84 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cac:	4899      	ldr	r0, [pc, #612]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000cae:	f001 fa7e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET); 
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb8:	4896      	ldr	r0, [pc, #600]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000cba:	f001 fa78 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET);  
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cc4:	4893      	ldr	r0, [pc, #588]	@ (8000f14 <fsm_automatic_run_way1+0x2c0>)
 8000cc6:	f001 fa72 	bl	80021ae <HAL_GPIO_WritePin>
            
            status_way1 = AUTO_RED_WAY1;
 8000cca:	4b90      	ldr	r3, [pc, #576]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]


            countdown_way1 = red_led_duration ;
 8000cd0:	4b91      	ldr	r3, [pc, #580]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a91      	ldr	r2, [pc, #580]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000cd6:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay1(countdown_way1);
 8000cd8:	4b90      	ldr	r3, [pc, #576]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fda1 	bl	8000824 <display2DigitNumberWay1>

            setTimer0(red_led_duration*1000);
 8000ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fd88 	bl	8001804 <setTimer0>
            setTimer1(1000); // Start the countdown timer
 8000cf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf8:	f000 fd9e 	bl	8001838 <setTimer1>
            setTimer5(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f000 fe03 	bl	8001908 <setTimer5>
            break;
 8000d02:	e100      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
        case AUTO_RED_WAY1:
            // Way 1 Red, Way 2 Green
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	4881      	ldr	r0, [pc, #516]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000d0a:	f001 fa50 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d14:	487e      	ldr	r0, [pc, #504]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000d16:	f001 fa4a 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d20:	487b      	ldr	r0, [pc, #492]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000d22:	f001 fa44 	bl	80021ae <HAL_GPIO_WritePin>

            if (timer1_flag == 1) {
 8000d26:	4b7e      	ldr	r3, [pc, #504]	@ (8000f20 <fsm_automatic_run_way1+0x2cc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d108      	bne.n	8000d40 <fsm_automatic_run_way1+0xec>
                setTimer1(1000); // Reset the countdown timer
 8000d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d32:	f000 fd81 	bl	8001838 <setTimer1>

                countdown_way1--;
 8000d36:	4b79      	ldr	r3, [pc, #484]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a77      	ldr	r2, [pc, #476]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d3e:	6013      	str	r3, [r2, #0]



            }
            display2DigitNumberWay1(countdown_way1);
 8000d40:	4b76      	ldr	r3, [pc, #472]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd6d 	bl	8000824 <display2DigitNumberWay1>

            if (isButton1Pressed() == 1) {
 8000d4a:	f7ff fe4b 	bl	80009e4 <isButton1Pressed>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d109      	bne.n	8000d68 <fsm_automatic_run_way1+0x114>
                status_way1 = INIT_mode;
 8000d54:	4b6d      	ldr	r3, [pc, #436]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000d56:	220a      	movs	r2, #10
 8000d58:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8000d5a:	4b72      	ldr	r3, [pc, #456]	@ (8000f24 <fsm_automatic_run_way1+0x2d0>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	601a      	str	r2, [r3, #0]
                setTimer0(10000);
 8000d60:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d64:	f000 fd4e 	bl	8001804 <setTimer0>
            }

            if (timer0_flag == 1) {
 8000d68:	4b6f      	ldr	r3, [pc, #444]	@ (8000f28 <fsm_automatic_run_way1+0x2d4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f040 80c5 	bne.w	8000efc <fsm_automatic_run_way1+0x2a8>
                status_way1 = AUTO_GREEN_WAY1;
 8000d72:	4b66      	ldr	r3, [pc, #408]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	601a      	str	r2, [r3, #0]
                setTimer0(green_led_duration*1000);
 8000d78:	4b6c      	ldr	r3, [pc, #432]	@ (8000f2c <fsm_automatic_run_way1+0x2d8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fd3d 	bl	8001804 <setTimer0>
				countdown_way1 = green_led_duration; // Reset countdown for next cycle
 8000d8a:	4b68      	ldr	r3, [pc, #416]	@ (8000f2c <fsm_automatic_run_way1+0x2d8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a63      	ldr	r2, [pc, #396]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d90:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay1(countdown_way1);
 8000d92:	4b62      	ldr	r3, [pc, #392]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fd44 	bl	8000824 <display2DigitNumberWay1>
				setTimer1(1000); // Start the countdown timer for the next state
 8000d9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da0:	f000 fd4a 	bl	8001838 <setTimer1>
                    setTimer5(10);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f000 fdaf 	bl	8001908 <setTimer5>
            }
            break;
 8000daa:	e0a7      	b.n	8000efc <fsm_automatic_run_way1+0x2a8>
        case AUTO_GREEN_WAY1:
            // Way 1 Red, Way 2 Yellow
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2101      	movs	r1, #1
 8000db0:	4857      	ldr	r0, [pc, #348]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000db2:	f001 f9fc 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dbc:	4854      	ldr	r0, [pc, #336]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000dbe:	f001 f9f6 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc8:	4851      	ldr	r0, [pc, #324]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000dca:	f001 f9f0 	bl	80021ae <HAL_GPIO_WritePin>

            if (timer1_flag == 1) {
 8000dce:	4b54      	ldr	r3, [pc, #336]	@ (8000f20 <fsm_automatic_run_way1+0x2cc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d108      	bne.n	8000de8 <fsm_automatic_run_way1+0x194>
                setTimer1(1000); // Reset the countdown timer
 8000dd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dda:	f000 fd2d 	bl	8001838 <setTimer1>
                countdown_way1--;
 8000dde:	4b4f      	ldr	r3, [pc, #316]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	4a4d      	ldr	r2, [pc, #308]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000de6:	6013      	str	r3, [r2, #0]

            }
            display2DigitNumberWay1(countdown_way1);
 8000de8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fd19 	bl	8000824 <display2DigitNumberWay1>


            if (isButton1Pressed() == 1) {
 8000df2:	f7ff fdf7 	bl	80009e4 <isButton1Pressed>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d109      	bne.n	8000e10 <fsm_automatic_run_way1+0x1bc>
                status_way1 = INIT_mode;
 8000dfc:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000dfe:	220a      	movs	r2, #10
 8000e00:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8000e02:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <fsm_automatic_run_way1+0x2d0>)
 8000e04:	220a      	movs	r2, #10
 8000e06:	601a      	str	r2, [r3, #0]
                setTimer0(10000);
 8000e08:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e0c:	f000 fcfa 	bl	8001804 <setTimer0>
            }

            if (timer0_flag == 1) {
 8000e10:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <fsm_automatic_run_way1+0x2d4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d173      	bne.n	8000f00 <fsm_automatic_run_way1+0x2ac>
                status_way1 = AUTO_YELLOW_WAY1;
 8000e18:	4b3c      	ldr	r3, [pc, #240]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	601a      	str	r2, [r3, #0]
                setTimer0(yellow_led_duration*1000);
 8000e1e:	4b44      	ldr	r3, [pc, #272]	@ (8000f30 <fsm_automatic_run_way1+0x2dc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fcea 	bl	8001804 <setTimer0>
				countdown_way1 = yellow_led_duration; // Reset countdown for next cycle
 8000e30:	4b3f      	ldr	r3, [pc, #252]	@ (8000f30 <fsm_automatic_run_way1+0x2dc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a39      	ldr	r2, [pc, #228]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e36:	6013      	str	r3, [r2, #0]
            display2DigitNumberWay1(countdown_way1);
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fcf1 	bl	8000824 <display2DigitNumberWay1>
			    setTimer1(1000); // Start the countdown timer for the next state
 8000e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e46:	f000 fcf7 	bl	8001838 <setTimer1>
                                setTimer5(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f000 fd5c 	bl	8001908 <setTimer5>
            }
            break;
 8000e50:	e056      	b.n	8000f00 <fsm_automatic_run_way1+0x2ac>
        case AUTO_YELLOW_WAY1:
            // Way 1 Green, Way 2 Red
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	482e      	ldr	r0, [pc, #184]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000e58:	f001 f9a9 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e62:	482b      	ldr	r0, [pc, #172]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000e64:	f001 f9a3 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6e:	4828      	ldr	r0, [pc, #160]	@ (8000f10 <fsm_automatic_run_way1+0x2bc>)
 8000e70:	f001 f99d 	bl	80021ae <HAL_GPIO_WritePin>




            if (timer1_flag == 1) {
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <fsm_automatic_run_way1+0x2cc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <fsm_automatic_run_way1+0x23a>
                setTimer1(1000); // Reset the countdown timer
 8000e7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e80:	f000 fcda 	bl	8001838 <setTimer1>
                countdown_way1--;
 8000e84:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e8c:	6013      	str	r3, [r2, #0]
  
                
            }
            display2DigitNumberWay1(countdown_way1);
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fcc6 	bl	8000824 <display2DigitNumberWay1>
            if (isButton1Pressed() == 1) {
 8000e98:	f7ff fda4 	bl	80009e4 <isButton1Pressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d109      	bne.n	8000eb6 <fsm_automatic_run_way1+0x262>
                status_way1 = INIT_mode;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_mode;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <fsm_automatic_run_way1+0x2d0>)
 8000eaa:	220a      	movs	r2, #10
 8000eac:	601a      	str	r2, [r3, #0]
                setTimer0(10000);
 8000eae:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000eb2:	f000 fca7 	bl	8001804 <setTimer0>
            }

            if (timer0_flag == 1) {
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <fsm_automatic_run_way1+0x2d4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d122      	bne.n	8000f04 <fsm_automatic_run_way1+0x2b0>
                status_way1 = AUTO_RED_WAY1;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <fsm_automatic_run_way1+0x2b8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
                setTimer0(red_led_duration*1000);
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fc97 	bl	8001804 <setTimer0>
				countdown_way1 = red_led_duration; // Reset countdown for next cycle
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <fsm_automatic_run_way1+0x2c4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000edc:	6013      	str	r3, [r2, #0]
                
            display2DigitNumberWay1(countdown_way1);
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <fsm_automatic_run_way1+0x2c8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc9e 	bl	8000824 <display2DigitNumberWay1>
				setTimer1(1000); // Start the countdown timer for the next state
 8000ee8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eec:	f000 fca4 	bl	8001838 <setTimer1>
                                setTimer5(10);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f000 fd09 	bl	8001908 <setTimer5>
            }
            break;
 8000ef6:	e005      	b.n	8000f04 <fsm_automatic_run_way1+0x2b0>
       

		
		default:
            break;
 8000ef8:	bf00      	nop
 8000efa:	e004      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
            break;
 8000efc:	bf00      	nop
 8000efe:	e002      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
            break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <fsm_automatic_run_way1+0x2b2>
            break;
 8000f04:	bf00      	nop
    }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000ac 	.word	0x200000ac
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40010800 	.word	0x40010800
 8000f18:	2000004c 	.word	0x2000004c
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	20000114 	.word	0x20000114
 8000f24:	20000048 	.word	0x20000048
 8000f28:	20000110 	.word	0x20000110
 8000f2c:	20000050 	.word	0x20000050
 8000f30:	20000054 	.word	0x20000054

08000f34 <fsm_automatic_run_way2>:

void fsm_automatic_run_way2() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    static int countdown_way2;
    switch (status_way2) {
 8000f38:	4b86      	ldr	r3, [pc, #536]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b04      	subs	r3, #4
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	f200 80ff 	bhi.w	8001142 <fsm_automatic_run_way2+0x20e>
 8000f44:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <fsm_automatic_run_way2+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	080010bf 	.word	0x080010bf
 8000f54:	08000fb5 	.word	0x08000fb5
 8000f58:	0800103b 	.word	0x0800103b
        case INIT_2:
            // Initialize all LEDs to off
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	487d      	ldr	r0, [pc, #500]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000f62:	f001 f924 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	487b      	ldr	r0, [pc, #492]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000f6c:	f001 f91f 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4878      	ldr	r0, [pc, #480]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000f76:	f001 f91a 	bl	80021ae <HAL_GPIO_WritePin>
            status_way2 = AUTO_GREEN_WAY2;
 8000f7a:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	601a      	str	r2, [r3, #0]
            countdown_way2 = green_led_duration;
 8000f80:	4b76      	ldr	r3, [pc, #472]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a76      	ldr	r2, [pc, #472]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000f86:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay2(countdown_way2);
 8000f88:	4b75      	ldr	r3, [pc, #468]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fcb9 	bl	8000904 <display2DigitNumberWay2>

            setTimer2(green_led_duration * 1000);
 8000f92:	4b72      	ldr	r3, [pc, #456]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fc64 	bl	800186c <setTimer2>
            setTimer3(1000); // Start the countdown timer
 8000fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa8:	f000 fc7a 	bl	80018a0 <setTimer3>
            setTimer4(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f000 fc91 	bl	80018d4 <setTimer4>
            break;
 8000fb2:	e0cd      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
        case AUTO_GREEN_WAY2:
           
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4867      	ldr	r0, [pc, #412]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000fba:	f001 f8f8 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4865      	ldr	r0, [pc, #404]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000fc4:	f001 f8f3 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4862      	ldr	r0, [pc, #392]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8000fce:	f001 f8ee 	bl	80021ae <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 8000fd2:	4b64      	ldr	r3, [pc, #400]	@ (8001164 <fsm_automatic_run_way2+0x230>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <fsm_automatic_run_way2+0xb8>
                setTimer3(1000); // Reset the countdown timer
 8000fda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fde:	f000 fc5f 	bl	80018a0 <setTimer3>

                countdown_way2--;
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000fea:	6013      	str	r3, [r2, #0]


            }
            display2DigitNumberWay2(countdown_way2);
 8000fec:	4b5c      	ldr	r3, [pc, #368]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc87 	bl	8000904 <display2DigitNumberWay2>
            //     status_way2 = INIT_mode;
            //     status_way2 = INIT_mode;

            // }

            if (timer2_flag == 1) {
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8001168 <fsm_automatic_run_way2+0x234>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	f040 80a3 	bne.w	8001146 <fsm_automatic_run_way2+0x212>
                status_way2 = AUTO_YELLOW_WAY2;
 8001000:	4b54      	ldr	r3, [pc, #336]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8001002:	2207      	movs	r2, #7
 8001004:	601a      	str	r2, [r3, #0]
                setTimer2(yellow_led_duration * 1000);
 8001006:	4b59      	ldr	r3, [pc, #356]	@ (800116c <fsm_automatic_run_way2+0x238>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc2a 	bl	800186c <setTimer2>
                countdown_way2 = yellow_led_duration; // Reset countdown for next cycle
 8001018:	4b54      	ldr	r3, [pc, #336]	@ (800116c <fsm_automatic_run_way2+0x238>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a50      	ldr	r2, [pc, #320]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 800101e:	6013      	str	r3, [r2, #0]
            
            display2DigitNumberWay2(countdown_way2);
 8001020:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fc6d 	bl	8000904 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 800102a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102e:	f000 fc37 	bl	80018a0 <setTimer3>
            
            setTimer4(10);
 8001032:	200a      	movs	r0, #10
 8001034:	f000 fc4e 	bl	80018d4 <setTimer4>
            }
            break;
 8001038:	e085      	b.n	8001146 <fsm_automatic_run_way2+0x212>
        case AUTO_YELLOW_WAY2:
            // Way 2 Green, Way 1 Yellow
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4846      	ldr	r0, [pc, #280]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8001040:	f001 f8b5 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2108      	movs	r1, #8
 8001048:	4843      	ldr	r0, [pc, #268]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 800104a:	f001 f8b0 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2110      	movs	r1, #16
 8001052:	4841      	ldr	r0, [pc, #260]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 8001054:	f001 f8ab 	bl	80021ae <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 8001058:	4b42      	ldr	r3, [pc, #264]	@ (8001164 <fsm_automatic_run_way2+0x230>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d108      	bne.n	8001072 <fsm_automatic_run_way2+0x13e>
                setTimer3(1000); // Reset the countdown timer
 8001060:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001064:	f000 fc1c 	bl	80018a0 <setTimer3>
                countdown_way2--;
 8001068:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	4a3c      	ldr	r2, [pc, #240]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001070:	6013      	str	r3, [r2, #0]


            }
            display2DigitNumberWay2(countdown_way2);
 8001072:	4b3b      	ldr	r3, [pc, #236]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc44 	bl	8000904 <display2DigitNumberWay2>
            // if (isButton1Pressed() == 1) {
            //     status_way2 = INIT_mode;
            //     status_way2 = INIT_mode;
            // }

            if (timer2_flag == 1) {
 800107c:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <fsm_automatic_run_way2+0x234>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d162      	bne.n	800114a <fsm_automatic_run_way2+0x216>
                status_way2 = AUTO_RED_WAY2;
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 8001086:	2205      	movs	r2, #5
 8001088:	601a      	str	r2, [r3, #0]
                setTimer2(red_led_duration * 1000);
 800108a:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <fsm_automatic_run_way2+0x23c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fbe8 	bl	800186c <setTimer2>
                countdown_way2 = red_led_duration; // Reset countdown for next cycle
 800109c:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <fsm_automatic_run_way2+0x23c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010a2:	6013      	str	r3, [r2, #0]
            display2DigitNumberWay2(countdown_way2);
 80010a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc2b 	bl	8000904 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 80010ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b2:	f000 fbf5 	bl	80018a0 <setTimer3>
            
                setTimer4(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 fc0c 	bl	80018d4 <setTimer4>
            }
            break;
 80010bc:	e045      	b.n	800114a <fsm_automatic_run_way2+0x216>
        case AUTO_RED_WAY2:
            // Way 2 Yellow, Way 1 Red
            HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2102      	movs	r1, #2
 80010c2:	4825      	ldr	r0, [pc, #148]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 80010c4:	f001 f873 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2108      	movs	r1, #8
 80010cc:	4822      	ldr	r0, [pc, #136]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 80010ce:	f001 f86e 	bl	80021ae <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2110      	movs	r1, #16
 80010d6:	4820      	ldr	r0, [pc, #128]	@ (8001158 <fsm_automatic_run_way2+0x224>)
 80010d8:	f001 f869 	bl	80021ae <HAL_GPIO_WritePin>

            if (timer3_flag == 1) {
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <fsm_automatic_run_way2+0x230>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <fsm_automatic_run_way2+0x1c2>
                setTimer3(1000); // Reset the countdown timer
 80010e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e8:	f000 fbda 	bl	80018a0 <setTimer3>
                countdown_way2--;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010f4:	6013      	str	r3, [r2, #0]

            }
            display2DigitNumberWay2(countdown_way2);
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc02 	bl	8000904 <display2DigitNumberWay2>
            // if (isButton1Pressed() == 1) {
            //     status_way2 = INIT_mode;

            // }

            if (timer2_flag == 1) {
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <fsm_automatic_run_way2+0x234>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d122      	bne.n	800114e <fsm_automatic_run_way2+0x21a>
                status_way2 = AUTO_GREEN_WAY2;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <fsm_automatic_run_way2+0x220>)
 800110a:	2206      	movs	r2, #6
 800110c:	601a      	str	r2, [r3, #0]
                setTimer2(green_led_duration * 1000);
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fba6 	bl	800186c <setTimer2>
                countdown_way2 = green_led_duration; // Reset countdown for next cycle
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <fsm_automatic_run_way2+0x228>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 8001126:	6013      	str	r3, [r2, #0]

            display2DigitNumberWay2(countdown_way2);
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <fsm_automatic_run_way2+0x22c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fbe9 	bl	8000904 <display2DigitNumberWay2>
                setTimer3(1000); // Start the countdown timer for the next state
 8001132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001136:	f000 fbb3 	bl	80018a0 <setTimer3>
            
                setTimer4(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f000 fbca 	bl	80018d4 <setTimer4>
            }
            break;
 8001140:	e005      	b.n	800114e <fsm_automatic_run_way2+0x21a>
        default:
            break;
 8001142:	bf00      	nop
 8001144:	e004      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
            break;
 8001146:	bf00      	nop
 8001148:	e002      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
            break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <fsm_automatic_run_way2+0x21c>
            break;
 800114e:	bf00      	nop
    }
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000048 	.word	0x20000048
 8001158:	40010c00 	.word	0x40010c00
 800115c:	20000050 	.word	0x20000050
 8001160:	200000a8 	.word	0x200000a8
 8001164:	2000011c 	.word	0x2000011c
 8001168:	20000118 	.word	0x20000118
 800116c:	20000054 	.word	0x20000054
 8001170:	2000004c 	.word	0x2000004c

08001174 <setRedLEDDuration>:
#include "fsm_select_mode.h"
int red_duration = 1;
int green_duration = 1;
int yellow_duration = 1;

void setRedLEDDuration(int duration) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  red_led_duration  = duration;
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <setRedLEDDuration+0x18>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	2000004c 	.word	0x2000004c

08001190 <setGreenLEDDuration>:

void setGreenLEDDuration(int duration) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
   green_led_duration = duration;
 8001198:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <setGreenLEDDuration+0x18>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000050 	.word	0x20000050

080011ac <setYellowLEDDuration>:

void setYellowLEDDuration(int duration) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
   yellow_led_duration = duration;
 80011b4:	4a03      	ldr	r2, [pc, #12]	@ (80011c4 <setYellowLEDDuration+0x18>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000054 	.word	0x20000054

080011c8 <fsm_select_mode_run>:

void fsm_select_mode_run() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
   switch (status_way1) {
 80011cc:	4bb4      	ldr	r3, [pc, #720]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b0a      	subs	r3, #10
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	f200 81de 	bhi.w	8001594 <fsm_select_mode_run+0x3cc>
 80011d8:	a201      	add	r2, pc, #4	@ (adr r2, 80011e0 <fsm_select_mode_run+0x18>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	0800127d 	.word	0x0800127d
 80011e8:	080012d9 	.word	0x080012d9
 80011ec:	080013bd 	.word	0x080013bd
 80011f0:	080014c1 	.word	0x080014c1
       case INIT_mode:
           // Initialize the state to SELECT_MODE_1
           // Initialize all LEDs to off
           HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2101      	movs	r1, #1
 80011f8:	48aa      	ldr	r0, [pc, #680]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80011fa:	f000 ffd8 	bl	80021ae <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001204:	48a7      	ldr	r0, [pc, #668]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001206:	f000 ffd2 	bl	80021ae <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001210:	48a4      	ldr	r0, [pc, #656]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001212:	f000 ffcc 	bl	80021ae <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	48a2      	ldr	r0, [pc, #648]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 800121c:	f000 ffc7 	bl	80021ae <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2108      	movs	r1, #8
 8001224:	489f      	ldr	r0, [pc, #636]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001226:	f000 ffc2 	bl	80021ae <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	489d      	ldr	r0, [pc, #628]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001230:	f000 ffbd 	bl	80021ae <HAL_GPIO_WritePin>

            // off all SEGb
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800123a:	489b      	ldr	r0, [pc, #620]	@ (80014a8 <fsm_select_mode_run+0x2e0>)
 800123c:	f000 ffb7 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001246:	4898      	ldr	r0, [pc, #608]	@ (80014a8 <fsm_select_mode_run+0x2e0>)
 8001248:	f000 ffb1 	bl	80021ae <HAL_GPIO_WritePin>

            // ON all SEG
                HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001252:	4895      	ldr	r0, [pc, #596]	@ (80014a8 <fsm_select_mode_run+0x2e0>)
 8001254:	f000 ffab 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800125e:	4892      	ldr	r0, [pc, #584]	@ (80014a8 <fsm_select_mode_run+0x2e0>)
 8001260:	f000 ffa5 	bl	80021ae <HAL_GPIO_WritePin>


           status_way1 = SELECT_MODE_1;
 8001264:	4b8e      	ldr	r3, [pc, #568]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 8001266:	220b      	movs	r2, #11
 8001268:	601a      	str	r2, [r3, #0]
           setTimer0(3000);
 800126a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800126e:	f000 fac9 	bl	8001804 <setTimer0>
             setTimer1(500); //Blinking
 8001272:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001276:	f000 fadf 	bl	8001838 <setTimer1>
 
           break;
 800127a:	e194      	b.n	80015a6 <fsm_select_mode_run+0x3de>
       case SELECT_MODE_1:

           display7SEG(1); // Display mode
 800127c:	2001      	movs	r0, #1
 800127e:	f7fe ff65 	bl	800014c <display7SEG>

           if (isButton1Pressed() == 1) {
 8001282:	f7ff fbaf 	bl	80009e4 <isButton1Pressed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10d      	bne.n	80012a8 <fsm_select_mode_run+0xe0>
           status_way1 = SELECT_MODE_2;
 800128c:	4b84      	ldr	r3, [pc, #528]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
           setTimer0(10000);
 8001292:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001296:	f000 fab5 	bl	8001804 <setTimer0>
            setTimer1(500); //Blinking
 800129a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800129e:	f000 facb 	bl	8001838 <setTimer1>
           setTimer4(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f000 fb16 	bl	80018d4 <setTimer4>
           }



           if (timer0_flag == 1) {
 80012a8:	4b80      	ldr	r3, [pc, #512]	@ (80014ac <fsm_select_mode_run+0x2e4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	f040 8173 	bne.w	8001598 <fsm_select_mode_run+0x3d0>
                status_way1 = INIT_1;
 80012b2:	4b7b      	ldr	r3, [pc, #492]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 80012b8:	4b7d      	ldr	r3, [pc, #500]	@ (80014b0 <fsm_select_mode_run+0x2e8>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012c4:	4878      	ldr	r0, [pc, #480]	@ (80014a8 <fsm_select_mode_run+0x2e0>)
 80012c6:	f000 ff72 	bl	80021ae <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012d0:	4875      	ldr	r0, [pc, #468]	@ (80014a8 <fsm_select_mode_run+0x2e0>)
 80012d2:	f000 ff6c 	bl	80021ae <HAL_GPIO_WritePin>
           }
           break;
 80012d6:	e15f      	b.n	8001598 <fsm_select_mode_run+0x3d0>
       case SELECT_MODE_2:
           display7SEG(2); // Display mode
 80012d8:	2002      	movs	r0, #2
 80012da:	f7fe ff37 	bl	800014c <display7SEG>
// Blinking red LEDs at 2 Hz
           if (timer1_flag == 1) {
 80012de:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <fsm_select_mode_run+0x2ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d121      	bne.n	800132a <fsm_select_mode_run+0x162>
               HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80012e6:	2101      	movs	r1, #1
 80012e8:	486e      	ldr	r0, [pc, #440]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80012ea:	f000 ff78 	bl	80021de <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 80012ee:	2110      	movs	r1, #16
 80012f0:	486c      	ldr	r0, [pc, #432]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80012f2:	f000 ff74 	bl	80021de <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2102      	movs	r1, #2
 80012fa:	486a      	ldr	r0, [pc, #424]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80012fc:	f000 ff57 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2108      	movs	r1, #8
 8001304:	4867      	ldr	r0, [pc, #412]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001306:	f000 ff52 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001310:	4864      	ldr	r0, [pc, #400]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001312:	f000 ff4c 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800131c:	4861      	ldr	r0, [pc, #388]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 800131e:	f000 ff46 	bl	80021ae <HAL_GPIO_WritePin>
               setTimer1(500); // 0.5 seconds for 2 Hz blinking
 8001322:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001326:	f000 fa87 	bl	8001838 <setTimer1>
           }


           if (isButton1Pressed() == 1) {
 800132a:	f7ff fb5b 	bl	80009e4 <isButton1Pressed>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <fsm_select_mode_run+0x188>
               status_way1 = SELECT_MODE_3;
 8001334:	4b5a      	ldr	r3, [pc, #360]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 8001336:	220d      	movs	r2, #13
 8001338:	601a      	str	r2, [r3, #0]
               setTimer0(10000);
 800133a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800133e:	f000 fa61 	bl	8001804 <setTimer0>
            setTimer1(500); //Blinking
 8001342:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001346:	f000 fa77 	bl	8001838 <setTimer1>
           setTimer4(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f000 fac2 	bl	80018d4 <setTimer4>
           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 8001350:	f7ff fb5a 	bl	8000a08 <isButton2Pressed>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10f      	bne.n	800137a <fsm_select_mode_run+0x1b2>
               red_duration++;
 800135a:	4b57      	ldr	r3, [pc, #348]	@ (80014b8 <fsm_select_mode_run+0x2f0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	4a55      	ldr	r2, [pc, #340]	@ (80014b8 <fsm_select_mode_run+0x2f0>)
 8001362:	6013      	str	r3, [r2, #0]
               if (red_duration > 99) {
 8001364:	4b54      	ldr	r3, [pc, #336]	@ (80014b8 <fsm_select_mode_run+0x2f0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b63      	cmp	r3, #99	@ 0x63
 800136a:	dd02      	ble.n	8001372 <fsm_select_mode_run+0x1aa>
                   red_duration = 1; // Wrap around to 1 if it exceeds 9
 800136c:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <fsm_select_mode_run+0x2f0>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
               }
               setTimer0(10000);
 8001372:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001376:	f000 fa45 	bl	8001804 <setTimer0>
           }
            // display7SEG2(red_duration);
            display2DigitNumberWay2(red_duration);
 800137a:	4b4f      	ldr	r3, [pc, #316]	@ (80014b8 <fsm_select_mode_run+0x2f0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fac0 	bl	8000904 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 8001384:	f7ff fb52 	bl	8000a2c <isButton3Pressed>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10a      	bne.n	80013a4 <fsm_select_mode_run+0x1dc>
               // Save the duration value and exit Mode 2
               setRedLEDDuration(red_duration);
 800138e:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <fsm_select_mode_run+0x2f0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff feee 	bl	8001174 <setRedLEDDuration>
                status_way1 = INIT_1;
 8001398:	4b41      	ldr	r3, [pc, #260]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <fsm_select_mode_run+0x2e8>)
 80013a0:	2204      	movs	r2, #4
 80013a2:	601a      	str	r2, [r3, #0]
           }

           if (timer0_flag == 1) {
 80013a4:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <fsm_select_mode_run+0x2e4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 80f7 	bne.w	800159c <fsm_select_mode_run+0x3d4>
                status_way1 = INIT_1;
 80013ae:	4b3c      	ldr	r3, [pc, #240]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 80013b4:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <fsm_select_mode_run+0x2e8>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	601a      	str	r2, [r3, #0]
           }
           break;
 80013ba:	e0ef      	b.n	800159c <fsm_select_mode_run+0x3d4>
       case SELECT_MODE_3:
           display7SEG(3); // Display mode
 80013bc:	2003      	movs	r0, #3
 80013be:	f7fe fec5 	bl	800014c <display7SEG>
           // Blinking yellow LEDs at 2 Hz
           if (timer1_flag == 1) {
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <fsm_select_mode_run+0x2ec>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d121      	bne.n	800140e <fsm_select_mode_run+0x246>
               HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80013ca:	2108      	movs	r1, #8
 80013cc:	4835      	ldr	r0, [pc, #212]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80013ce:	f000 ff06 	bl	80021de <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
 80013d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013d6:	4833      	ldr	r0, [pc, #204]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80013d8:	f000 ff01 	bl	80021de <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	4830      	ldr	r0, [pc, #192]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80013e2:	f000 fee4 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2102      	movs	r1, #2
 80013ea:	482e      	ldr	r0, [pc, #184]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80013ec:	f000 fedf 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2110      	movs	r1, #16
 80013f4:	482b      	ldr	r0, [pc, #172]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 80013f6:	f000 feda 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001400:	4828      	ldr	r0, [pc, #160]	@ (80014a4 <fsm_select_mode_run+0x2dc>)
 8001402:	f000 fed4 	bl	80021ae <HAL_GPIO_WritePin>
               setTimer1(500); // 0.5 seconds for 2 Hz blinking
 8001406:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800140a:	f000 fa15 	bl	8001838 <setTimer1>
           }

           if (isButton1Pressed() == 1) {
 800140e:	f7ff fae9 	bl	80009e4 <isButton1Pressed>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10d      	bne.n	8001434 <fsm_select_mode_run+0x26c>
               status_way1 = SELECT_MODE_4;
 8001418:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 800141a:	220e      	movs	r2, #14
 800141c:	601a      	str	r2, [r3, #0]
               setTimer0(10000);
 800141e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001422:	f000 f9ef 	bl	8001804 <setTimer0>
              setTimer1(500); //Blinking
 8001426:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800142a:	f000 fa05 	bl	8001838 <setTimer1>
           setTimer4(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f000 fa50 	bl	80018d4 <setTimer4>
           
           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 8001434:	f7ff fae8 	bl	8000a08 <isButton2Pressed>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10f      	bne.n	800145e <fsm_select_mode_run+0x296>
               yellow_duration++;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <fsm_select_mode_run+0x2f4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a1d      	ldr	r2, [pc, #116]	@ (80014bc <fsm_select_mode_run+0x2f4>)
 8001446:	6013      	str	r3, [r2, #0]
               if (yellow_duration > 99) {
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <fsm_select_mode_run+0x2f4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b63      	cmp	r3, #99	@ 0x63
 800144e:	dd02      	ble.n	8001456 <fsm_select_mode_run+0x28e>
                   yellow_duration = 1; // Wrap around to 1 if it exceeds 9
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <fsm_select_mode_run+0x2f4>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
               }
           setTimer0(10000);
 8001456:	f242 7010 	movw	r0, #10000	@ 0x2710
 800145a:	f000 f9d3 	bl	8001804 <setTimer0>
           }


        //    display7SEG2(yellow_duration);
            display2DigitNumberWay2(yellow_duration);
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <fsm_select_mode_run+0x2f4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fa4e 	bl	8000904 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 8001468:	f7ff fae0 	bl	8000a2c <isButton3Pressed>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10a      	bne.n	8001488 <fsm_select_mode_run+0x2c0>
               // Save the duration value and exit Mode 2
               setYellowLEDDuration(yellow_duration);
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <fsm_select_mode_run+0x2f4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe98 	bl	80011ac <setYellowLEDDuration>
                status_way1 = INIT_1;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <fsm_select_mode_run+0x2e8>)
 8001484:	2204      	movs	r2, #4
 8001486:	601a      	str	r2, [r3, #0]
           }
           if (timer0_flag == 1) {
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <fsm_select_mode_run+0x2e4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	f040 8087 	bne.w	80015a0 <fsm_select_mode_run+0x3d8>
                status_way1 = INIT_1;
 8001492:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <fsm_select_mode_run+0x2d8>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <fsm_select_mode_run+0x2e8>)
 800149a:	2204      	movs	r2, #4
 800149c:	601a      	str	r2, [r3, #0]
           }
           break;
 800149e:	e07f      	b.n	80015a0 <fsm_select_mode_run+0x3d8>
 80014a0:	200000ac 	.word	0x200000ac
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	40010800 	.word	0x40010800
 80014ac:	20000110 	.word	0x20000110
 80014b0:	20000048 	.word	0x20000048
 80014b4:	20000114 	.word	0x20000114
 80014b8:	2000003c 	.word	0x2000003c
 80014bc:	20000044 	.word	0x20000044
       case SELECT_MODE_4:
           display7SEG(4); // Display mode
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7fe fe43 	bl	800014c <display7SEG>

            // Blinking red LEDs at 2 Hz
           if (timer1_flag == 1) {
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <fsm_select_mode_run+0x3e4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d121      	bne.n	8001512 <fsm_select_mode_run+0x34a>
               HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
 80014ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014d2:	4837      	ldr	r0, [pc, #220]	@ (80015b0 <fsm_select_mode_run+0x3e8>)
 80014d4:	f000 fe83 	bl	80021de <HAL_GPIO_TogglePin>
               HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80014d8:	2102      	movs	r1, #2
 80014da:	4835      	ldr	r0, [pc, #212]	@ (80015b0 <fsm_select_mode_run+0x3e8>)
 80014dc:	f000 fe7f 	bl	80021de <HAL_GPIO_TogglePin>
               // Reset other LEDs
               HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	4832      	ldr	r0, [pc, #200]	@ (80015b0 <fsm_select_mode_run+0x3e8>)
 80014e6:	f000 fe62 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2108      	movs	r1, #8
 80014ee:	4830      	ldr	r0, [pc, #192]	@ (80015b0 <fsm_select_mode_run+0x3e8>)
 80014f0:	f000 fe5d 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	482d      	ldr	r0, [pc, #180]	@ (80015b0 <fsm_select_mode_run+0x3e8>)
 80014fa:	f000 fe58 	bl	80021ae <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(LED_12_GPIO_Port, LED_12_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001504:	482a      	ldr	r0, [pc, #168]	@ (80015b0 <fsm_select_mode_run+0x3e8>)
 8001506:	f000 fe52 	bl	80021ae <HAL_GPIO_WritePin>

               setTimer1(500); // 0.5 seconds for 2 Hz blinking
 800150a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800150e:	f000 f993 	bl	8001838 <setTimer1>
           }

           if (isButton1Pressed() == 1) {
 8001512:	f7ff fa67 	bl	80009e4 <isButton1Pressed>
 8001516:	4603      	mov	r3, r0
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <fsm_select_mode_run+0x362>
               status_way1 = INIT_mode;
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <fsm_select_mode_run+0x3ec>)
 800151e:	220a      	movs	r2, #10
 8001520:	601a      	str	r2, [r3, #0]
               setTimer0(3000);
 8001522:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001526:	f000 f96d 	bl	8001804 <setTimer0>

           }
           // Increment duration with Button 2
           if (isButton2Pressed() == 1) {
 800152a:	f7ff fa6d 	bl	8000a08 <isButton2Pressed>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10f      	bne.n	8001554 <fsm_select_mode_run+0x38c>
               green_duration++;
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <fsm_select_mode_run+0x3f0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <fsm_select_mode_run+0x3f0>)
 800153c:	6013      	str	r3, [r2, #0]
               if (green_duration > 99) {
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <fsm_select_mode_run+0x3f0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b63      	cmp	r3, #99	@ 0x63
 8001544:	dd02      	ble.n	800154c <fsm_select_mode_run+0x384>
                   green_duration = 1; // Wrap around to 1 if it exceeds 9
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <fsm_select_mode_run+0x3f0>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
               }
           setTimer0(10000);
 800154c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001550:	f000 f958 	bl	8001804 <setTimer0>
           }

        //    display7SEG2(green_duration);
            display2DigitNumberWay2(green_duration);
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <fsm_select_mode_run+0x3f0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f9d3 	bl	8000904 <display2DigitNumberWay2>
           // Set duration with Button 3
           if (isButton3Pressed() == 1) {
 800155e:	f7ff fa65 	bl	8000a2c <isButton3Pressed>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10a      	bne.n	800157e <fsm_select_mode_run+0x3b6>
               // Save the duration value and exit Mode 2
               setGreenLEDDuration(green_duration);
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <fsm_select_mode_run+0x3f0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe0f 	bl	8001190 <setGreenLEDDuration>
                status_way1 = INIT_1;
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <fsm_select_mode_run+0x3ec>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
                status_way2 = INIT_2;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <fsm_select_mode_run+0x3f4>)
 800157a:	2204      	movs	r2, #4
 800157c:	601a      	str	r2, [r3, #0]
           }
           if (timer0_flag == 1) {
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <fsm_select_mode_run+0x3f8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10e      	bne.n	80015a4 <fsm_select_mode_run+0x3dc>
               status_way1 = INIT_1;
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <fsm_select_mode_run+0x3ec>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
               status_way2 = INIT_2;
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <fsm_select_mode_run+0x3f4>)
 800158e:	2204      	movs	r2, #4
 8001590:	601a      	str	r2, [r3, #0]
           }
           break;
 8001592:	e007      	b.n	80015a4 <fsm_select_mode_run+0x3dc>
       default:
           // status_way1 = INIT;
           break;
 8001594:	bf00      	nop
 8001596:	e006      	b.n	80015a6 <fsm_select_mode_run+0x3de>
           break;
 8001598:	bf00      	nop
 800159a:	e004      	b.n	80015a6 <fsm_select_mode_run+0x3de>
           break;
 800159c:	bf00      	nop
 800159e:	e002      	b.n	80015a6 <fsm_select_mode_run+0x3de>
           break;
 80015a0:	bf00      	nop
 80015a2:	e000      	b.n	80015a6 <fsm_select_mode_run+0x3de>
           break;
 80015a4:	bf00      	nop
   }
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000114 	.word	0x20000114
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	200000ac 	.word	0x200000ac
 80015b8:	20000040 	.word	0x20000040
 80015bc:	20000048 	.word	0x20000048
 80015c0:	20000110 	.word	0x20000110

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c8:	f000 faee 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015cc:	f000 f812 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d0:	f000 f898 	bl	8001704 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015d4:	f000 f84a 	bl	800166c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <main+0x2c>)
 80015da:	f001 fa47 	bl	8002a6c <HAL_TIM_Base_Start_IT>


  while (1)
  {

	  	fsm_automatic_run_way1();
 80015de:	f7ff fb39 	bl	8000c54 <fsm_automatic_run_way1>
	  	fsm_automatic_run_way2();
 80015e2:	f7ff fca7 	bl	8000f34 <fsm_automatic_run_way2>
	  	fsm_select_mode_run();
 80015e6:	f7ff fdef 	bl	80011c8 <fsm_select_mode_run>
	  	fsm_automatic_run_way1();
 80015ea:	bf00      	nop
 80015ec:	e7f7      	b.n	80015de <main+0x1a>
 80015ee:	bf00      	nop
 80015f0:	200000b0 	.word	0x200000b0

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	@ 0x40
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2228      	movs	r2, #40	@ 0x28
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fdbe 	bl	8003184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	2301      	movs	r3, #1
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161e:	2310      	movs	r3, #16
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fdf0 	bl	8002210 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001636:	f000 f8df 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f85e 	bl	8002714 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800165e:	f000 f8cb 	bl	80017f8 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3740      	adds	r7, #64	@ 0x40
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <MX_TIM2_Init+0x94>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <MX_TIM2_Init+0x94>)
 8001692:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <MX_TIM2_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <MX_TIM2_Init+0x94>)
 80016a0:	2209      	movs	r2, #9
 80016a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <MX_TIM2_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <MX_TIM2_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	@ (8001700 <MX_TIM2_Init+0x94>)
 80016b2:	f001 f98b 	bl	80029cc <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016bc:	f000 f89c 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <MX_TIM2_Init+0x94>)
 80016ce:	f001 fb09 	bl	8002ce4 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d8:	f000 f88e 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_TIM2_Init+0x94>)
 80016ea:	f001 fce1 	bl	80030b0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 f880 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200000b0 	.word	0x200000b0

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a2d      	ldr	r2, [pc, #180]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a27      	ldr	r2, [pc, #156]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a21      	ldr	r2, [pc, #132]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <MX_GPIO_Init+0xd0>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8001760:	2200      	movs	r2, #0
 8001762:	f649 711f 	movw	r1, #40735	@ 0x9f1f
 8001766:	481c      	ldr	r0, [pc, #112]	@ (80017d8 <MX_GPIO_Init+0xd4>)
 8001768:	f000 fd21 	bl	80021ae <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN1_1_Pin
                          |EN1_2_Pin|EN2_1_Pin|EN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_11_Pin|LED_12_Pin
 800176c:	2200      	movs	r2, #0
 800176e:	f647 31fb 	movw	r1, #31739	@ 0x7bfb
 8001772:	481a      	ldr	r0, [pc, #104]	@ (80017dc <MX_GPIO_Init+0xd8>)
 8001774:	f000 fd1b 	bl	80021ae <HAL_GPIO_WritePin>
                          |SEG_4b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin EN1_1_Pin
                           EN1_2_Pin EN2_1_Pin EN2_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8001778:	f649 731f 	movw	r3, #40735	@ 0x9f1f
 800177c:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|EN1_1_Pin
                          |EN1_2_Pin|EN2_1_Pin|EN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	4619      	mov	r1, r3
 8001790:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <MX_GPIO_Init+0xd4>)
 8001792:	f000 fb79 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001796:	23e0      	movs	r3, #224	@ 0xe0
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	2301      	movs	r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <MX_GPIO_Init+0xd4>)
 80017aa:	f000 fb6d 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_11_Pin LED_12_Pin
                           SEG_5b_Pin SEG_6b_Pin LED_3_Pin LED_4_Pin
                           SEG_0b_Pin SEG_1b_Pin SEG_2b_Pin SEG_3b_Pin
                           SEG_4b_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_11_Pin|LED_12_Pin
 80017ae:	f647 33fb 	movw	r3, #31739	@ 0x7bfb
 80017b2:	613b      	str	r3, [r7, #16]
                          |SEG_5b_Pin|SEG_6b_Pin|LED_3_Pin|LED_4_Pin
                          |SEG_0b_Pin|SEG_1b_Pin|SEG_2b_Pin|SEG_3b_Pin
                          |SEG_4b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_GPIO_Init+0xd8>)
 80017c8:	f000 fb5e 	bl	8001e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800
 80017dc:	40010c00 	.word	0x40010c00

080017e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80017e8:	f7ff f932 	bl	8000a50 <getKeyInput>
    timer_run();
 80017ec:	f000 f8a6 	bl	800193c <timer_run>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <Error_Handler+0x8>

08001804 <setTimer0>:
int timer3_flag = 0;
int timer4_flag = 0;
int timer5_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0(int duration) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  timer0_counter = duration / TIMER_CYCLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <setTimer0+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	fb92 f3f3 	sdiv	r3, r2, r3
 8001816:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <setTimer0+0x2c>)
 8001818:	6013      	str	r3, [r2, #0]
  timer0_flag = 0;
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <setTimer0+0x30>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000058 	.word	0x20000058
 8001830:	200000f8 	.word	0x200000f8
 8001834:	20000110 	.word	0x20000110

08001838 <setTimer1>:

void setTimer1(int duration) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  timer1_counter = duration / TIMER_CYCLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <setTimer1+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	fb92 f3f3 	sdiv	r3, r2, r3
 800184a:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <setTimer1+0x2c>)
 800184c:	6013      	str	r3, [r2, #0]
  timer1_flag = 0;
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <setTimer1+0x30>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000058 	.word	0x20000058
 8001864:	200000fc 	.word	0x200000fc
 8001868:	20000114 	.word	0x20000114

0800186c <setTimer2>:

void setTimer2(int duration) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  timer2_counter = duration / TIMER_CYCLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <setTimer2+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	fb92 f3f3 	sdiv	r3, r2, r3
 800187e:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <setTimer2+0x2c>)
 8001880:	6013      	str	r3, [r2, #0]
  timer2_flag = 0;
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <setTimer2+0x30>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000058 	.word	0x20000058
 8001898:	20000100 	.word	0x20000100
 800189c:	20000118 	.word	0x20000118

080018a0 <setTimer3>:

void setTimer3(int duration) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <setTimer3+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b2:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <setTimer3+0x2c>)
 80018b4:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <setTimer3+0x30>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000058 	.word	0x20000058
 80018cc:	20000104 	.word	0x20000104
 80018d0:	2000011c 	.word	0x2000011c

080018d4 <setTimer4>:

void setTimer4(int duration) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    timer4_counter = duration / TIMER_CYCLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <setTimer4+0x28>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e6:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <setTimer4+0x2c>)
 80018e8:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <setTimer4+0x30>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000058 	.word	0x20000058
 8001900:	20000108 	.word	0x20000108
 8001904:	20000120 	.word	0x20000120

08001908 <setTimer5>:

void setTimer5(int duration) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    timer5_counter = duration / TIMER_CYCLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <setTimer5+0x28>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	fb92 f3f3 	sdiv	r3, r2, r3
 800191a:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <setTimer5+0x2c>)
 800191c:	6013      	str	r3, [r2, #0]
    timer5_flag = 0;
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <setTimer5+0x30>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000058 	.word	0x20000058
 8001934:	2000010c 	.word	0x2000010c
 8001938:	20000124 	.word	0x20000124

0800193c <timer_run>:

void timer_run() {
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  if (timer0_counter > 0) {
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <timer_run+0xcc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	dd0b      	ble.n	8001960 <timer_run+0x24>
    timer0_counter--;
 8001948:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <timer_run+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a08 <timer_run+0xcc>)
 8001950:	6013      	str	r3, [r2, #0]
    if (timer0_counter == 0) {
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <timer_run+0xcc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <timer_run+0x24>
      timer0_flag = 1;
 800195a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <timer_run+0xd0>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
    }
  }

  if (timer1_counter > 0) {
 8001960:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <timer_run+0xd4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	dd0b      	ble.n	8001980 <timer_run+0x44>
    timer1_counter--;
 8001968:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <timer_run+0xd4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a28      	ldr	r2, [pc, #160]	@ (8001a10 <timer_run+0xd4>)
 8001970:	6013      	str	r3, [r2, #0]
    if (timer1_counter == 0) {
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <timer_run+0xd4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <timer_run+0x44>
      timer1_flag = 1;
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <timer_run+0xd8>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    }
  }

  if (timer2_counter > 0) {
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <timer_run+0xdc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd0b      	ble.n	80019a0 <timer_run+0x64>
    timer2_counter--;
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <timer_run+0xdc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <timer_run+0xdc>)
 8001990:	6013      	str	r3, [r2, #0]
    if (timer2_counter == 0) {
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <timer_run+0xdc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <timer_run+0x64>
      timer2_flag = 1;
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <timer_run+0xe0>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    }
  }
    if (timer3_counter > 0) {
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <timer_run+0xe4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dd0b      	ble.n	80019c0 <timer_run+0x84>
      timer3_counter--;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <timer_run+0xe4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <timer_run+0xe4>)
 80019b0:	6013      	str	r3, [r2, #0]
      if (timer3_counter == 0) {
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <timer_run+0xe4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <timer_run+0x84>
          timer3_flag = 1;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <timer_run+0xe8>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
      }
  }
  if (timer4_counter > 0) {
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <timer_run+0xec>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	dd0b      	ble.n	80019e0 <timer_run+0xa4>
      timer4_counter--;
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <timer_run+0xec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <timer_run+0xec>)
 80019d0:	6013      	str	r3, [r2, #0]
      if (timer4_counter == 0) {
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <timer_run+0xec>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <timer_run+0xa4>
          timer4_flag = 1;
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <timer_run+0xf0>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]
      }
  }
  if (timer5_counter > 0) {
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <timer_run+0xf4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	dd0b      	ble.n	8001a00 <timer_run+0xc4>
      timer5_counter--;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <timer_run+0xf4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <timer_run+0xf4>)
 80019f0:	6013      	str	r3, [r2, #0]
      if (timer5_counter == 0) {
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <timer_run+0xf4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <timer_run+0xc4>
          timer5_flag = 1;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <timer_run+0xf8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
      }
  }
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	200000f8 	.word	0x200000f8
 8001a0c:	20000110 	.word	0x20000110
 8001a10:	200000fc 	.word	0x200000fc
 8001a14:	20000114 	.word	0x20000114
 8001a18:	20000100 	.word	0x20000100
 8001a1c:	20000118 	.word	0x20000118
 8001a20:	20000104 	.word	0x20000104
 8001a24:	2000011c 	.word	0x2000011c
 8001a28:	20000108 	.word	0x20000108
 8001a2c:	20000120 	.word	0x20000120
 8001a30:	2000010c 	.word	0x2000010c
 8001a34:	20000124 	.word	0x20000124

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_MspInit+0x5c>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <HAL_MspInit+0x5c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6193      	str	r3, [r2, #24]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <HAL_MspInit+0x5c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a94 <HAL_MspInit+0x5c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_MspInit+0x60>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_MspInit+0x60>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aac:	d113      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x44>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x44>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x44>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	201c      	movs	r0, #28
 8001acc:	f000 f9a5 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad0:	201c      	movs	r0, #28
 8001ad2:	f000 f9be 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <NMI_Handler+0x4>

08001aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <MemManage_Handler+0x4>

08001afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 f87e 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f000 ffdf 	bl	8002b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000b0 	.word	0x200000b0

08001b50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff fff8 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b62:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b64:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b78:	4c09      	ldr	r4, [pc, #36]	@ (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f001 fb05 	bl	8003194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8a:	f7ff fd1b 	bl	80015c4 <main>
  bx lr
 8001b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b98:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8001b9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ba0:	2000012c 	.word	0x2000012c

08001ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_2_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_Init+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_Init+0x28>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f923 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff ff38 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f93b 	bl	8001e6e <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f903 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000005c 	.word	0x2000005c
 8001c2c:	20000064 	.word	0x20000064
 8001c30:	20000060 	.word	0x20000060

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_IncTick+0x1c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a03      	ldr	r2, [pc, #12]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000064 	.word	0x20000064
 8001c54:	20000128 	.word	0x20000128

08001c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	@ (8001c68 <HAL_GetTick+0x10>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000128 	.word	0x20000128

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4906      	ldr	r1, [pc, #24]	@ (8001d04 <__NVIC_EnableIRQ+0x34>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff90 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff2d 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff42 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff90 	bl	8001d5c <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff35 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08b      	sub	sp, #44	@ 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e161      	b.n	8002160 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8150 	bne.w	800215a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a97      	ldr	r2, [pc, #604]	@ (800211c <HAL_GPIO_Init+0x294>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a95      	ldr	r2, [pc, #596]	@ (800211c <HAL_GPIO_Init+0x294>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d875      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eca:	4a95      	ldr	r2, [pc, #596]	@ (8002120 <HAL_GPIO_Init+0x298>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d058      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a93      	ldr	r2, [pc, #588]	@ (8002120 <HAL_GPIO_Init+0x298>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d86f      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a93      	ldr	r2, [pc, #588]	@ (8002124 <HAL_GPIO_Init+0x29c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d052      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001edc:	4a91      	ldr	r2, [pc, #580]	@ (8002124 <HAL_GPIO_Init+0x29c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d869      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a91      	ldr	r2, [pc, #580]	@ (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04c      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a8f      	ldr	r2, [pc, #572]	@ (8002128 <HAL_GPIO_Init+0x2a0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d863      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eee:	4a8f      	ldr	r2, [pc, #572]	@ (800212c <HAL_GPIO_Init+0x2a4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d046      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a8d      	ldr	r2, [pc, #564]	@ (800212c <HAL_GPIO_Init+0x2a4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d85d      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d82a      	bhi.n	8001f54 <HAL_GPIO_Init+0xcc>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d859      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001f02:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <HAL_GPIO_Init+0x80>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	08001f6f 	.word	0x08001f6f
 8001f14:	08001fb1 	.word	0x08001fb1
 8001f18:	08001fb7 	.word	0x08001fb7
 8001f1c:	08001fb7 	.word	0x08001fb7
 8001f20:	08001fb7 	.word	0x08001fb7
 8001f24:	08001fb7 	.word	0x08001fb7
 8001f28:	08001fb7 	.word	0x08001fb7
 8001f2c:	08001fb7 	.word	0x08001fb7
 8001f30:	08001fb7 	.word	0x08001fb7
 8001f34:	08001fb7 	.word	0x08001fb7
 8001f38:	08001fb7 	.word	0x08001fb7
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001fb7 	.word	0x08001fb7
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001fb7 	.word	0x08001fb7
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f79 	.word	0x08001f79
 8001f54:	4a76      	ldr	r2, [pc, #472]	@ (8002130 <HAL_GPIO_Init+0x2a8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5a:	e02c      	b.n	8001fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e029      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e024      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	3308      	adds	r3, #8
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e01f      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e01a      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e013      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	611a      	str	r2, [r3, #16]
          break;
 8001fa2:	e009      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	615a      	str	r2, [r3, #20]
          break;
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          break;
 8001fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2bff      	cmp	r3, #255	@ 0xff
 8001fbc:	d801      	bhi.n	8001fc2 <HAL_GPIO_Init+0x13a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	e001      	b.n	8001fc6 <HAL_GPIO_Init+0x13e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_GPIO_Init+0x14c>
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x152>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	3b08      	subs	r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80a9 	beq.w	800215a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002008:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <HAL_GPIO_Init+0x2ac>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a49      	ldr	r2, [pc, #292]	@ (8002134 <HAL_GPIO_Init+0x2ac>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b47      	ldr	r3, [pc, #284]	@ (8002134 <HAL_GPIO_Init+0x2ac>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002020:	4a45      	ldr	r2, [pc, #276]	@ (8002138 <HAL_GPIO_Init+0x2b0>)
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3d      	ldr	r2, [pc, #244]	@ (800213c <HAL_GPIO_Init+0x2b4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1e0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3c      	ldr	r2, [pc, #240]	@ (8002140 <HAL_GPIO_Init+0x2b8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3b      	ldr	r2, [pc, #236]	@ (8002144 <HAL_GPIO_Init+0x2bc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1d8>
 800205c:	2302      	movs	r3, #2
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 8002060:	2303      	movs	r3, #3
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 8002068:	2300      	movs	r3, #0
 800206a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207a:	492f      	ldr	r1, [pc, #188]	@ (8002138 <HAL_GPIO_Init+0x2b0>)
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002094:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	492b      	ldr	r1, [pc, #172]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4927      	ldr	r1, [pc, #156]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020bc:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4921      	ldr	r1, [pc, #132]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	491d      	ldr	r1, [pc, #116]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e4:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4917      	ldr	r1, [pc, #92]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4913      	ldr	r1, [pc, #76]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01f      	beq.n	800214c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	490d      	ldr	r1, [pc, #52]	@ (8002148 <HAL_GPIO_Init+0x2c0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e01f      	b.n	800215a <HAL_GPIO_Init+0x2d2>
 800211a:	bf00      	nop
 800211c:	10320000 	.word	0x10320000
 8002120:	10310000 	.word	0x10310000
 8002124:	10220000 	.word	0x10220000
 8002128:	10210000 	.word	0x10210000
 800212c:	10120000 	.word	0x10120000
 8002130:	10110000 	.word	0x10110000
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	40010800 	.word	0x40010800
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011000 	.word	0x40011000
 8002148:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_GPIO_Init+0x2f4>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	43db      	mvns	r3, r3
 8002154:	4909      	ldr	r1, [pc, #36]	@ (800217c <HAL_GPIO_Init+0x2f4>)
 8002156:	4013      	ands	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	3301      	adds	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	f47f ae96 	bne.w	8001e9c <HAL_GPIO_Init+0x14>
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	372c      	adds	r7, #44	@ 0x2c
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e001      	b.n	80021a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	807b      	strh	r3, [r7, #2]
 80021ba:	4613      	mov	r3, r2
 80021bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021be:	787b      	ldrb	r3, [r7, #1]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	041a      	lsls	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	611a      	str	r2, [r3, #16]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	041a      	lsls	r2, r3, #16
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e272      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4b92      	ldr	r3, [pc, #584]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800223c:	4b8f      	ldr	r3, [pc, #572]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
 8002248:	4b8c      	ldr	r3, [pc, #560]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d10b      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	4b89      	ldr	r3, [pc, #548]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06c      	beq.n	800233c <HAL_RCC_OscConfig+0x12c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e24c      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x76>
 8002278:	4b80      	ldr	r3, [pc, #512]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7f      	ldr	r2, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e02e      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b7b      	ldr	r3, [pc, #492]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7a      	ldr	r2, [pc, #488]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b78      	ldr	r3, [pc, #480]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a77      	ldr	r2, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0xbc>
 80022b2:	4b72      	ldr	r3, [pc, #456]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a71      	ldr	r2, [pc, #452]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022cc:	4b6b      	ldr	r3, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b68      	ldr	r3, [pc, #416]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a67      	ldr	r2, [pc, #412]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fcb4 	bl	8001c58 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fcb0 	bl	8001c58 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	@ 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e200      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b5d      	ldr	r3, [pc, #372]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe4>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fca0 	bl	8001c58 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fc9c 	bl	8001c58 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	@ 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1ec      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x10c>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b4c      	ldr	r3, [pc, #304]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002356:	4b49      	ldr	r3, [pc, #292]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b43      	ldr	r3, [pc, #268]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1c0      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4939      	ldr	r1, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b36      	ldr	r3, [pc, #216]	@ (8002480 <HAL_RCC_OscConfig+0x270>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fc55 	bl	8001c58 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff fc51 	bl	8001c58 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1a1      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4927      	ldr	r1, [pc, #156]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_RCC_OscConfig+0x270>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff fc34 	bl	8001c58 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc30 	bl	8001c58 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e180      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03a      	beq.n	8002494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <HAL_RCC_OscConfig+0x274>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242c:	f7ff fc14 	bl	8001c58 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7ff fc10 	bl	8001c58 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e160      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_RCC_OscConfig+0x26c>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 fa9c 	bl	8002990 <RCC_Delay>
 8002458:	e01c      	b.n	8002494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_RCC_OscConfig+0x274>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7ff fbfa 	bl	8001c58 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002466:	e00f      	b.n	8002488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff fbf6 	bl	8001c58 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d908      	bls.n	8002488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e146      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	42420000 	.word	0x42420000
 8002484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b92      	ldr	r3, [pc, #584]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e9      	bne.n	8002468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a6 	beq.w	80025ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b8b      	ldr	r3, [pc, #556]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b88      	ldr	r3, [pc, #544]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a87      	ldr	r2, [pc, #540]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b85      	ldr	r3, [pc, #532]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b7f      	ldr	r3, [pc, #508]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7e      	ldr	r2, [pc, #504]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7ff fbb7 	bl	8001c58 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7ff fbb3 	bl	8001c58 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	@ 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e103      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b75      	ldr	r3, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002514:	4b6f      	ldr	r3, [pc, #444]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a6e      	ldr	r2, [pc, #440]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e02d      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x334>
 800252a:	4b6a      	ldr	r3, [pc, #424]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a69      	ldr	r2, [pc, #420]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b67      	ldr	r3, [pc, #412]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a66      	ldr	r2, [pc, #408]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x356>
 800254c:	4b61      	ldr	r3, [pc, #388]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a60      	ldr	r2, [pc, #384]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	4b5e      	ldr	r3, [pc, #376]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a5d      	ldr	r2, [pc, #372]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002566:	4b5b      	ldr	r3, [pc, #364]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a5a      	ldr	r2, [pc, #360]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a57      	ldr	r2, [pc, #348]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7ff fb67 	bl	8001c58 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7ff fb63 	bl	8001c58 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0b1      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b4b      	ldr	r3, [pc, #300]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x37e>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff fb51 	bl	8001c58 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7ff fb4d 	bl	8001c58 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e09b      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b40      	ldr	r3, [pc, #256]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a3b      	ldr	r2, [pc, #236]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8087 	beq.w	8002706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d061      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d146      	bne.n	800269a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b33      	ldr	r3, [pc, #204]	@ (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7ff fb21 	bl	8001c58 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7ff fb1d 	bl	8001c58 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e06d      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002640:	d108      	bne.n	8002654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002642:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4921      	ldr	r1, [pc, #132]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a19      	ldr	r1, [r3, #32]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	430b      	orrs	r3, r1
 8002666:	491b      	ldr	r1, [pc, #108]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff faf1 	bl	8001c58 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff faed 	bl	8001c58 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e03d      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
 8002698:	e035      	b.n	8002706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fada 	bl	8001c58 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff fad6 	bl	8001c58 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e026      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x498>
 80026c6:	e01e      	b.n	8002706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e019      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_OscConfig+0x500>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d0      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4965      	ldr	r1, [pc, #404]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800277a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d040      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e073      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4936      	ldr	r1, [pc, #216]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7ff fa28 	bl	8001c58 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7ff fa24 	bl	8001c58 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e053      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d210      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCC_ClockConfig+0x1cc>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_ClockConfig+0x1d0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f986 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	080031f4 	.word	0x080031f4
 80028e0:	2000005c 	.word	0x2000005c
 80028e4:	20000060 	.word	0x20000060

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <HAL_RCC_GetSysClockFreq+0x94>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d002      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x30>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x36>
 8002916:	e027      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	613b      	str	r3, [r7, #16]
      break;
 800291c:	e027      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a17      	ldr	r2, [pc, #92]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_GetSysClockFreq+0x94>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0c5b      	lsrs	r3, r3, #17
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	4a11      	ldr	r2, [pc, #68]	@ (8002988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	fb03 f202 	mul.w	r2, r3, r2
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0c      	ldr	r2, [pc, #48]	@ (800298c <HAL_RCC_GetSysClockFreq+0xa4>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	613b      	str	r3, [r7, #16]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800296a:	613b      	str	r3, [r7, #16]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	693b      	ldr	r3, [r7, #16]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	007a1200 	.word	0x007a1200
 8002984:	08003204 	.word	0x08003204
 8002988:	08003214 	.word	0x08003214
 800298c:	003d0900 	.word	0x003d0900

08002990 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002998:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <RCC_Delay+0x34>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <RCC_Delay+0x38>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0a5b      	lsrs	r3, r3, #9
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ac:	bf00      	nop
  }
  while (Delay --);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	60fa      	str	r2, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <RCC_Delay+0x1c>
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	2000005c 	.word	0x2000005c
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e041      	b.n	8002a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff f852 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 fa56 	bl	8002ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d001      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e035      	b.n	8002af0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	@ (8002afc <HAL_TIM_Base_Start_IT+0x90>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_TIM_Base_Start_IT+0x4e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aae:	d004      	beq.n	8002aba <HAL_TIM_Base_Start_IT+0x4e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <HAL_TIM_Base_Start_IT+0x94>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d111      	bne.n	8002ade <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d010      	beq.n	8002aee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	e007      	b.n	8002aee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400

08002b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0202 	mvn.w	r2, #2
 8002b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f998 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f98b 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f99a 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0204 	mvn.w	r2, #4
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f972 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f965 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f974 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0208 	mvn.w	r2, #8
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f94c 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f93f 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f94e 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d020      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0210 	mvn.w	r2, #16
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2208      	movs	r2, #8
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f926 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f919 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f928 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0201 	mvn.w	r2, #1
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe fdb8 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa6f 	bl	8003172 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8f8 	bl	8002ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0220 	mvn.w	r2, #32
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa42 	bl	8003160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIM_ConfigClockSource+0x1c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e0b4      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x186>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d38:	d03e      	beq.n	8002db8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3e:	f200 8087 	bhi.w	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d46:	f000 8086 	beq.w	8002e56 <HAL_TIM_ConfigClockSource+0x172>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4e:	d87f      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b70      	cmp	r3, #112	@ 0x70
 8002d52:	d01a      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0xa6>
 8002d54:	2b70      	cmp	r3, #112	@ 0x70
 8002d56:	d87b      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b60      	cmp	r3, #96	@ 0x60
 8002d5a:	d050      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x11a>
 8002d5c:	2b60      	cmp	r3, #96	@ 0x60
 8002d5e:	d877      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b50      	cmp	r3, #80	@ 0x50
 8002d62:	d03c      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0xfa>
 8002d64:	2b50      	cmp	r3, #80	@ 0x50
 8002d66:	d873      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b40      	cmp	r3, #64	@ 0x40
 8002d6a:	d058      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x13a>
 8002d6c:	2b40      	cmp	r3, #64	@ 0x40
 8002d6e:	d86f      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b30      	cmp	r3, #48	@ 0x30
 8002d72:	d064      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d74:	2b30      	cmp	r3, #48	@ 0x30
 8002d76:	d86b      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d060      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d867      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05c      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d05a      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	e062      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	f000 f96a 	bl	8003072 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
      break;
 8002db6:	e04f      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	f000 f953 	bl	8003072 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dda:	609a      	str	r2, [r3, #8]
      break;
 8002ddc:	e03c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 f8ca 	bl	8002f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2150      	movs	r1, #80	@ 0x50
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f921 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e02c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 f8e8 	bl	8002fe0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2160      	movs	r1, #96	@ 0x60
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f911 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e01c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 f8aa 	bl	8002f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2140      	movs	r1, #64	@ 0x40
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f901 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e00c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f000 f8f8 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002e4e:	e003      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e000      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
	...

08002ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a2b      	ldr	r2, [pc, #172]	@ (8002f7c <TIM_Base_SetConfig+0xc0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_Base_SetConfig+0x28>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x28>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a28      	ldr	r2, [pc, #160]	@ (8002f80 <TIM_Base_SetConfig+0xc4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	@ (8002f7c <TIM_Base_SetConfig+0xc0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_Base_SetConfig+0x52>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f04:	d003      	beq.n	8002f0e <TIM_Base_SetConfig+0x52>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <TIM_Base_SetConfig+0xc4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d108      	bne.n	8002f20 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <TIM_Base_SetConfig+0xc0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d103      	bne.n	8002f54 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	611a      	str	r2, [r3, #16]
  }
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400

08002f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f023 030a 	bic.w	r3, r3, #10
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800300a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	031b      	lsls	r3, r3, #12
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800301c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	621a      	str	r2, [r3, #32]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	f043 0307 	orr.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800308c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	431a      	orrs	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4313      	orrs	r3, r2
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	609a      	str	r2, [r3, #8]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e041      	b.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003114:	d004      	beq.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a10      	ldr	r2, [pc, #64]	@ (800315c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10c      	bne.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40000400 	.word	0x40000400

08003160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <memset>:
 8003184:	4603      	mov	r3, r0
 8003186:	4402      	add	r2, r0
 8003188:	4293      	cmp	r3, r2
 800318a:	d100      	bne.n	800318e <memset+0xa>
 800318c:	4770      	bx	lr
 800318e:	f803 1b01 	strb.w	r1, [r3], #1
 8003192:	e7f9      	b.n	8003188 <memset+0x4>

08003194 <__libc_init_array>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	2600      	movs	r6, #0
 8003198:	4d0c      	ldr	r5, [pc, #48]	@ (80031cc <__libc_init_array+0x38>)
 800319a:	4c0d      	ldr	r4, [pc, #52]	@ (80031d0 <__libc_init_array+0x3c>)
 800319c:	1b64      	subs	r4, r4, r5
 800319e:	10a4      	asrs	r4, r4, #2
 80031a0:	42a6      	cmp	r6, r4
 80031a2:	d109      	bne.n	80031b8 <__libc_init_array+0x24>
 80031a4:	f000 f81a 	bl	80031dc <_init>
 80031a8:	2600      	movs	r6, #0
 80031aa:	4d0a      	ldr	r5, [pc, #40]	@ (80031d4 <__libc_init_array+0x40>)
 80031ac:	4c0a      	ldr	r4, [pc, #40]	@ (80031d8 <__libc_init_array+0x44>)
 80031ae:	1b64      	subs	r4, r4, r5
 80031b0:	10a4      	asrs	r4, r4, #2
 80031b2:	42a6      	cmp	r6, r4
 80031b4:	d105      	bne.n	80031c2 <__libc_init_array+0x2e>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031bc:	4798      	blx	r3
 80031be:	3601      	adds	r6, #1
 80031c0:	e7ee      	b.n	80031a0 <__libc_init_array+0xc>
 80031c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c6:	4798      	blx	r3
 80031c8:	3601      	adds	r6, #1
 80031ca:	e7f2      	b.n	80031b2 <__libc_init_array+0x1e>
 80031cc:	08003218 	.word	0x08003218
 80031d0:	08003218 	.word	0x08003218
 80031d4:	08003218 	.word	0x08003218
 80031d8:	0800321c 	.word	0x0800321c

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
